###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         28/May/2022  11:54:11 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\ZS #
#                          tack-CC2530-2.5.1a\Components\hal\target\CC2530EB\ #
#                          hal_lcd.c                                          #
#    Command line       =  -f H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530 #
#                          \ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Gene #
#                          ricApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.c #
#                          fg (-DCPU32MHZ -DROOT=__near_func                  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530 #
#                          \ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Gene #
#                          ricApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig. #
#                          cfg (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0  #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2 #
#                          .ÏîÄ¿ÍêÕûÔ´Âë\cc2530\ZStack-CC2530-2.5.1a\Componen #
#                          ts\hal\target\CC2530EB\hal_lcd.c -D ZTOOL_P1 -D    #
#                          MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D           #
#                          LCD_SUPPORTED=DEBUG -lC H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\ #
#                          2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\ZStack-CC2530-2.5.1a\Project #
#                          s\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB #
#                          \List\ -lA H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Â #
#                          ë\cc2530\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\GenericApp\CC2530DB\CoordinatorEB\List\        #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\ZS #
#                          tack-CC2530-2.5.1a\Projects\zstack\Samples\Generic #
#                          App\CC2530DB\CoordinatorEB\Obj\ -e                 #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530 #
#                          \ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Gene #
#                          ricApp\CC2530DB\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.Ïî #
#                          Ä¿ÍêÕûÔ´Âë\cc2530\ZStack-CC2530-2.5.1a\Projects\zs #
#                          tack\Samples\GenericApp\CC2530DB\..\Source\ -I     #
#                          H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\ZS #
#                          tack-CC2530-2.5.1a\Projects\zstack\Samples\Generic #
#                          App\CC2530DB\..\..\..\ZMain\TI2530DB\ -I           #
#                          H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\ZS #
#                          tack-CC2530-2.5.1a\Projects\zstack\Samples\Generic #
#                          App\CC2530DB\..\..\..\..\..\Components\hal\include #
#                          \ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc25 #
#                          30\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Ge #
#                          nericApp\CC2530DB\..\..\..\..\..\Components\hal\ta #
#                          rget\CC2530EB\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ #
#                          ÍêÕûÔ´Âë\cc2530\ZStack-CC2530-2.5.1a\Projects\zsta #
#                          ck\Samples\GenericApp\CC2530DB\..\..\..\..\..\Comp #
#                          onents\mac\include\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2 #
#                          .ÏîÄ¿ÍêÕûÔ´Âë\cc2530\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\.. #
#                          \Components\mac\high_level\ -I                     #
#                          H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\ZS #
#                          tack-CC2530-2.5.1a\Projects\zstack\Samples\Generic #
#                          App\CC2530DB\..\..\..\..\..\Components\mac\low_lev #
#                          el\srf04\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ #
#                          ´Âë\cc2530\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp\CC2530DB\..\..\..\..\..\Component #
#                          s\mac\low_level\srf04\single_chip\ -I              #
#                          H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\ZS #
#                          tack-CC2530-2.5.1a\Projects\zstack\Samples\Generic #
#                          App\CC2530DB\..\..\..\..\..\Components\mt\ -I      #
#                          H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\ZS #
#                          tack-CC2530-2.5.1a\Projects\zstack\Samples\Generic #
#                          App\CC2530DB\..\..\..\..\..\Components\osal\includ #
#                          e\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2 #
#                          530\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\G #
#                          enericApp\CC2530DB\..\..\..\..\..\Components\servi #
#                          ces\saddr\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕû #
#                          Ô´Âë\cc2530\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\..\..\Componen #
#                          ts\services\sdata\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2. #
#                          ÏîÄ¿ÍêÕûÔ´Âë\cc2530\ZStack-CC2530-2.5.1a\Projects\ #
#                          zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\ #
#                          Components\stack\af\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\ #
#                          2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\ZStack-CC2530-2.5.1a\Project #
#                          s\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\nwk\ -I                         #
#                          H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\ZS #
#                          tack-CC2530-2.5.1a\Projects\zstack\Samples\Generic #
#                          App\CC2530DB\..\..\..\..\..\Components\stack\sapi\ #
#                           -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc253 #
#                          0\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Gen #
#                          ericApp\CC2530DB\..\..\..\..\..\Components\stack\s #
#                          ec\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc #
#                          2530\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ #
#                          GenericApp\CC2530DB\..\..\..\..\..\Components\stac #
#                          k\sys\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë #
#                          \cc2530\ZStack-CC2530-2.5.1a\Projects\zstack\Sampl #
#                          es\GenericApp\CC2530DB\..\..\..\..\..\Components\s #
#                          tack\zdo\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ #
#                          ´Âë\cc2530\ZStack-CC2530-2.5.1a\Projects\zstack\Sa #
#                          mples\GenericApp\CC2530DB\..\..\..\..\..\Component #
#                          s\zmac\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Â #
#                          ë\cc2530\ZStack-CC2530-2.5.1a\Projects\zstack\Samp #
#                          les\GenericApp\CC2530DB\..\..\..\..\..\Components\ #
#                          zmac\f8w\ -Ohz --require_prototypes                #
#    List file          =  H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\ZS #
#                          tack-CC2530-2.5.1a\Projects\zstack\Samples\Generic #
#                          App\CC2530DB\CoordinatorEB\List\hal_lcd.lst        #
#    Object file        =  H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\ZS #
#                          tack-CC2530-2.5.1a\Projects\zstack\Samples\Generic #
#                          App\CC2530DB\CoordinatorEB\Obj\hal_lcd.r51         #
#                                                                             #
#                                                                             #
###############################################################################

H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\ZStack-CC2530-2.5.1a\Components\hal\target\CC2530EB\hal_lcd.c
      1          #include <ioCC2530.h>

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
      2          #include "hal_lcd.h"
      3          #include "hal_types.h"
      4             
      5          //È¡ºº×Ö×ÖÄ££¬ºáÏò8µãÓÒ¸ßÎ»   
      6             

   \                                 In  segment CODE_C, align 1
      7          __code const unsigned char asc2_1608[1520]={
   \                     asc2_1608:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0
   \   000013   08           DB 8
   \   000014   08           DB 8
   \   000015   08           DB 8
   \   000016   08           DB 8
   \   000017   08           DB 8
   \   000018   08           DB 8
   \   000019   08           DB 8
   \   00001A   00           DB 0
   \   00001B   00           DB 0
   \   00001C   18           DB 24
   \   00001D   18           DB 24
   \   00001E   00           DB 0
   \   00001F   00           DB 0
   \   000020   00           DB 0
   \   000021   48           DB 72
   \   000022   6C           DB 108
   \   000023   24           DB 36
   \   000024   12           DB 18
   \   000025   00           DB 0
   \   000026   00           DB 0
   \   000027   00           DB 0
   \   000028   00           DB 0
   \   000029   00           DB 0
   \   00002A   00           DB 0
   \   00002B   00           DB 0
   \   00002C   00           DB 0
   \   00002D   00           DB 0
   \   00002E   00           DB 0
   \   00002F   00           DB 0
   \   000030   00           DB 0
   \   000031   00           DB 0
   \   000032   00           DB 0
   \   000033   24           DB 36
   \   000034   24           DB 36
   \   000035   24           DB 36
   \   000036   7F           DB 127
   \   000037   12           DB 18
   \   000038   12           DB 18
   \   000039   12           DB 18
   \   00003A   7F           DB 127
   \   00003B   12           DB 18
   \   00003C   12           DB 18
   \   00003D   12           DB 18
   \   00003E   00           DB 0
   \   00003F   00           DB 0
   \   000040   00           DB 0
   \   000041   00           DB 0
   \   000042   08           DB 8
   \   000043   1C           DB 28
   \   000044   2A           DB 42
   \   000045   2A           DB 42
   \   000046   0A           DB 10
   \   000047   0C           DB 12
   \   000048   18           DB 24
   \   000049   28           DB 40
   \   00004A   28           DB 40
   \   00004B   2A           DB 42
   \   00004C   2A           DB 42
   \   00004D   1C           DB 28
   \   00004E   08           DB 8
   \   00004F   08           DB 8
   \   000050   00           DB 0
   \   000051   00           DB 0
   \   000052   00           DB 0
   \   000053   22           DB 34
   \   000054   25           DB 37
   \   000055   15           DB 21
   \   000056   15           DB 21
   \   000057   15           DB 21
   \   000058   2A           DB 42
   \   000059   58           DB 88
   \   00005A   54           DB 84
   \   00005B   54           DB 84
   \   00005C   54           DB 84
   \   00005D   22           DB 34
   \   00005E   00           DB 0
   \   00005F   00           DB 0
   \   000060   00           DB 0
   \   000061   00           DB 0
   \   000062   00           DB 0
   \   000063   0C           DB 12
   \   000064   12           DB 18
   \   000065   12           DB 18
   \   000066   12           DB 18
   \   000067   0A           DB 10
   \   000068   76           DB 118
   \   000069   25           DB 37
   \   00006A   29           DB 41
   \   00006B   11           DB 17
   \   00006C   91           DB 145
   \   00006D   6E           DB 110
   \   00006E   00           DB 0
   \   00006F   00           DB 0
   \   000070   00           DB 0
   \   000071   06           DB 6
   \   000072   06           DB 6
   \   000073   04           DB 4
   \   000074   03           DB 3
   \   000075   00           DB 0
   \   000076   00           DB 0
   \   000077   00           DB 0
   \   000078   00           DB 0
   \   000079   00           DB 0
   \   00007A   00           DB 0
   \   00007B   00           DB 0
   \   00007C   00           DB 0
   \   00007D   00           DB 0
   \   00007E   00           DB 0
   \   00007F   00           DB 0
   \   000080   00           DB 0
   \   000081   40           DB 64
   \   000082   20           DB 32
   \   000083   10           DB 16
   \   000084   10           DB 16
   \   000085   08           DB 8
   \   000086   08           DB 8
   \   000087   08           DB 8
   \   000088   08           DB 8
   \   000089   08           DB 8
   \   00008A   08           DB 8
   \   00008B   10           DB 16
   \   00008C   10           DB 16
   \   00008D   20           DB 32
   \   00008E   40           DB 64
   \   00008F   00           DB 0
   \   000090   00           DB 0
   \   000091   02           DB 2
   \   000092   04           DB 4
   \   000093   08           DB 8
   \   000094   08           DB 8
   \   000095   10           DB 16
   \   000096   10           DB 16
   \   000097   10           DB 16
   \   000098   10           DB 16
   \   000099   10           DB 16
   \   00009A   10           DB 16
   \   00009B   08           DB 8
   \   00009C   08           DB 8
   \   00009D   04           DB 4
   \   00009E   02           DB 2
   \   00009F   00           DB 0
   \   0000A0   00           DB 0
   \   0000A1   00           DB 0
   \   0000A2   00           DB 0
   \   0000A3   00           DB 0
   \   0000A4   08           DB 8
   \   0000A5   08           DB 8
   \   0000A6   6B           DB 107
   \   0000A7   1C           DB 28
   \   0000A8   1C           DB 28
   \   0000A9   6B           DB 107
   \   0000AA   08           DB 8
   \   0000AB   08           DB 8
   \   0000AC   00           DB 0
   \   0000AD   00           DB 0
   \   0000AE   00           DB 0
   \   0000AF   00           DB 0
   \   0000B0   00           DB 0
   \   0000B1   00           DB 0
   \   0000B2   00           DB 0
   \   0000B3   00           DB 0
   \   0000B4   08           DB 8
   \   0000B5   08           DB 8
   \   0000B6   08           DB 8
   \   0000B7   08           DB 8
   \   0000B8   7F           DB 127
   \   0000B9   08           DB 8
   \   0000BA   08           DB 8
   \   0000BB   08           DB 8
   \   0000BC   08           DB 8
   \   0000BD   00           DB 0
   \   0000BE   00           DB 0
   \   0000BF   00           DB 0
   \   0000C0   00           DB 0
   \   0000C1   00           DB 0
   \   0000C2   00           DB 0
   \   0000C3   00           DB 0
   \   0000C4   00           DB 0
   \   0000C5   00           DB 0
   \   0000C6   00           DB 0
   \   0000C7   00           DB 0
   \   0000C8   00           DB 0
   \   0000C9   00           DB 0
   \   0000CA   00           DB 0
   \   0000CB   00           DB 0
   \   0000CC   06           DB 6
   \   0000CD   06           DB 6
   \   0000CE   04           DB 4
   \   0000CF   03           DB 3
   \   0000D0   00           DB 0
   \   0000D1   00           DB 0
   \   0000D2   00           DB 0
   \   0000D3   00           DB 0
   \   0000D4   00           DB 0
   \   0000D5   00           DB 0
   \   0000D6   00           DB 0
   \   0000D7   00           DB 0
   \   0000D8   FE           DB 254
   \   0000D9   00           DB 0
   \   0000DA   00           DB 0
   \   0000DB   00           DB 0
   \   0000DC   00           DB 0
   \   0000DD   00           DB 0
   \   0000DE   00           DB 0
   \   0000DF   00           DB 0
   \   0000E0   00           DB 0
   \   0000E1   00           DB 0
   \   0000E2   00           DB 0
   \   0000E3   00           DB 0
   \   0000E4   00           DB 0
   \   0000E5   00           DB 0
   \   0000E6   00           DB 0
   \   0000E7   00           DB 0
   \   0000E8   00           DB 0
   \   0000E9   00           DB 0
   \   0000EA   00           DB 0
   \   0000EB   00           DB 0
   \   0000EC   06           DB 6
   \   0000ED   06           DB 6
   \   0000EE   00           DB 0
   \   0000EF   00           DB 0
   \   0000F0   00           DB 0
   \   0000F1   00           DB 0
   \   0000F2   80           DB 128
   \   0000F3   40           DB 64
   \   0000F4   40           DB 64
   \   0000F5   20           DB 32
   \   0000F6   20           DB 32
   \   0000F7   10           DB 16
   \   0000F8   10           DB 16
   \   0000F9   08           DB 8
   \   0000FA   08           DB 8
   \   0000FB   04           DB 4
   \   0000FC   04           DB 4
   \   0000FD   02           DB 2
   \   0000FE   02           DB 2
   \   0000FF   00           DB 0
   \   000100   00           DB 0
   \   000101   00           DB 0
   \   000102   00           DB 0
   \   000103   18           DB 24
   \   000104   24           DB 36
   \   000105   42           DB 66
   \   000106   42           DB 66
   \   000107   42           DB 66
   \   000108   42           DB 66
   \   000109   42           DB 66
   \   00010A   42           DB 66
   \   00010B   42           DB 66
   \   00010C   24           DB 36
   \   00010D   18           DB 24
   \   00010E   00           DB 0
   \   00010F   00           DB 0
   \   000110   00           DB 0
   \   000111   00           DB 0
   \   000112   00           DB 0
   \   000113   08           DB 8
   \   000114   0E           DB 14
   \   000115   08           DB 8
   \   000116   08           DB 8
   \   000117   08           DB 8
   \   000118   08           DB 8
   \   000119   08           DB 8
   \   00011A   08           DB 8
   \   00011B   08           DB 8
   \   00011C   08           DB 8
   \   00011D   3E           DB 62
   \   00011E   00           DB 0
   \   00011F   00           DB 0
   \   000120   00           DB 0
   \   000121   00           DB 0
   \   000122   00           DB 0
   \   000123   3C           DB 60
   \   000124   42           DB 66
   \   000125   42           DB 66
   \   000126   42           DB 66
   \   000127   20           DB 32
   \   000128   20           DB 32
   \   000129   10           DB 16
   \   00012A   08           DB 8
   \   00012B   04           DB 4
   \   00012C   42           DB 66
   \   00012D   7E           DB 126
   \   00012E   00           DB 0
   \   00012F   00           DB 0
   \   000130   00           DB 0
   \   000131   00           DB 0
   \   000132   00           DB 0
   \   000133   3C           DB 60
   \   000134   42           DB 66
   \   000135   42           DB 66
   \   000136   20           DB 32
   \   000137   18           DB 24
   \   000138   20           DB 32
   \   000139   40           DB 64
   \   00013A   40           DB 64
   \   00013B   42           DB 66
   \   00013C   22           DB 34
   \   00013D   1C           DB 28
   \   00013E   00           DB 0
   \   00013F   00           DB 0
   \   000140   00           DB 0
   \   000141   00           DB 0
   \   000142   00           DB 0
   \   000143   20           DB 32
   \   000144   30           DB 48
   \   000145   28           DB 40
   \   000146   24           DB 36
   \   000147   24           DB 36
   \   000148   22           DB 34
   \   000149   22           DB 34
   \   00014A   7E           DB 126
   \   00014B   20           DB 32
   \   00014C   20           DB 32
   \   00014D   78           DB 120
   \   00014E   00           DB 0
   \   00014F   00           DB 0
   \   000150   00           DB 0
   \   000151   00           DB 0
   \   000152   00           DB 0
   \   000153   7E           DB 126
   \   000154   02           DB 2
   \   000155   02           DB 2
   \   000156   02           DB 2
   \   000157   1A           DB 26
   \   000158   26           DB 38
   \   000159   40           DB 64
   \   00015A   40           DB 64
   \   00015B   42           DB 66
   \   00015C   22           DB 34
   \   00015D   1C           DB 28
   \   00015E   00           DB 0
   \   00015F   00           DB 0
   \   000160   00           DB 0
   \   000161   00           DB 0
   \   000162   00           DB 0
   \   000163   38           DB 56
   \   000164   24           DB 36
   \   000165   02           DB 2
   \   000166   02           DB 2
   \   000167   1A           DB 26
   \   000168   26           DB 38
   \   000169   42           DB 66
   \   00016A   42           DB 66
   \   00016B   42           DB 66
   \   00016C   24           DB 36
   \   00016D   18           DB 24
   \   00016E   00           DB 0
   \   00016F   00           DB 0
   \   000170   00           DB 0
   \   000171   00           DB 0
   \   000172   00           DB 0
   \   000173   7E           DB 126
   \   000174   22           DB 34
   \   000175   22           DB 34
   \   000176   10           DB 16
   \   000177   10           DB 16
   \   000178   08           DB 8
   \   000179   08           DB 8
   \   00017A   08           DB 8
   \   00017B   08           DB 8
   \   00017C   08           DB 8
   \   00017D   08           DB 8
   \   00017E   00           DB 0
   \   00017F   00           DB 0
   \   000180   00           DB 0
   \   000181   00           DB 0
   \   000182   00           DB 0
   \   000183   3C           DB 60
   \   000184   42           DB 66
   \   000185   42           DB 66
   \   000186   42           DB 66
   \   000187   24           DB 36
   \   000188   18           DB 24
   \   000189   24           DB 36
   \   00018A   42           DB 66
   \   00018B   42           DB 66
   \   00018C   42           DB 66
   \   00018D   3C           DB 60
   \   00018E   00           DB 0
   \   00018F   00           DB 0
   \   000190   00           DB 0
   \   000191   00           DB 0
   \   000192   00           DB 0
   \   000193   18           DB 24
   \   000194   24           DB 36
   \   000195   42           DB 66
   \   000196   42           DB 66
   \   000197   42           DB 66
   \   000198   64           DB 100
   \   000199   58           DB 88
   \   00019A   40           DB 64
   \   00019B   40           DB 64
   \   00019C   24           DB 36
   \   00019D   1C           DB 28
   \   00019E   00           DB 0
   \   00019F   00           DB 0
   \   0001A0   00           DB 0
   \   0001A1   00           DB 0
   \   0001A2   00           DB 0
   \   0001A3   00           DB 0
   \   0001A4   00           DB 0
   \   0001A5   00           DB 0
   \   0001A6   18           DB 24
   \   0001A7   18           DB 24
   \   0001A8   00           DB 0
   \   0001A9   00           DB 0
   \   0001AA   00           DB 0
   \   0001AB   00           DB 0
   \   0001AC   18           DB 24
   \   0001AD   18           DB 24
   \   0001AE   00           DB 0
   \   0001AF   00           DB 0
   \   0001B0   00           DB 0
   \   0001B1   00           DB 0
   \   0001B2   00           DB 0
   \   0001B3   00           DB 0
   \   0001B4   00           DB 0
   \   0001B5   00           DB 0
   \   0001B6   00           DB 0
   \   0001B7   08           DB 8
   \   0001B8   00           DB 0
   \   0001B9   00           DB 0
   \   0001BA   00           DB 0
   \   0001BB   00           DB 0
   \   0001BC   00           DB 0
   \   0001BD   08           DB 8
   \   0001BE   08           DB 8
   \   0001BF   04           DB 4
   \   0001C0   00           DB 0
   \   0001C1   00           DB 0
   \   0001C2   00           DB 0
   \   0001C3   40           DB 64
   \   0001C4   20           DB 32
   \   0001C5   10           DB 16
   \   0001C6   08           DB 8
   \   0001C7   04           DB 4
   \   0001C8   02           DB 2
   \   0001C9   04           DB 4
   \   0001CA   08           DB 8
   \   0001CB   10           DB 16
   \   0001CC   20           DB 32
   \   0001CD   40           DB 64
   \   0001CE   00           DB 0
   \   0001CF   00           DB 0
   \   0001D0   00           DB 0
   \   0001D1   00           DB 0
   \   0001D2   00           DB 0
   \   0001D3   00           DB 0
   \   0001D4   00           DB 0
   \   0001D5   00           DB 0
   \   0001D6   7F           DB 127
   \   0001D7   00           DB 0
   \   0001D8   00           DB 0
   \   0001D9   00           DB 0
   \   0001DA   7F           DB 127
   \   0001DB   00           DB 0
   \   0001DC   00           DB 0
   \   0001DD   00           DB 0
   \   0001DE   00           DB 0
   \   0001DF   00           DB 0
   \   0001E0   00           DB 0
   \   0001E1   00           DB 0
   \   0001E2   00           DB 0
   \   0001E3   02           DB 2
   \   0001E4   04           DB 4
   \   0001E5   08           DB 8
   \   0001E6   10           DB 16
   \   0001E7   20           DB 32
   \   0001E8   40           DB 64
   \   0001E9   20           DB 32
   \   0001EA   10           DB 16
   \   0001EB   08           DB 8
   \   0001EC   04           DB 4
   \   0001ED   02           DB 2
   \   0001EE   00           DB 0
   \   0001EF   00           DB 0
   \   0001F0   00           DB 0
   \   0001F1   00           DB 0
   \   0001F2   00           DB 0
   \   0001F3   3C           DB 60
   \   0001F4   42           DB 66
   \   0001F5   42           DB 66
   \   0001F6   46           DB 70
   \   0001F7   40           DB 64
   \   0001F8   20           DB 32
   \   0001F9   10           DB 16
   \   0001FA   10           DB 16
   \   0001FB   00           DB 0
   \   0001FC   18           DB 24
   \   0001FD   18           DB 24
   \   0001FE   00           DB 0
   \   0001FF   00           DB 0
   \   000200   00           DB 0
   \   000201   00           DB 0
   \   000202   00           DB 0
   \   000203   1C           DB 28
   \   000204   22           DB 34
   \   000205   5A           DB 90
   \   000206   55           DB 85
   \   000207   55           DB 85
   \   000208   55           DB 85
   \   000209   55           DB 85
   \   00020A   2D           DB 45
   \   00020B   42           DB 66
   \   00020C   22           DB 34
   \   00020D   1C           DB 28
   \   00020E   00           DB 0
   \   00020F   00           DB 0
   \   000210   00           DB 0
   \   000211   00           DB 0
   \   000212   00           DB 0
   \   000213   08           DB 8
   \   000214   08           DB 8
   \   000215   18           DB 24
   \   000216   14           DB 20
   \   000217   14           DB 20
   \   000218   24           DB 36
   \   000219   3C           DB 60
   \   00021A   22           DB 34
   \   00021B   42           DB 66
   \   00021C   42           DB 66
   \   00021D   E7           DB 231
   \   00021E   00           DB 0
   \   00021F   00           DB 0
   \   000220   00           DB 0
   \   000221   00           DB 0
   \   000222   00           DB 0
   \   000223   1F           DB 31
   \   000224   22           DB 34
   \   000225   22           DB 34
   \   000226   22           DB 34
   \   000227   1E           DB 30
   \   000228   22           DB 34
   \   000229   42           DB 66
   \   00022A   42           DB 66
   \   00022B   42           DB 66
   \   00022C   22           DB 34
   \   00022D   1F           DB 31
   \   00022E   00           DB 0
   \   00022F   00           DB 0
   \   000230   00           DB 0
   \   000231   00           DB 0
   \   000232   00           DB 0
   \   000233   7C           DB 124
   \   000234   42           DB 66
   \   000235   42           DB 66
   \   000236   01           DB 1
   \   000237   01           DB 1
   \   000238   01           DB 1
   \   000239   01           DB 1
   \   00023A   01           DB 1
   \   00023B   42           DB 66
   \   00023C   22           DB 34
   \   00023D   1C           DB 28
   \   00023E   00           DB 0
   \   00023F   00           DB 0
   \   000240   00           DB 0
   \   000241   00           DB 0
   \   000242   00           DB 0
   \   000243   1F           DB 31
   \   000244   22           DB 34
   \   000245   42           DB 66
   \   000246   42           DB 66
   \   000247   42           DB 66
   \   000248   42           DB 66
   \   000249   42           DB 66
   \   00024A   42           DB 66
   \   00024B   42           DB 66
   \   00024C   22           DB 34
   \   00024D   1F           DB 31
   \   00024E   00           DB 0
   \   00024F   00           DB 0
   \   000250   00           DB 0
   \   000251   00           DB 0
   \   000252   00           DB 0
   \   000253   3F           DB 63
   \   000254   42           DB 66
   \   000255   12           DB 18
   \   000256   12           DB 18
   \   000257   1E           DB 30
   \   000258   12           DB 18
   \   000259   12           DB 18
   \   00025A   02           DB 2
   \   00025B   42           DB 66
   \   00025C   42           DB 66
   \   00025D   3F           DB 63
   \   00025E   00           DB 0
   \   00025F   00           DB 0
   \   000260   00           DB 0
   \   000261   00           DB 0
   \   000262   00           DB 0
   \   000263   3F           DB 63
   \   000264   42           DB 66
   \   000265   12           DB 18
   \   000266   12           DB 18
   \   000267   1E           DB 30
   \   000268   12           DB 18
   \   000269   12           DB 18
   \   00026A   02           DB 2
   \   00026B   02           DB 2
   \   00026C   02           DB 2
   \   00026D   07           DB 7
   \   00026E   00           DB 0
   \   00026F   00           DB 0
   \   000270   00           DB 0
   \   000271   00           DB 0
   \   000272   00           DB 0
   \   000273   3C           DB 60
   \   000274   22           DB 34
   \   000275   22           DB 34
   \   000276   01           DB 1
   \   000277   01           DB 1
   \   000278   01           DB 1
   \   000279   71           DB 113
   \   00027A   21           DB 33
   \   00027B   22           DB 34
   \   00027C   22           DB 34
   \   00027D   1C           DB 28
   \   00027E   00           DB 0
   \   00027F   00           DB 0
   \   000280   00           DB 0
   \   000281   00           DB 0
   \   000282   00           DB 0
   \   000283   E7           DB 231
   \   000284   42           DB 66
   \   000285   42           DB 66
   \   000286   42           DB 66
   \   000287   42           DB 66
   \   000288   7E           DB 126
   \   000289   42           DB 66
   \   00028A   42           DB 66
   \   00028B   42           DB 66
   \   00028C   42           DB 66
   \   00028D   E7           DB 231
   \   00028E   00           DB 0
   \   00028F   00           DB 0
   \   000290   00           DB 0
   \   000291   00           DB 0
   \   000292   00           DB 0
   \   000293   3E           DB 62
   \   000294   08           DB 8
   \   000295   08           DB 8
   \   000296   08           DB 8
   \   000297   08           DB 8
   \   000298   08           DB 8
   \   000299   08           DB 8
   \   00029A   08           DB 8
   \   00029B   08           DB 8
   \   00029C   08           DB 8
   \   00029D   3E           DB 62
   \   00029E   00           DB 0
   \   00029F   00           DB 0
   \   0002A0   00           DB 0
   \   0002A1   00           DB 0
   \   0002A2   00           DB 0
   \   0002A3   7C           DB 124
   \   0002A4   10           DB 16
   \   0002A5   10           DB 16
   \   0002A6   10           DB 16
   \   0002A7   10           DB 16
   \   0002A8   10           DB 16
   \   0002A9   10           DB 16
   \   0002AA   10           DB 16
   \   0002AB   10           DB 16
   \   0002AC   10           DB 16
   \   0002AD   10           DB 16
   \   0002AE   11           DB 17
   \   0002AF   0F           DB 15
   \   0002B0   00           DB 0
   \   0002B1   00           DB 0
   \   0002B2   00           DB 0
   \   0002B3   77           DB 119
   \   0002B4   22           DB 34
   \   0002B5   12           DB 18
   \   0002B6   0A           DB 10
   \   0002B7   0E           DB 14
   \   0002B8   0A           DB 10
   \   0002B9   12           DB 18
   \   0002BA   12           DB 18
   \   0002BB   22           DB 34
   \   0002BC   22           DB 34
   \   0002BD   77           DB 119
   \   0002BE   00           DB 0
   \   0002BF   00           DB 0
   \   0002C0   00           DB 0
   \   0002C1   00           DB 0
   \   0002C2   00           DB 0
   \   0002C3   07           DB 7
   \   0002C4   02           DB 2
   \   0002C5   02           DB 2
   \   0002C6   02           DB 2
   \   0002C7   02           DB 2
   \   0002C8   02           DB 2
   \   0002C9   02           DB 2
   \   0002CA   02           DB 2
   \   0002CB   02           DB 2
   \   0002CC   42           DB 66
   \   0002CD   7F           DB 127
   \   0002CE   00           DB 0
   \   0002CF   00           DB 0
   \   0002D0   00           DB 0
   \   0002D1   00           DB 0
   \   0002D2   00           DB 0
   \   0002D3   77           DB 119
   \   0002D4   36           DB 54
   \   0002D5   36           DB 54
   \   0002D6   36           DB 54
   \   0002D7   36           DB 54
   \   0002D8   2A           DB 42
   \   0002D9   2A           DB 42
   \   0002DA   2A           DB 42
   \   0002DB   2A           DB 42
   \   0002DC   2A           DB 42
   \   0002DD   6B           DB 107
   \   0002DE   00           DB 0
   \   0002DF   00           DB 0
   \   0002E0   00           DB 0
   \   0002E1   00           DB 0
   \   0002E2   00           DB 0
   \   0002E3   E3           DB 227
   \   0002E4   46           DB 70
   \   0002E5   46           DB 70
   \   0002E6   4A           DB 74
   \   0002E7   4A           DB 74
   \   0002E8   52           DB 82
   \   0002E9   52           DB 82
   \   0002EA   52           DB 82
   \   0002EB   62           DB 98
   \   0002EC   62           DB 98
   \   0002ED   47           DB 71
   \   0002EE   00           DB 0
   \   0002EF   00           DB 0
   \   0002F0   00           DB 0
   \   0002F1   00           DB 0
   \   0002F2   00           DB 0
   \   0002F3   1C           DB 28
   \   0002F4   22           DB 34
   \   0002F5   41           DB 65
   \   0002F6   41           DB 65
   \   0002F7   41           DB 65
   \   0002F8   41           DB 65
   \   0002F9   41           DB 65
   \   0002FA   41           DB 65
   \   0002FB   41           DB 65
   \   0002FC   22           DB 34
   \   0002FD   1C           DB 28
   \   0002FE   00           DB 0
   \   0002FF   00           DB 0
   \   000300   00           DB 0
   \   000301   00           DB 0
   \   000302   00           DB 0
   \   000303   3F           DB 63
   \   000304   42           DB 66
   \   000305   42           DB 66
   \   000306   42           DB 66
   \   000307   42           DB 66
   \   000308   3E           DB 62
   \   000309   02           DB 2
   \   00030A   02           DB 2
   \   00030B   02           DB 2
   \   00030C   02           DB 2
   \   00030D   07           DB 7
   \   00030E   00           DB 0
   \   00030F   00           DB 0
   \   000310   00           DB 0
   \   000311   00           DB 0
   \   000312   00           DB 0
   \   000313   1C           DB 28
   \   000314   22           DB 34
   \   000315   41           DB 65
   \   000316   41           DB 65
   \   000317   41           DB 65
   \   000318   41           DB 65
   \   000319   41           DB 65
   \   00031A   4D           DB 77
   \   00031B   53           DB 83
   \   00031C   32           DB 50
   \   00031D   1C           DB 28
   \   00031E   60           DB 96
   \   00031F   00           DB 0
   \   000320   00           DB 0
   \   000321   00           DB 0
   \   000322   00           DB 0
   \   000323   3F           DB 63
   \   000324   42           DB 66
   \   000325   42           DB 66
   \   000326   42           DB 66
   \   000327   3E           DB 62
   \   000328   12           DB 18
   \   000329   12           DB 18
   \   00032A   22           DB 34
   \   00032B   22           DB 34
   \   00032C   42           DB 66
   \   00032D   C7           DB 199
   \   00032E   00           DB 0
   \   00032F   00           DB 0
   \   000330   00           DB 0
   \   000331   00           DB 0
   \   000332   00           DB 0
   \   000333   7C           DB 124
   \   000334   42           DB 66
   \   000335   42           DB 66
   \   000336   02           DB 2
   \   000337   04           DB 4
   \   000338   18           DB 24
   \   000339   20           DB 32
   \   00033A   40           DB 64
   \   00033B   42           DB 66
   \   00033C   42           DB 66
   \   00033D   3E           DB 62
   \   00033E   00           DB 0
   \   00033F   00           DB 0
   \   000340   00           DB 0
   \   000341   00           DB 0
   \   000342   00           DB 0
   \   000343   7F           DB 127
   \   000344   49           DB 73
   \   000345   08           DB 8
   \   000346   08           DB 8
   \   000347   08           DB 8
   \   000348   08           DB 8
   \   000349   08           DB 8
   \   00034A   08           DB 8
   \   00034B   08           DB 8
   \   00034C   08           DB 8
   \   00034D   1C           DB 28
   \   00034E   00           DB 0
   \   00034F   00           DB 0
   \   000350   00           DB 0
   \   000351   00           DB 0
   \   000352   00           DB 0
   \   000353   E7           DB 231
   \   000354   42           DB 66
   \   000355   42           DB 66
   \   000356   42           DB 66
   \   000357   42           DB 66
   \   000358   42           DB 66
   \   000359   42           DB 66
   \   00035A   42           DB 66
   \   00035B   42           DB 66
   \   00035C   42           DB 66
   \   00035D   3C           DB 60
   \   00035E   00           DB 0
   \   00035F   00           DB 0
   \   000360   00           DB 0
   \   000361   00           DB 0
   \   000362   00           DB 0
   \   000363   E7           DB 231
   \   000364   42           DB 66
   \   000365   42           DB 66
   \   000366   22           DB 34
   \   000367   24           DB 36
   \   000368   24           DB 36
   \   000369   14           DB 20
   \   00036A   14           DB 20
   \   00036B   18           DB 24
   \   00036C   08           DB 8
   \   00036D   08           DB 8
   \   00036E   00           DB 0
   \   00036F   00           DB 0
   \   000370   00           DB 0
   \   000371   00           DB 0
   \   000372   00           DB 0
   \   000373   6B           DB 107
   \   000374   49           DB 73
   \   000375   49           DB 73
   \   000376   49           DB 73
   \   000377   49           DB 73
   \   000378   55           DB 85
   \   000379   55           DB 85
   \   00037A   36           DB 54
   \   00037B   22           DB 34
   \   00037C   22           DB 34
   \   00037D   22           DB 34
   \   00037E   00           DB 0
   \   00037F   00           DB 0
   \   000380   00           DB 0
   \   000381   00           DB 0
   \   000382   00           DB 0
   \   000383   E7           DB 231
   \   000384   42           DB 66
   \   000385   24           DB 36
   \   000386   24           DB 36
   \   000387   18           DB 24
   \   000388   18           DB 24
   \   000389   18           DB 24
   \   00038A   24           DB 36
   \   00038B   24           DB 36
   \   00038C   42           DB 66
   \   00038D   E7           DB 231
   \   00038E   00           DB 0
   \   00038F   00           DB 0
   \   000390   00           DB 0
   \   000391   00           DB 0
   \   000392   00           DB 0
   \   000393   77           DB 119
   \   000394   22           DB 34
   \   000395   22           DB 34
   \   000396   14           DB 20
   \   000397   14           DB 20
   \   000398   08           DB 8
   \   000399   08           DB 8
   \   00039A   08           DB 8
   \   00039B   08           DB 8
   \   00039C   08           DB 8
   \   00039D   1C           DB 28
   \   00039E   00           DB 0
   \   00039F   00           DB 0
   \   0003A0   00           DB 0
   \   0003A1   00           DB 0
   \   0003A2   00           DB 0
   \   0003A3   7E           DB 126
   \   0003A4   21           DB 33
   \   0003A5   20           DB 32
   \   0003A6   10           DB 16
   \   0003A7   10           DB 16
   \   0003A8   08           DB 8
   \   0003A9   04           DB 4
   \   0003AA   04           DB 4
   \   0003AB   42           DB 66
   \   0003AC   42           DB 66
   \   0003AD   3F           DB 63
   \   0003AE   00           DB 0
   \   0003AF   00           DB 0
   \   0003B0   00           DB 0
   \   0003B1   78           DB 120
   \   0003B2   08           DB 8
   \   0003B3   08           DB 8
   \   0003B4   08           DB 8
   \   0003B5   08           DB 8
   \   0003B6   08           DB 8
   \   0003B7   08           DB 8
   \   0003B8   08           DB 8
   \   0003B9   08           DB 8
   \   0003BA   08           DB 8
   \   0003BB   08           DB 8
   \   0003BC   08           DB 8
   \   0003BD   08           DB 8
   \   0003BE   78           DB 120
   \   0003BF   00           DB 0
   \   0003C0   00           DB 0
   \   0003C1   00           DB 0
   \   0003C2   02           DB 2
   \   0003C3   02           DB 2
   \   0003C4   04           DB 4
   \   0003C5   04           DB 4
   \   0003C6   08           DB 8
   \   0003C7   08           DB 8
   \   0003C8   08           DB 8
   \   0003C9   10           DB 16
   \   0003CA   10           DB 16
   \   0003CB   20           DB 32
   \   0003CC   20           DB 32
   \   0003CD   20           DB 32
   \   0003CE   40           DB 64
   \   0003CF   40           DB 64
   \   0003D0   00           DB 0
   \   0003D1   1E           DB 30
   \   0003D2   10           DB 16
   \   0003D3   10           DB 16
   \   0003D4   10           DB 16
   \   0003D5   10           DB 16
   \   0003D6   10           DB 16
   \   0003D7   10           DB 16
   \   0003D8   10           DB 16
   \   0003D9   10           DB 16
   \   0003DA   10           DB 16
   \   0003DB   10           DB 16
   \   0003DC   10           DB 16
   \   0003DD   10           DB 16
   \   0003DE   1E           DB 30
   \   0003DF   00           DB 0
   \   0003E0   00           DB 0
   \   0003E1   38           DB 56
   \   0003E2   44           DB 68
   \   0003E3   00           DB 0
   \   0003E4   00           DB 0
   \   0003E5   00           DB 0
   \   0003E6   00           DB 0
   \   0003E7   00           DB 0
   \   0003E8   00           DB 0
   \   0003E9   00           DB 0
   \   0003EA   00           DB 0
   \   0003EB   00           DB 0
   \   0003EC   00           DB 0
   \   0003ED   00           DB 0
   \   0003EE   00           DB 0
   \   0003EF   00           DB 0
   \   0003F0   00           DB 0
   \   0003F1   00           DB 0
   \   0003F2   00           DB 0
   \   0003F3   00           DB 0
   \   0003F4   00           DB 0
   \   0003F5   00           DB 0
   \   0003F6   00           DB 0
   \   0003F7   00           DB 0
   \   0003F8   00           DB 0
   \   0003F9   00           DB 0
   \   0003FA   00           DB 0
   \   0003FB   00           DB 0
   \   0003FC   00           DB 0
   \   0003FD   00           DB 0
   \   0003FE   00           DB 0
   \   0003FF   FF           DB 255
   \   000400   00           DB 0
   \   000401   06           DB 6
   \   000402   08           DB 8
   \   000403   00           DB 0
   \   000404   00           DB 0
   \   000405   00           DB 0
   \   000406   00           DB 0
   \   000407   00           DB 0
   \   000408   00           DB 0
   \   000409   00           DB 0
   \   00040A   00           DB 0
   \   00040B   00           DB 0
   \   00040C   00           DB 0
   \   00040D   00           DB 0
   \   00040E   00           DB 0
   \   00040F   00           DB 0
   \   000410   00           DB 0
   \   000411   00           DB 0
   \   000412   00           DB 0
   \   000413   00           DB 0
   \   000414   00           DB 0
   \   000415   00           DB 0
   \   000416   00           DB 0
   \   000417   3C           DB 60
   \   000418   42           DB 66
   \   000419   78           DB 120
   \   00041A   44           DB 68
   \   00041B   42           DB 66
   \   00041C   42           DB 66
   \   00041D   FC           DB 252
   \   00041E   00           DB 0
   \   00041F   00           DB 0
   \   000420   00           DB 0
   \   000421   00           DB 0
   \   000422   00           DB 0
   \   000423   03           DB 3
   \   000424   02           DB 2
   \   000425   02           DB 2
   \   000426   02           DB 2
   \   000427   1A           DB 26
   \   000428   26           DB 38
   \   000429   42           DB 66
   \   00042A   42           DB 66
   \   00042B   42           DB 66
   \   00042C   26           DB 38
   \   00042D   1A           DB 26
   \   00042E   00           DB 0
   \   00042F   00           DB 0
   \   000430   00           DB 0
   \   000431   00           DB 0
   \   000432   00           DB 0
   \   000433   00           DB 0
   \   000434   00           DB 0
   \   000435   00           DB 0
   \   000436   00           DB 0
   \   000437   38           DB 56
   \   000438   44           DB 68
   \   000439   02           DB 2
   \   00043A   02           DB 2
   \   00043B   02           DB 2
   \   00043C   44           DB 68
   \   00043D   38           DB 56
   \   00043E   00           DB 0
   \   00043F   00           DB 0
   \   000440   00           DB 0
   \   000441   00           DB 0
   \   000442   00           DB 0
   \   000443   60           DB 96
   \   000444   40           DB 64
   \   000445   40           DB 64
   \   000446   40           DB 64
   \   000447   78           DB 120
   \   000448   44           DB 68
   \   000449   42           DB 66
   \   00044A   42           DB 66
   \   00044B   42           DB 66
   \   00044C   64           DB 100
   \   00044D   D8           DB 216
   \   00044E   00           DB 0
   \   00044F   00           DB 0
   \   000450   00           DB 0
   \   000451   00           DB 0
   \   000452   00           DB 0
   \   000453   00           DB 0
   \   000454   00           DB 0
   \   000455   00           DB 0
   \   000456   00           DB 0
   \   000457   3C           DB 60
   \   000458   42           DB 66
   \   000459   7E           DB 126
   \   00045A   02           DB 2
   \   00045B   02           DB 2
   \   00045C   42           DB 66
   \   00045D   3C           DB 60
   \   00045E   00           DB 0
   \   00045F   00           DB 0
   \   000460   00           DB 0
   \   000461   00           DB 0
   \   000462   00           DB 0
   \   000463   F0           DB 240
   \   000464   88           DB 136
   \   000465   08           DB 8
   \   000466   08           DB 8
   \   000467   7E           DB 126
   \   000468   08           DB 8
   \   000469   08           DB 8
   \   00046A   08           DB 8
   \   00046B   08           DB 8
   \   00046C   08           DB 8
   \   00046D   3E           DB 62
   \   00046E   00           DB 0
   \   00046F   00           DB 0
   \   000470   00           DB 0
   \   000471   00           DB 0
   \   000472   00           DB 0
   \   000473   00           DB 0
   \   000474   00           DB 0
   \   000475   00           DB 0
   \   000476   00           DB 0
   \   000477   7C           DB 124
   \   000478   22           DB 34
   \   000479   22           DB 34
   \   00047A   1C           DB 28
   \   00047B   02           DB 2
   \   00047C   3C           DB 60
   \   00047D   42           DB 66
   \   00047E   42           DB 66
   \   00047F   3C           DB 60
   \   000480   00           DB 0
   \   000481   00           DB 0
   \   000482   00           DB 0
   \   000483   03           DB 3
   \   000484   02           DB 2
   \   000485   02           DB 2
   \   000486   02           DB 2
   \   000487   3A           DB 58
   \   000488   46           DB 70
   \   000489   42           DB 66
   \   00048A   42           DB 66
   \   00048B   42           DB 66
   \   00048C   42           DB 66
   \   00048D   E7           DB 231
   \   00048E   00           DB 0
   \   00048F   00           DB 0
   \   000490   00           DB 0
   \   000491   00           DB 0
   \   000492   00           DB 0
   \   000493   0C           DB 12
   \   000494   0C           DB 12
   \   000495   00           DB 0
   \   000496   00           DB 0
   \   000497   0E           DB 14
   \   000498   08           DB 8
   \   000499   08           DB 8
   \   00049A   08           DB 8
   \   00049B   08           DB 8
   \   00049C   08           DB 8
   \   00049D   3E           DB 62
   \   00049E   00           DB 0
   \   00049F   00           DB 0
   \   0004A0   00           DB 0
   \   0004A1   00           DB 0
   \   0004A2   00           DB 0
   \   0004A3   30           DB 48
   \   0004A4   30           DB 48
   \   0004A5   00           DB 0
   \   0004A6   00           DB 0
   \   0004A7   38           DB 56
   \   0004A8   20           DB 32
   \   0004A9   20           DB 32
   \   0004AA   20           DB 32
   \   0004AB   20           DB 32
   \   0004AC   20           DB 32
   \   0004AD   20           DB 32
   \   0004AE   22           DB 34
   \   0004AF   1E           DB 30
   \   0004B0   00           DB 0
   \   0004B1   00           DB 0
   \   0004B2   00           DB 0
   \   0004B3   03           DB 3
   \   0004B4   02           DB 2
   \   0004B5   02           DB 2
   \   0004B6   02           DB 2
   \   0004B7   72           DB 114
   \   0004B8   12           DB 18
   \   0004B9   0A           DB 10
   \   0004BA   16           DB 22
   \   0004BB   12           DB 18
   \   0004BC   22           DB 34
   \   0004BD   77           DB 119
   \   0004BE   00           DB 0
   \   0004BF   00           DB 0
   \   0004C0   00           DB 0
   \   0004C1   00           DB 0
   \   0004C2   00           DB 0
   \   0004C3   0E           DB 14
   \   0004C4   08           DB 8
   \   0004C5   08           DB 8
   \   0004C6   08           DB 8
   \   0004C7   08           DB 8
   \   0004C8   08           DB 8
   \   0004C9   08           DB 8
   \   0004CA   08           DB 8
   \   0004CB   08           DB 8
   \   0004CC   08           DB 8
   \   0004CD   3E           DB 62
   \   0004CE   00           DB 0
   \   0004CF   00           DB 0
   \   0004D0   00           DB 0
   \   0004D1   00           DB 0
   \   0004D2   00           DB 0
   \   0004D3   00           DB 0
   \   0004D4   00           DB 0
   \   0004D5   00           DB 0
   \   0004D6   00           DB 0
   \   0004D7   7F           DB 127
   \   0004D8   92           DB 146
   \   0004D9   92           DB 146
   \   0004DA   92           DB 146
   \   0004DB   92           DB 146
   \   0004DC   92           DB 146
   \   0004DD   B7           DB 183
   \   0004DE   00           DB 0
   \   0004DF   00           DB 0
   \   0004E0   00           DB 0
   \   0004E1   00           DB 0
   \   0004E2   00           DB 0
   \   0004E3   00           DB 0
   \   0004E4   00           DB 0
   \   0004E5   00           DB 0
   \   0004E6   00           DB 0
   \   0004E7   3B           DB 59
   \   0004E8   46           DB 70
   \   0004E9   42           DB 66
   \   0004EA   42           DB 66
   \   0004EB   42           DB 66
   \   0004EC   42           DB 66
   \   0004ED   E7           DB 231
   \   0004EE   00           DB 0
   \   0004EF   00           DB 0
   \   0004F0   00           DB 0
   \   0004F1   00           DB 0
   \   0004F2   00           DB 0
   \   0004F3   00           DB 0
   \   0004F4   00           DB 0
   \   0004F5   00           DB 0
   \   0004F6   00           DB 0
   \   0004F7   3C           DB 60
   \   0004F8   42           DB 66
   \   0004F9   42           DB 66
   \   0004FA   42           DB 66
   \   0004FB   42           DB 66
   \   0004FC   42           DB 66
   \   0004FD   3C           DB 60
   \   0004FE   00           DB 0
   \   0004FF   00           DB 0
   \   000500   00           DB 0
   \   000501   00           DB 0
   \   000502   00           DB 0
   \   000503   00           DB 0
   \   000504   00           DB 0
   \   000505   00           DB 0
   \   000506   00           DB 0
   \   000507   1B           DB 27
   \   000508   26           DB 38
   \   000509   42           DB 66
   \   00050A   42           DB 66
   \   00050B   42           DB 66
   \   00050C   22           DB 34
   \   00050D   1E           DB 30
   \   00050E   02           DB 2
   \   00050F   07           DB 7
   \   000510   00           DB 0
   \   000511   00           DB 0
   \   000512   00           DB 0
   \   000513   00           DB 0
   \   000514   00           DB 0
   \   000515   00           DB 0
   \   000516   00           DB 0
   \   000517   78           DB 120
   \   000518   44           DB 68
   \   000519   42           DB 66
   \   00051A   42           DB 66
   \   00051B   42           DB 66
   \   00051C   44           DB 68
   \   00051D   78           DB 120
   \   00051E   40           DB 64
   \   00051F   E0           DB 224
   \   000520   00           DB 0
   \   000521   00           DB 0
   \   000522   00           DB 0
   \   000523   00           DB 0
   \   000524   00           DB 0
   \   000525   00           DB 0
   \   000526   00           DB 0
   \   000527   77           DB 119
   \   000528   4C           DB 76
   \   000529   04           DB 4
   \   00052A   04           DB 4
   \   00052B   04           DB 4
   \   00052C   04           DB 4
   \   00052D   1F           DB 31
   \   00052E   00           DB 0
   \   00052F   00           DB 0
   \   000530   00           DB 0
   \   000531   00           DB 0
   \   000532   00           DB 0
   \   000533   00           DB 0
   \   000534   00           DB 0
   \   000535   00           DB 0
   \   000536   00           DB 0
   \   000537   7C           DB 124
   \   000538   42           DB 66
   \   000539   02           DB 2
   \   00053A   3C           DB 60
   \   00053B   40           DB 64
   \   00053C   42           DB 66
   \   00053D   3E           DB 62
   \   00053E   00           DB 0
   \   00053F   00           DB 0
   \   000540   00           DB 0
   \   000541   00           DB 0
   \   000542   00           DB 0
   \   000543   00           DB 0
   \   000544   00           DB 0
   \   000545   08           DB 8
   \   000546   08           DB 8
   \   000547   3E           DB 62
   \   000548   08           DB 8
   \   000549   08           DB 8
   \   00054A   08           DB 8
   \   00054B   08           DB 8
   \   00054C   08           DB 8
   \   00054D   30           DB 48
   \   00054E   00           DB 0
   \   00054F   00           DB 0
   \   000550   00           DB 0
   \   000551   00           DB 0
   \   000552   00           DB 0
   \   000553   00           DB 0
   \   000554   00           DB 0
   \   000555   00           DB 0
   \   000556   00           DB 0
   \   000557   63           DB 99
   \   000558   42           DB 66
   \   000559   42           DB 66
   \   00055A   42           DB 66
   \   00055B   42           DB 66
   \   00055C   62           DB 98
   \   00055D   DC           DB 220
   \   00055E   00           DB 0
   \   00055F   00           DB 0
   \   000560   00           DB 0
   \   000561   00           DB 0
   \   000562   00           DB 0
   \   000563   00           DB 0
   \   000564   00           DB 0
   \   000565   00           DB 0
   \   000566   00           DB 0
   \   000567   E7           DB 231
   \   000568   42           DB 66
   \   000569   24           DB 36
   \   00056A   24           DB 36
   \   00056B   14           DB 20
   \   00056C   08           DB 8
   \   00056D   08           DB 8
   \   00056E   00           DB 0
   \   00056F   00           DB 0
   \   000570   00           DB 0
   \   000571   00           DB 0
   \   000572   00           DB 0
   \   000573   00           DB 0
   \   000574   00           DB 0
   \   000575   00           DB 0
   \   000576   00           DB 0
   \   000577   EB           DB 235
   \   000578   49           DB 73
   \   000579   49           DB 73
   \   00057A   55           DB 85
   \   00057B   55           DB 85
   \   00057C   22           DB 34
   \   00057D   22           DB 34
   \   00057E   00           DB 0
   \   00057F   00           DB 0
   \   000580   00           DB 0
   \   000581   00           DB 0
   \   000582   00           DB 0
   \   000583   00           DB 0
   \   000584   00           DB 0
   \   000585   00           DB 0
   \   000586   00           DB 0
   \   000587   76           DB 118
   \   000588   24           DB 36
   \   000589   18           DB 24
   \   00058A   18           DB 24
   \   00058B   18           DB 24
   \   00058C   24           DB 36
   \   00058D   6E           DB 110
   \   00058E   00           DB 0
   \   00058F   00           DB 0
   \   000590   00           DB 0
   \   000591   00           DB 0
   \   000592   00           DB 0
   \   000593   00           DB 0
   \   000594   00           DB 0
   \   000595   00           DB 0
   \   000596   00           DB 0
   \   000597   E7           DB 231
   \   000598   42           DB 66
   \   000599   24           DB 36
   \   00059A   24           DB 36
   \   00059B   14           DB 20
   \   00059C   18           DB 24
   \   00059D   08           DB 8
   \   00059E   08           DB 8
   \   00059F   07           DB 7
   \   0005A0   00           DB 0
   \   0005A1   00           DB 0
   \   0005A2   00           DB 0
   \   0005A3   00           DB 0
   \   0005A4   00           DB 0
   \   0005A5   00           DB 0
   \   0005A6   00           DB 0
   \   0005A7   7E           DB 126
   \   0005A8   22           DB 34
   \   0005A9   10           DB 16
   \   0005AA   08           DB 8
   \   0005AB   08           DB 8
   \   0005AC   44           DB 68
   \   0005AD   7E           DB 126
   \   0005AE   00           DB 0
   \   0005AF   00           DB 0
   \   0005B0   00           DB 0
   \   0005B1   C0           DB 192
   \   0005B2   20           DB 32
   \   0005B3   20           DB 32
   \   0005B4   20           DB 32
   \   0005B5   20           DB 32
   \   0005B6   20           DB 32
   \   0005B7   10           DB 16
   \   0005B8   20           DB 32
   \   0005B9   20           DB 32
   \   0005BA   20           DB 32
   \   0005BB   20           DB 32
   \   0005BC   20           DB 32
   \   0005BD   20           DB 32
   \   0005BE   C0           DB 192
   \   0005BF   00           DB 0
   \   0005C0   10           DB 16
   \   0005C1   10           DB 16
   \   0005C2   10           DB 16
   \   0005C3   10           DB 16
   \   0005C4   10           DB 16
   \   0005C5   10           DB 16
   \   0005C6   10           DB 16
   \   0005C7   10           DB 16
   \   0005C8   10           DB 16
   \   0005C9   10           DB 16
   \   0005CA   10           DB 16
   \   0005CB   10           DB 16
   \   0005CC   10           DB 16
   \   0005CD   10           DB 16
   \   0005CE   10           DB 16
   \   0005CF   10           DB 16
   \   0005D0   00           DB 0
   \   0005D1   06           DB 6
   \   0005D2   08           DB 8
   \   0005D3   08           DB 8
   \   0005D4   08           DB 8
   \   0005D5   08           DB 8
   \   0005D6   08           DB 8
   \   0005D7   10           DB 16
   \   0005D8   08           DB 8
   \   0005D9   08           DB 8
   \   0005DA   08           DB 8
   \   0005DB   08           DB 8
   \   0005DC   08           DB 8
   \   0005DD   08           DB 8
   \   0005DE   06           DB 6
   \   0005DF   00           DB 0
   \   0005E0   0C           DB 12
   \   0005E1   32           DB 50
   \   0005E2   C2           DB 194
   \   0005E3   00           DB 0
   \   0005E4   00           DB 0
   \   0005E5   00           DB 0
   \   0005E6   00           DB 0
   \   0005E7   00           DB 0
   \   0005E8   00           DB 0
   \   0005E9   00           DB 0
   \   0005EA   00           DB 0
   \   0005EB   00           DB 0
   \   0005EC   00           DB 0
   \   0005ED   00           DB 0
   \   0005EE   00           DB 0
   \   0005EF   00           DB 0
      8          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
      9          0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x18,0x18,0x00,0x00,
     10          0x00,0x48,0x6C,0x24,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     11          0x00,0x00,0x00,0x24,0x24,0x24,0x7F,0x12,0x12,0x12,0x7F,0x12,0x12,0x12,0x00,0x00,
     12          0x00,0x00,0x08,0x1C,0x2A,0x2A,0x0A,0x0C,0x18,0x28,0x28,0x2A,0x2A,0x1C,0x08,0x08,
     13          0x00,0x00,0x00,0x22,0x25,0x15,0x15,0x15,0x2A,0x58,0x54,0x54,0x54,0x22,0x00,0x00,
     14          0x00,0x00,0x00,0x0C,0x12,0x12,0x12,0x0A,0x76,0x25,0x29,0x11,0x91,0x6E,0x00,0x00,
     15          0x00,0x06,0x06,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     16          0x00,0x40,0x20,0x10,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x10,0x10,0x20,0x40,0x00,
     17          0x00,0x02,0x04,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x10,0x08,0x08,0x04,0x02,0x00,
     18          0x00,0x00,0x00,0x00,0x08,0x08,0x6B,0x1C,0x1C,0x6B,0x08,0x08,0x00,0x00,0x00,0x00,
     19          0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x7F,0x08,0x08,0x08,0x08,0x00,0x00,0x00,
     20          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06,0x04,0x03,
     21          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     22          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06,0x00,0x00,
     23          0x00,0x00,0x80,0x40,0x40,0x20,0x20,0x10,0x10,0x08,0x08,0x04,0x04,0x02,0x02,0x00,
     24          0x00,0x00,0x00,0x18,0x24,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18,0x00,0x00,
     25          0x00,0x00,0x00,0x08,0x0E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
     26          0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x20,0x20,0x10,0x08,0x04,0x42,0x7E,0x00,0x00,
     27          0x00,0x00,0x00,0x3C,0x42,0x42,0x20,0x18,0x20,0x40,0x40,0x42,0x22,0x1C,0x00,0x00,
     28          0x00,0x00,0x00,0x20,0x30,0x28,0x24,0x24,0x22,0x22,0x7E,0x20,0x20,0x78,0x00,0x00,
     29          0x00,0x00,0x00,0x7E,0x02,0x02,0x02,0x1A,0x26,0x40,0x40,0x42,0x22,0x1C,0x00,0x00,
     30          0x00,0x00,0x00,0x38,0x24,0x02,0x02,0x1A,0x26,0x42,0x42,0x42,0x24,0x18,0x00,0x00,
     31          0x00,0x00,0x00,0x7E,0x22,0x22,0x10,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,
     32          0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x24,0x18,0x24,0x42,0x42,0x42,0x3C,0x00,0x00,
     33          0x00,0x00,0x00,0x18,0x24,0x42,0x42,0x42,0x64,0x58,0x40,0x40,0x24,0x1C,0x00,0x00,
     34          0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,
     35          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x04,
     36          0x00,0x00,0x00,0x40,0x20,0x10,0x08,0x04,0x02,0x04,0x08,0x10,0x20,0x40,0x00,0x00,
     37          0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00,
     38          0x00,0x00,0x00,0x02,0x04,0x08,0x10,0x20,0x40,0x20,0x10,0x08,0x04,0x02,0x00,0x00,
     39          0x00,0x00,0x00,0x3C,0x42,0x42,0x46,0x40,0x20,0x10,0x10,0x00,0x18,0x18,0x00,0x00,
     40          0x00,0x00,0x00,0x1C,0x22,0x5A,0x55,0x55,0x55,0x55,0x2D,0x42,0x22,0x1C,0x00,0x00,
     41          0x00,0x00,0x00,0x08,0x08,0x18,0x14,0x14,0x24,0x3C,0x22,0x42,0x42,0xE7,0x00,0x00,
     42          0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x1E,0x22,0x42,0x42,0x42,0x22,0x1F,0x00,0x00,
     43          0x00,0x00,0x00,0x7C,0x42,0x42,0x01,0x01,0x01,0x01,0x01,0x42,0x22,0x1C,0x00,0x00,
     44          0x00,0x00,0x00,0x1F,0x22,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x22,0x1F,0x00,0x00,
     45          0x00,0x00,0x00,0x3F,0x42,0x12,0x12,0x1E,0x12,0x12,0x02,0x42,0x42,0x3F,0x00,0x00,
     46          0x00,0x00,0x00,0x3F,0x42,0x12,0x12,0x1E,0x12,0x12,0x02,0x02,0x02,0x07,0x00,0x00,
     47          0x00,0x00,0x00,0x3C,0x22,0x22,0x01,0x01,0x01,0x71,0x21,0x22,0x22,0x1C,0x00,0x00,
     48          0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0xE7,0x00,0x00,
     49          0x00,0x00,0x00,0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
     50          0x00,0x00,0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x11,0x0F,
     51          0x00,0x00,0x00,0x77,0x22,0x12,0x0A,0x0E,0x0A,0x12,0x12,0x22,0x22,0x77,0x00,0x00,
     52          0x00,0x00,0x00,0x07,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x42,0x7F,0x00,0x00,
     53          0x00,0x00,0x00,0x77,0x36,0x36,0x36,0x36,0x2A,0x2A,0x2A,0x2A,0x2A,0x6B,0x00,0x00,
     54          0x00,0x00,0x00,0xE3,0x46,0x46,0x4A,0x4A,0x52,0x52,0x52,0x62,0x62,0x47,0x00,0x00,
     55          0x00,0x00,0x00,0x1C,0x22,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x22,0x1C,0x00,0x00,
     56          0x00,0x00,0x00,0x3F,0x42,0x42,0x42,0x42,0x3E,0x02,0x02,0x02,0x02,0x07,0x00,0x00,
     57          0x00,0x00,0x00,0x1C,0x22,0x41,0x41,0x41,0x41,0x41,0x4D,0x53,0x32,0x1C,0x60,0x00,
     58          0x00,0x00,0x00,0x3F,0x42,0x42,0x42,0x3E,0x12,0x12,0x22,0x22,0x42,0xC7,0x00,0x00,
     59          0x00,0x00,0x00,0x7C,0x42,0x42,0x02,0x04,0x18,0x20,0x40,0x42,0x42,0x3E,0x00,0x00,
     60          0x00,0x00,0x00,0x7F,0x49,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x1C,0x00,0x00,
     61          0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
     62          0x00,0x00,0x00,0xE7,0x42,0x42,0x22,0x24,0x24,0x14,0x14,0x18,0x08,0x08,0x00,0x00,
     63          0x00,0x00,0x00,0x6B,0x49,0x49,0x49,0x49,0x55,0x55,0x36,0x22,0x22,0x22,0x00,0x00,
     64          0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x18,0x18,0x18,0x24,0x24,0x42,0xE7,0x00,0x00,
     65          0x00,0x00,0x00,0x77,0x22,0x22,0x14,0x14,0x08,0x08,0x08,0x08,0x08,0x1C,0x00,0x00,
     66          0x00,0x00,0x00,0x7E,0x21,0x20,0x10,0x10,0x08,0x04,0x04,0x42,0x42,0x3F,0x00,0x00,
     67          0x00,0x78,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x78,0x00,
     68          0x00,0x00,0x02,0x02,0x04,0x04,0x08,0x08,0x08,0x10,0x10,0x20,0x20,0x20,0x40,0x40,
     69          0x00,0x1E,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1E,0x00,
     70          0x00,0x38,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     71          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
     72          0x00,0x06,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     73          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x78,0x44,0x42,0x42,0xFC,0x00,0x00,
     74          0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x1A,0x26,0x42,0x42,0x42,0x26,0x1A,0x00,0x00,
     75          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x02,0x02,0x02,0x44,0x38,0x00,0x00,
     76          0x00,0x00,0x00,0x60,0x40,0x40,0x40,0x78,0x44,0x42,0x42,0x42,0x64,0xD8,0x00,0x00,
     77          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x7E,0x02,0x02,0x42,0x3C,0x00,0x00,
     78          0x00,0x00,0x00,0xF0,0x88,0x08,0x08,0x7E,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
     79          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x22,0x22,0x1C,0x02,0x3C,0x42,0x42,0x3C,
     80          0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x3A,0x46,0x42,0x42,0x42,0x42,0xE7,0x00,0x00,
     81          0x00,0x00,0x00,0x0C,0x0C,0x00,0x00,0x0E,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
     82          0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x38,0x20,0x20,0x20,0x20,0x20,0x20,0x22,0x1E,
     83          0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x72,0x12,0x0A,0x16,0x12,0x22,0x77,0x00,0x00,
     84          0x00,0x00,0x00,0x0E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
     85          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x92,0x92,0x92,0x92,0x92,0xB7,0x00,0x00,
     86          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3B,0x46,0x42,0x42,0x42,0x42,0xE7,0x00,0x00,
     87          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
     88          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1B,0x26,0x42,0x42,0x42,0x22,0x1E,0x02,0x07,
     89          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x44,0x42,0x42,0x42,0x44,0x78,0x40,0xE0,
     90          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x77,0x4C,0x04,0x04,0x04,0x04,0x1F,0x00,0x00,
     91          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x42,0x02,0x3C,0x40,0x42,0x3E,0x00,0x00,
     92          0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x3E,0x08,0x08,0x08,0x08,0x08,0x30,0x00,0x00,
     93          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0x42,0x42,0x42,0x42,0x62,0xDC,0x00,0x00,
     94          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x14,0x08,0x08,0x00,0x00,
     95          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEB,0x49,0x49,0x55,0x55,0x22,0x22,0x00,0x00,
     96          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x76,0x24,0x18,0x18,0x18,0x24,0x6E,0x00,0x00,
     97          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x14,0x18,0x08,0x08,0x07,
     98          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x22,0x10,0x08,0x08,0x44,0x7E,0x00,0x00,
     99          0x00,0xC0,0x20,0x20,0x20,0x20,0x20,0x10,0x20,0x20,0x20,0x20,0x20,0x20,0xC0,0x00,
    100          0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,
    101          0x00,0x06,0x08,0x08,0x08,0x08,0x08,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x06,0x00,
    102          0x0C,0x32,0xC2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    103          };
    104          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          uint16 BACK_COLOR, POINT_COLOR;   //±³¾°É«£¬»­±ÊÉ«	
   \                     BACK_COLOR:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     POINT_COLOR:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    106          
    107          void LCD_DLY_ms(unsigned int ms);
    108          void LCD_Wrtie_Bus(char dat);
    109          void LCD_WR_REG_DATA(uint8 reg,int da);
    110          unsigned int mypow(uint8 m,uint8 n);
    111          
    112          /*********************LCD ÑÓÊ±1ms************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    113          void LCD_DLY_ms(unsigned int ms)
   \                     LCD_DLY_ms:
    114          {                         
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   801C         SJMP    ??LCD_DLY_ms_0
    115              unsigned int a;
    116              while(ms)
    117              {
    118                  a=3200;
   \                     ??LCD_DLY_ms_1:
   \   000002   7880         MOV     R0,#-0x80
   \   000004   790C         MOV     R1,#0xc
    119                  while(a--);
   \                     ??LCD_DLY_ms_2:
   \   000006   E8           MOV     A,R0
   \   000007   FC           MOV     R4,A
   \   000008   E9           MOV     A,R1
   \   000009   FD           MOV     R5,A
   \   00000A   EC           MOV     A,R4
   \   00000B   24FF         ADD     A,#-0x1
   \   00000D   18           DEC     R0
   \   00000E   ED           MOV     A,R5
   \   00000F   34FF         ADDC    A,#-0x1
   \   000011   F9           MOV     R1,A
   \   000012   EC           MOV     A,R4
   \   000013   4D           ORL     A,R5
   \   000014   70F0         JNZ     ??LCD_DLY_ms_2
    120                  ms--;
   \   000016   EA           MOV     A,R2
   \   000017   24FF         ADD     A,#-0x1
   \   000019   1A           DEC     R2
   \   00001A   EB           MOV     A,R3
   \   00001B   34FF         ADDC    A,#-0x1
   \   00001D   FB           MOV     R3,A
    121              }
   \                     ??LCD_DLY_ms_0:
   \   00001E   EA           MOV     A,R2
   \   00001F   4B           ORL     A,R3
   \   000020   70E0         JNZ     ??LCD_DLY_ms_1
    122              return;
   \   000022   02....       LJMP    ?BRET
    123          }
    124          
    125          /**************************************************************************************************
    126           * @fn      halLcd_ConfigIO
    127           *
    128           * @brief   Configure IO lines needed for LCD control.
    129           *
    130           * @param   None
    131           *
    132           * @return  None
    133           **************************************************************************************************/
    134          static void halLcd_ConfigIO(void)
    135          {
    136              //#define LCD_CS  	//Æ¬Ñ¡Ö±½Ó½Óµ½ÁËGND
    137              #define LCD_DC     P1_6	//A0  H/L ÃüÁîÊı¾İÑ¡Í¨¶Ë£¬H£ºÊı¾İ£¬L:ÃüÁî
    138              #define LCD_SCL    P1_7     //SCLK  Ê±ÖÓ D0£¨SCLK£©
    139              #define LCD_SDA    P1_5     //SDA   D1£¨MOSI£© Êı¾İ
    140              #define LCD_REST   P1_2     //¸´Î»¶Ë
    141              //#define LCD_CS  ½ÓµØ
    142            
    143          	P1SEL &= ~0xe4;          //ÈÃP12£¬P15£¬P16 P17ÎªÆÕÍ¨IO¿Ú
    144          	P1DIR |= 0xe4;           //°ÑP12£¬P15£¬P16 P17ÉèÖÃÎªÊä³ö
    145          
    146          	LCD_DC=1;
    147          	LCD_SCL=1;
    148          	LCD_SDA=1;
    149          	LCD_REST=1;
    150          }
    151          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    152          void LCD_Wrtie_Bus(char dat)
   \                     LCD_Wrtie_Bus:
    153          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    154              uint8 i=0, temp=0;
    155              for(i=0;i<8;i++) //·¢ËÍÒ»¸ö°ËÎ»Êı¾İ 
   \   000000   7808         MOV     R0,#0x8
    156              {
    157                  LCD_SCL=0;  
   \                     ??LCD_Wrtie_Bus_0:
   \   000002   C297         CLR     0x90.7
    158                  temp = dat&0x80;
    159                  if (temp == 0)
   \   000004   E9           MOV     A,R1
   \   000005   A2E7         MOV     C,0xE0 /* A   */.7
   \   000007   4004         JC      ??LCD_Wrtie_Bus_1
    160                  {
    161                      LCD_SDA=0;
   \   000009   C295         CLR     0x90.5
   \   00000B   8002         SJMP    ??LCD_Wrtie_Bus_2
    162                  }
    163                  else
    164                  {
    165                      LCD_SDA=1;
   \                     ??LCD_Wrtie_Bus_1:
   \   00000D   D295         SETB    0x90.5
    166                  }
    167                  LCD_SCL=1;       
   \                     ??LCD_Wrtie_Bus_2:
   \   00000F   D297         SETB    0x90.7
    168                  dat<<=1;    
   \   000011   C3           CLR     C
   \   000012   33           RLC     A
   \   000013   F9           MOV     R1,A
    169              }
   \   000014   18           DEC     R0
   \   000015   E8           MOV     A,R0
   \   000016   70EA         JNZ     ??LCD_Wrtie_Bus_0
    170          }
   \   000018   02....       LJMP    ?BRET
   \   00001B                REQUIRE _A_P1
    171          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    172          void LCD_WR_DATA8(char dat) //·¢ËÍÊı¾İ(8bitµÄÊı¾İ)
   \                     LCD_WR_DATA8:
    173          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    174              LCD_DC=1;
   \   000005   D296         SETB    0x90.6
    175              LCD_Wrtie_Bus(dat);
   \   000007                ; Setup parameters for call to function LCD_Wrtie_Bus
   \   000007                REQUIRE ?Subroutine1
   \   000007                REQUIRE _A_P1
   \   000007                ; // Fall through to label ?Subroutine1
    176          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ??LCD_Wrtie_Bus?relay
   \   000003                REQUIRE ??Subroutine35_0
   \   000003                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    177          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    178          void LCD_WR_DATA(int dat)
   \                     LCD_WR_DATA:
    179          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    180              LCD_DC=1;
   \   000009   D296         SETB    0x90.6
    181              LCD_Wrtie_Bus(dat>>8);
   \   00000B                ; Setup parameters for call to function LCD_Wrtie_Bus
   \   00000B   8E..         MOV     ?V0 + 0,R6
   \   00000D   8F..         MOV     ?V0 + 1,R7
   \   00000F   7408         MOV     A,#0x8
   \   000011   78..         MOV     R0,#?V0 + 0
   \   000013   12....       LCALL   ?SS_SHR
   \   000016   A9..         MOV     R1,?V0 + 0
   \   000018   12....       LCALL   ??LCD_Wrtie_Bus?relay
    182              LCD_Wrtie_Bus(dat);
   \   00001B                ; Setup parameters for call to function LCD_Wrtie_Bus
   \   00001B   EE           MOV     A,R6
   \   00001C   F9           MOV     R1,A
   \   00001D   12....       LCALL   ??LCD_Wrtie_Bus?relay
    183          }
   \   000020   02....       LJMP    ?Subroutine2 & 0xFFFF
   \   000023                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    184          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    185          void LCD_WR_REG(uint8 cmd)	 
   \                     LCD_WR_REG:
    186          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    187              LCD_DC=0; 
   \   000005   C296         CLR     0x90.6
    188              LCD_Wrtie_Bus(cmd);
   \   000007                ; Setup parameters for call to function LCD_Wrtie_Bus
   \   000007   80..         SJMP    ?Subroutine1
   \   000009                REQUIRE _A_P1
    189          }
    190          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    191           void LCD_WR_REG_DATA(uint8 reg,int da)
   \                     LCD_WR_REG_DATA:
    192          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    193              LCD_WR_REG(reg);
   \   000009                ; Setup parameters for call to function LCD_WR_REG
   \   000009   12....       LCALL   ??LCD_WR_REG?relay
    194              LCD_WR_DATA(da);
   \   00000C                ; Setup parameters for call to function LCD_WR_DATA
   \   00000C   EE           MOV     A,R6
   \   00000D   FA           MOV     R2,A
   \   00000E   EF           MOV     A,R7
   \   00000F   FB           MOV     R3,A
   \   000010   12....       LCALL   ??LCD_WR_DATA?relay
    195          }
   \   000013   80..         SJMP    ??Subroutine35_0
    196          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    197          void Address_set(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2)
   \                     Address_set:
    198          {  
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 4,R2
   \   000007   8B..         MOV     ?V0 + 5,R3
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000015   7410         MOV     A,#0x10
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine15 & 0xFFFF
    199             LCD_WR_REG(0x2a);
   \                     ??CrossCallReturnLabel_15:
   \   00001D                ; Setup parameters for call to function LCD_WR_REG
   \   00001D   792A         MOV     R1,#0x2a
   \   00001F   12....       LCALL   ??LCD_WR_REG?relay
    200             LCD_WR_DATA8(x1>>8);
   \   000022                ; Setup parameters for call to function LCD_WR_DATA8
   \   000022   A9..         MOV     R1,?V0 + 5
   \   000024   12....       LCALL   ??LCD_WR_DATA8?relay
    201             LCD_WR_DATA8(x1);
   \   000027                ; Setup parameters for call to function LCD_WR_DATA8
   \   000027   A9..         MOV     R1,?V0 + 4
   \   000029   12....       LCALL   ??LCD_WR_DATA8?relay
    202             LCD_WR_DATA8(x2>>8);
   \   00002C                ; Setup parameters for call to function LCD_WR_DATA8
   \   00002C   A9..         MOV     R1,?V0 + 3
   \   00002E   12....       LCALL   ??LCD_WR_DATA8?relay
    203             LCD_WR_DATA8(x2);
   \   000031                ; Setup parameters for call to function LCD_WR_DATA8
   \   000031   A9..         MOV     R1,?V0 + 2
   \   000033   12....       LCALL   ??LCD_WR_DATA8?relay
    204            
    205             LCD_WR_REG(0x2b);
   \   000036                ; Setup parameters for call to function LCD_WR_REG
   \   000036   792B         MOV     R1,#0x2b
   \   000038   12....       LCALL   ??LCD_WR_REG?relay
    206             LCD_WR_DATA8(y1>>8);
   \   00003B                ; Setup parameters for call to function LCD_WR_DATA8
   \   00003B   A9..         MOV     R1,?V0 + 1
   \   00003D   12....       LCALL   ??LCD_WR_DATA8?relay
    207             LCD_WR_DATA8(y1);
   \   000040                ; Setup parameters for call to function LCD_WR_DATA8
   \   000040   A9..         MOV     R1,?V0 + 0
   \   000042   12....       LCALL   ??LCD_WR_DATA8?relay
    208             LCD_WR_DATA8(y2>>8);
   \   000045                ; Setup parameters for call to function LCD_WR_DATA8
   \   000045   12....       LCALL   ?Subroutine21 & 0xFFFF
    209             LCD_WR_DATA8(y2);
    210          
    211             LCD_WR_REG(0x2C);
   \                     ??CrossCallReturnLabel_32:
   \   000048                ; Setup parameters for call to function LCD_WR_REG
   \   000048   792C         MOV     R1,#0x2c
   \   00004A   12....       LCALL   ??LCD_WR_REG?relay
    212          }
   \   00004D   7F06         MOV     R7,#0x6
   \   00004F   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   EF           MOV     A,R7
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??LCD_WR_DATA8?relay
   \   000005                ; Setup parameters for call to function LCD_WR_DATA8
   \   000005                ; Setup parameters for call to function LCD_WR_DATA8
   \   000005   EE           MOV     A,R6
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??LCD_WR_DATA8?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET
    213          
    214          #undef  USE_LANDSCAPE  
    215          
    216          //ÇåÆÁº¯Êı
    217          //Color:ÒªÇåÆÁµÄÌî³äÉ«

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    218          void LCD_Clear(uint16 Color)
   \                     LCD_Clear:
    219          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    220          	uint8 VH,VL;
    221          	uint16 i,j;
    222          	VH=Color>>8;
   \   000005   EB           MOV     A,R3
   \   000006   FF           MOV     R7,A
    223          	VL=Color;	
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    224          	Address_set(0,0,LCD_W-1,160);
   \   000009                ; Setup parameters for call to function Address_set
   \   000009   75..A0       MOV     ?V0 + 0,#-0x60
   \   00000C   75..00       MOV     ?V0 + 1,#0x0
   \   00000F   78..         MOV     R0,#?V0 + 0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   75..81       MOV     ?V0 + 0,#-0x7f
   \   000017   78..         MOV     R0,#?V0 + 0
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   7C00         MOV     R4,#0x0
   \   00001E   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
    225                  
    226                  for(i=0;i<LCD_W;i++)
   \   000024   75..82       MOV     ?V0 + 1,#-0x7e
    227                       {
    228                        for (j=0;j<LCD_H;j++)
   \                     ??LCD_Clear_0:
   \   000027   75..84       MOV     ?V0 + 0,#-0x7c
    229                              {
    230                                LCD_WR_DATA8(VH);
   \                     ??LCD_Clear_1:
   \   00002A                ; Setup parameters for call to function LCD_WR_DATA8
   \   00002A   12....       LCALL   ?Subroutine21 & 0xFFFF
    231                                LCD_WR_DATA8(VL);	
    232                              }
   \                     ??CrossCallReturnLabel_33:
   \   00002D   15..         DEC     ?V0 + 0
   \   00002F   E5..         MOV     A,?V0 + 0
   \   000031   70F7         JNZ     ??LCD_Clear_1
    233                        }
   \   000033   15..         DEC     ?V0 + 1
   \   000035   E5..         MOV     A,?V0 + 1
   \   000037   70EE         JNZ     ??LCD_Clear_0
    234          }
   \   000039   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   7A00         MOV     R2,#0x0
   \   000004   7B00         MOV     R3,#0x0
   \   000006                REQUIRE ??Subroutine37_0
   \   000006                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   12....       LCALL   ??Address_set?relay
   \   000003   7404         MOV     A,#0x4
   \   000005   22           RET
    235          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    236          void HalLcdInit(void)
   \                     HalLcdInit:
    237          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    238            HalLcd_HW_Init();
   \   000004                ; Setup parameters for call to function HalLcd_HW_Init
   \   000004   12....       LCALL   ??HalLcd_HW_Init?relay
    239          }
   \   000007                REQUIRE ?Subroutine0
   \   000007                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    240          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    241          void HalLcd_HW_Init(void)
   \                     HalLcd_HW_Init:
    242          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    243                  halLcd_ConfigIO();
   \   000004   53F41B       ANL     0xf4,#0x1b
   \   000007   43FEE4       ORL     0xfe,#0xe4
   \   00000A   D296         SETB    0x90.6
   \   00000C   D297         SETB    0x90.7
   \   00000E   D295         SETB    0x90.5
   \   000010   D292         SETB    0x90.2
    244          
    245                  LCD_REST=1;
   \   000012   D292         SETB    0x90.2
    246                  LCD_DLY_ms(5);	
   \   000014                ; Setup parameters for call to function LCD_DLY_ms
   \   000014   7A05         MOV     R2,#0x5
   \   000016   7B00         MOV     R3,#0x0
   \   000018   12....       LCALL   ??LCD_DLY_ms?relay
    247          	LCD_REST=0;
   \   00001B   C292         CLR     0x90.2
    248          	LCD_DLY_ms(5);
   \   00001D                ; Setup parameters for call to function LCD_DLY_ms
   \   00001D   7A05         MOV     R2,#0x5
   \   00001F   7B00         MOV     R3,#0x0
   \   000021   12....       LCALL   ??LCD_DLY_ms?relay
    249          	LCD_REST=1;
   \   000024   D292         SETB    0x90.2
    250                  
    251                  //LCD_CS=1;
    252                  //LCD_DLY_ms(5);
    253                  //LCD_CS=0;
    254          
    255                  LCD_WR_REG(0x11); //Sleep out
   \   000026                ; Setup parameters for call to function LCD_WR_REG
   \   000026   12....       LCALL   ?Subroutine10 & 0xFFFF
    256          	LCD_DLY_ms(120); //Delay 120ms
    257          	//------------------------------------ST7735S Frame Rate-----------------------------------------//
    258          	LCD_WR_REG(0xB1);
   \                     ??CrossCallReturnLabel_5:
   \   000029   12....       LCALL   ?Subroutine12 & 0xFFFF
    259          	LCD_WR_DATA8(0x05);
    260          
    261          
    262                  LCD_WR_REG(0x11);//Sleep exit 
   \                     ??CrossCallReturnLabel_9:
   \   00002C                ; Setup parameters for call to function LCD_WR_REG
   \   00002C   12....       LCALL   ?Subroutine10 & 0xFFFF
    263                  LCD_DLY_ms (120);
    264                   
    265                  //ST7735R Frame Rate
    266                  LCD_WR_REG(0xB1); 
   \                     ??CrossCallReturnLabel_6:
   \   00002F   12....       LCALL   ?Subroutine8 & 0xFFFF
    267                  LCD_WR_DATA8(0x01); 
    268                  
    269                  LCD_WR_DATA8(0x2C); LCD_WR_DATA8(0x2D); 
    270                  LCD_WR_REG(0xB2); 
   \                     ??CrossCallReturnLabel_0:
   \   000032                ; Setup parameters for call to function LCD_WR_REG
   \   000032   79B2         MOV     R1,#-0x4e
   \   000034   12....       LCALL   ?Subroutine8 & 0xFFFF
    271                  LCD_WR_DATA8(0x01); LCD_WR_DATA8(0x2C); LCD_WR_DATA8(0x2D); 
    272                  LCD_WR_REG(0xB3); 
   \                     ??CrossCallReturnLabel_1:
   \   000037                ; Setup parameters for call to function LCD_WR_REG
   \   000037   79B3         MOV     R1,#-0x4d
   \   000039   12....       LCALL   ?Subroutine8 & 0xFFFF
    273                  LCD_WR_DATA8(0x01); LCD_WR_DATA8(0x2C); LCD_WR_DATA8(0x2D); 
    274                  LCD_WR_DATA8(0x01); LCD_WR_DATA8(0x2C); LCD_WR_DATA8(0x2D); 
   \                     ??CrossCallReturnLabel_2:
   \   00003C                ; Setup parameters for call to function LCD_WR_DATA8
   \   00003C   7901         MOV     R1,#0x1
   \   00003E   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000041                ; Setup parameters for call to function LCD_WR_DATA8
   \   000041   792D         MOV     R1,#0x2d
   \   000043   12....       LCALL   ??LCD_WR_DATA8?relay
    275                  
    276                  LCD_WR_REG(0xB4); //Column inversion 
   \   000046                ; Setup parameters for call to function LCD_WR_REG
   \   000046   79B4         MOV     R1,#-0x4c
   \   000048   12....       LCALL   ??LCD_WR_REG?relay
    277                  LCD_WR_DATA8(0x07); 
   \   00004B                ; Setup parameters for call to function LCD_WR_DATA8
   \   00004B   7907         MOV     R1,#0x7
   \   00004D   12....       LCALL   ??LCD_WR_DATA8?relay
    278                   
    279                  //ST7735R Power Sequence
    280                  LCD_WR_REG(0xC0); 
   \   000050                ; Setup parameters for call to function LCD_WR_REG
   \   000050   79C0         MOV     R1,#-0x40
   \   000052   12....       LCALL   ??LCD_WR_REG?relay
    281                  LCD_WR_DATA8(0xA2); LCD_WR_DATA8(0x02); LCD_WR_DATA8(0x84); 
   \   000055                ; Setup parameters for call to function LCD_WR_DATA8
   \   000055   79A2         MOV     R1,#-0x5e
   \   000057   12....       LCALL   ??LCD_WR_DATA8?relay
   \   00005A                ; Setup parameters for call to function LCD_WR_DATA8
   \   00005A   7902         MOV     R1,#0x2
   \   00005C   12....       LCALL   ??LCD_WR_DATA8?relay
   \   00005F                ; Setup parameters for call to function LCD_WR_DATA8
   \   00005F   7984         MOV     R1,#-0x7c
   \   000061   12....       LCALL   ??LCD_WR_DATA8?relay
    282                  LCD_WR_REG(0xC1); LCD_WR_DATA8(0xC5); 
   \   000064                ; Setup parameters for call to function LCD_WR_REG
   \   000064   79C1         MOV     R1,#-0x3f
   \   000066   12....       LCALL   ??LCD_WR_REG?relay
   \   000069                ; Setup parameters for call to function LCD_WR_DATA8
   \   000069   79C5         MOV     R1,#-0x3b
   \   00006B   12....       LCALL   ??LCD_WR_DATA8?relay
    283                  LCD_WR_REG(0xC2); 
   \   00006E                ; Setup parameters for call to function LCD_WR_REG
   \   00006E   79C2         MOV     R1,#-0x3e
   \   000070   12....       LCALL   ??LCD_WR_REG?relay
    284                  LCD_WR_DATA8(0x0A); LCD_WR_DATA8(0x00); 
   \   000073                ; Setup parameters for call to function LCD_WR_DATA8
   \   000073   790A         MOV     R1,#0xa
   \   000075   12....       LCALL   ?Subroutine34 & 0xFFFF
    285                  LCD_WR_REG(0xC3); 
   \                     ??CrossCallReturnLabel_53:
   \   000078                ; Setup parameters for call to function LCD_WR_REG
   \   000078   79C3         MOV     R1,#-0x3d
   \   00007A   12....       LCALL   ?Subroutine13 & 0xFFFF
    286                  LCD_WR_DATA8(0x8A); LCD_WR_DATA8(0x2A); 
   \                     ??CrossCallReturnLabel_11:
   \   00007D                ; Setup parameters for call to function LCD_WR_DATA8
   \   00007D   792A         MOV     R1,#0x2a
   \   00007F   12....       LCALL   ??LCD_WR_DATA8?relay
    287                  LCD_WR_REG(0xC4); 
   \   000082                ; Setup parameters for call to function LCD_WR_REG
   \   000082   79C4         MOV     R1,#-0x3c
   \   000084   12....       LCALL   ?Subroutine13 & 0xFFFF
    288                  LCD_WR_DATA8(0x8A); LCD_WR_DATA8(0xEE); 
   \                     ??CrossCallReturnLabel_12:
   \   000087                ; Setup parameters for call to function LCD_WR_DATA8
   \   000087   79EE         MOV     R1,#-0x12
   \   000089   12....       LCALL   ??LCD_WR_DATA8?relay
    289                   
    290                  LCD_WR_REG(0xC5); //VCOM 
   \   00008C                ; Setup parameters for call to function LCD_WR_REG
   \   00008C   79C5         MOV     R1,#-0x3b
   \   00008E   12....       LCALL   ??LCD_WR_REG?relay
    291                  LCD_WR_DATA8(0x0E); 
   \   000091                ; Setup parameters for call to function LCD_WR_DATA8
   \   000091   790E         MOV     R1,#0xe
   \   000093   12....       LCALL   ??LCD_WR_DATA8?relay
    292                   
    293                  LCD_WR_REG(0x36); //MX, MY, RGB mode 
   \   000096                ; Setup parameters for call to function LCD_WR_REG
   \   000096   7936         MOV     R1,#0x36
   \   000098   12....       LCALL   ??LCD_WR_REG?relay
    294                  LCD_WR_DATA8(0xC8); 
   \   00009B                ; Setup parameters for call to function LCD_WR_DATA8
   \   00009B   79C8         MOV     R1,#-0x38
   \   00009D   12....       LCALL   ??LCD_WR_DATA8?relay
    295                  
    296                  //ST7735R Gamma Sequence
    297                  LCD_WR_REG(0xe0); 
   \   0000A0                ; Setup parameters for call to function LCD_WR_REG
   \   0000A0   79E0         MOV     R1,#-0x20
   \   0000A2   12....       LCALL   ?Subroutine14 & 0xFFFF
    298                  LCD_WR_DATA8(0x0f); LCD_WR_DATA8(0x1a); 
   \                     ??CrossCallReturnLabel_13:
   \   0000A5                ; Setup parameters for call to function LCD_WR_DATA8
   \   0000A5   791A         MOV     R1,#0x1a
   \   0000A7   12....       LCALL   ?Subroutine23 & 0xFFFF
    299                  LCD_WR_DATA8(0x0f); LCD_WR_DATA8(0x18); 
   \                     ??CrossCallReturnLabel_36:
   \   0000AA                ; Setup parameters for call to function LCD_WR_DATA8
   \   0000AA   7918         MOV     R1,#0x18
   \   0000AC   12....       LCALL   ??LCD_WR_DATA8?relay
    300                  LCD_WR_DATA8(0x2f); LCD_WR_DATA8(0x28); 
   \   0000AF                ; Setup parameters for call to function LCD_WR_DATA8
   \   0000AF   792F         MOV     R1,#0x2f
   \   0000B1   12....       LCALL   ??LCD_WR_DATA8?relay
   \   0000B4                ; Setup parameters for call to function LCD_WR_DATA8
   \   0000B4   7928         MOV     R1,#0x28
   \   0000B6   12....       LCALL   ??LCD_WR_DATA8?relay
    301                  LCD_WR_DATA8(0x20); LCD_WR_DATA8(0x22); 
   \   0000B9                ; Setup parameters for call to function LCD_WR_DATA8
   \   0000B9   7920         MOV     R1,#0x20
   \   0000BB   12....       LCALL   ??LCD_WR_DATA8?relay
   \   0000BE                ; Setup parameters for call to function LCD_WR_DATA8
   \   0000BE   7922         MOV     R1,#0x22
   \   0000C0   12....       LCALL   ??LCD_WR_DATA8?relay
    302                  LCD_WR_DATA8(0x1f); LCD_WR_DATA8(0x1b); 
   \   0000C3                ; Setup parameters for call to function LCD_WR_DATA8
   \   0000C3   791F         MOV     R1,#0x1f
   \   0000C5   12....       LCALL   ??LCD_WR_DATA8?relay
   \   0000C8                ; Setup parameters for call to function LCD_WR_DATA8
   \   0000C8   791B         MOV     R1,#0x1b
   \   0000CA   12....       LCALL   ??LCD_WR_DATA8?relay
    303                  LCD_WR_DATA8(0x23); LCD_WR_DATA8(0x37); LCD_WR_DATA8(0x00); 
   \   0000CD                ; Setup parameters for call to function LCD_WR_DATA8
   \   0000CD   7923         MOV     R1,#0x23
   \   0000CF   12....       LCALL   ??LCD_WR_DATA8?relay
   \   0000D2                ; Setup parameters for call to function LCD_WR_DATA8
   \   0000D2   7937         MOV     R1,#0x37
   \   0000D4   12....       LCALL   ?Subroutine20 & 0xFFFF
    304                  
    305                  LCD_WR_DATA8(0x07); 
    306                  LCD_WR_DATA8(0x02); LCD_WR_DATA8(0x10); 
   \                     ??CrossCallReturnLabel_30:
   \   0000D7                ; Setup parameters for call to function LCD_WR_DATA8
   \   0000D7   7902         MOV     R1,#0x2
   \   0000D9   12....       LCALL   ?Subroutine24 & 0xFFFF
    307                  LCD_WR_REG(0xe1); 
   \                     ??CrossCallReturnLabel_38:
   \   0000DC                ; Setup parameters for call to function LCD_WR_REG
   \   0000DC   79E1         MOV     R1,#-0x1f
   \   0000DE   12....       LCALL   ?Subroutine14 & 0xFFFF
    308                  LCD_WR_DATA8(0x0f); LCD_WR_DATA8(0x1b); 
   \                     ??CrossCallReturnLabel_14:
   \   0000E1                ; Setup parameters for call to function LCD_WR_DATA8
   \   0000E1   791B         MOV     R1,#0x1b
   \   0000E3   12....       LCALL   ?Subroutine23 & 0xFFFF
    309                  LCD_WR_DATA8(0x0f); LCD_WR_DATA8(0x17); 
   \                     ??CrossCallReturnLabel_37:
   \   0000E6                ; Setup parameters for call to function LCD_WR_DATA8
   \   0000E6   7917         MOV     R1,#0x17
   \   0000E8   12....       LCALL   ??LCD_WR_DATA8?relay
    310                  LCD_WR_DATA8(0x33); LCD_WR_DATA8(0x2c); 
   \   0000EB                ; Setup parameters for call to function LCD_WR_DATA8
   \   0000EB   7933         MOV     R1,#0x33
   \   0000ED   12....       LCALL   ?Subroutine22 & 0xFFFF
    311                  LCD_WR_DATA8(0x29); LCD_WR_DATA8(0x2e); 
   \                     ??CrossCallReturnLabel_35:
   \   0000F0                ; Setup parameters for call to function LCD_WR_DATA8
   \   0000F0   7929         MOV     R1,#0x29
   \   0000F2   12....       LCALL   ??LCD_WR_DATA8?relay
   \   0000F5                ; Setup parameters for call to function LCD_WR_DATA8
   \   0000F5   792E         MOV     R1,#0x2e
   \   0000F7   12....       LCALL   ??LCD_WR_DATA8?relay
    312                  LCD_WR_DATA8(0x30); LCD_WR_DATA8(0x30); 
   \   0000FA                ; Setup parameters for call to function LCD_WR_DATA8
   \   0000FA   7930         MOV     R1,#0x30
   \   0000FC   12....       LCALL   ??LCD_WR_DATA8?relay
   \   0000FF                ; Setup parameters for call to function LCD_WR_DATA8
   \   0000FF   7930         MOV     R1,#0x30
   \   000101   12....       LCALL   ??LCD_WR_DATA8?relay
    313                  LCD_WR_DATA8(0x39); LCD_WR_DATA8(0x3f); 
   \   000104                ; Setup parameters for call to function LCD_WR_DATA8
   \   000104   7939         MOV     R1,#0x39
   \   000106   12....       LCALL   ??LCD_WR_DATA8?relay
   \   000109                ; Setup parameters for call to function LCD_WR_DATA8
   \   000109   793F         MOV     R1,#0x3f
   \   00010B   12....       LCALL   ?Subroutine20 & 0xFFFF
    314                  LCD_WR_DATA8(0x00); LCD_WR_DATA8(0x07); 
    315                  LCD_WR_DATA8(0x03); LCD_WR_DATA8(0x10);  
   \                     ??CrossCallReturnLabel_31:
   \   00010E                ; Setup parameters for call to function LCD_WR_DATA8
   \   00010E   7903         MOV     R1,#0x3
   \   000110   12....       LCALL   ?Subroutine24 & 0xFFFF
    316                  
    317                  LCD_WR_REG(0x2a);
   \                     ??CrossCallReturnLabel_39:
   \   000113                ; Setup parameters for call to function LCD_WR_REG
   \   000113   792A         MOV     R1,#0x2a
   \   000115   12....       LCALL   ?Subroutine9 & 0xFFFF
    318                  LCD_WR_DATA8(0x00);LCD_WR_DATA8(0x00);
    319                  LCD_WR_DATA8(0x00);LCD_WR_DATA8(0x7f);
    320                  LCD_WR_REG(0x2b);
   \                     ??CrossCallReturnLabel_3:
   \   000118                ; Setup parameters for call to function LCD_WR_REG
   \   000118   792B         MOV     R1,#0x2b
   \   00011A   12....       LCALL   ?Subroutine9 & 0xFFFF
    321                  LCD_WR_DATA8(0x00);LCD_WR_DATA8(0x00);
    322                  LCD_WR_DATA8(0x00);LCD_WR_DATA8(0x7f);
    323                  
    324                  LCD_WR_REG(0xF0); //Enable test command  
   \                     ??CrossCallReturnLabel_4:
   \   00011D                ; Setup parameters for call to function LCD_WR_REG
   \   00011D   79F0         MOV     R1,#-0x10
   \   00011F   12....       LCALL   ?Subroutine32 & 0xFFFF
    325                  LCD_WR_DATA8(0x01); 
    326                  LCD_WR_REG(0xF6); //Disable ram power save mode 
   \                     ??CrossCallReturnLabel_49:
   \   000122                ; Setup parameters for call to function LCD_WR_REG
   \   000122   79F6         MOV     R1,#-0xa
   \   000124   12....       LCALL   ?Subroutine33 & 0xFFFF
    327                  LCD_WR_DATA8(0x00); 
    328                   
    329                  LCD_WR_REG(0x3A); //65k mode 
   \                     ??CrossCallReturnLabel_51:
   \   000127                ; Setup parameters for call to function LCD_WR_REG
   \   000127   793A         MOV     R1,#0x3a
   \   000129   12....       LCALL   ?Subroutine12 & 0xFFFF
    330                  LCD_WR_DATA8(0x05); 
    331                  LCD_WR_REG(0x29); //Display on
   \                     ??CrossCallReturnLabel_10:
   \   00012C                ; Setup parameters for call to function LCD_WR_REG
   \   00012C   7929         MOV     R1,#0x29
   \   00012E   12....       LCALL   ??LCD_WR_REG?relay
    332                  LCD_WR_REG(0x2C);
   \   000131                ; Setup parameters for call to function LCD_WR_REG
   \   000131   792C         MOV     R1,#0x2c
   \   000133   12....       LCALL   ??LCD_WR_REG?relay
    333          }
   \   000136   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000139                REQUIRE _A_P1
   \   000139                REQUIRE P1SEL
   \   000139                REQUIRE P1DIR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ??LCD_WR_DATA8?relay
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003   7910         MOV     R1,#0x10
   \   000005   12....       LCALL   ??LCD_WR_DATA8?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ??LCD_WR_DATA8?relay
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003   790F         MOV     R1,#0xf
   \   000005   12....       LCALL   ??LCD_WR_DATA8?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ??LCD_WR_DATA8?relay
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003   792C         MOV     R1,#0x2c
   \   000005   12....       LCALL   ??LCD_WR_DATA8?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003   7907         MOV     R1,#0x7
   \   000005   12....       LCALL   ??LCD_WR_DATA8?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ??LCD_WR_DATA8?relay
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003   7900         MOV     R1,#0x0
   \   000005   12....       LCALL   ??LCD_WR_DATA8?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ??LCD_WR_REG?relay
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003   790F         MOV     R1,#0xf
   \   000005   12....       LCALL   ??LCD_WR_DATA8?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ??LCD_WR_REG?relay
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003   798A         MOV     R1,#-0x76
   \   000005   12....       LCALL   ??LCD_WR_DATA8?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ??LCD_WR_REG?relay
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003   7905         MOV     R1,#0x5
   \   000005   12....       LCALL   ??LCD_WR_DATA8?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7911         MOV     R1,#0x11
   \   000002   12....       LCALL   ??LCD_WR_REG?relay
   \   000005                ; Setup parameters for call to function LCD_DLY_ms
   \   000005                ; Setup parameters for call to function LCD_DLY_ms
   \   000005   7A78         MOV     R2,#0x78
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   ??LCD_DLY_ms?relay
   \   00000C                ; Setup parameters for call to function LCD_WR_REG
   \   00000C                ; Setup parameters for call to function LCD_WR_REG
   \   00000C   79B1         MOV     R1,#-0x4f
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003   7900         MOV     R1,#0x0
   \   000005   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000008                ; Setup parameters for call to function LCD_WR_DATA8
   \   000008                ; Setup parameters for call to function LCD_WR_DATA8
   \   000008   797F         MOV     R1,#0x7f
   \   00000A   12....       LCALL   ??LCD_WR_DATA8?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ??LCD_WR_REG?relay
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003   7900         MOV     R1,#0x0
   \   000005   12....       LCALL   ??LCD_WR_DATA8?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003   792C         MOV     R1,#0x2c
   \   000005   12....       LCALL   ??LCD_WR_DATA8?relay
   \   000008                ; Setup parameters for call to function LCD_WR_DATA8
   \   000008                ; Setup parameters for call to function LCD_WR_DATA8
   \   000008                ; Setup parameters for call to function LCD_WR_DATA8
   \   000008   792D         MOV     R1,#0x2d
   \   00000A   12....       LCALL   ??LCD_WR_DATA8?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ??LCD_WR_REG?relay
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003                ; Setup parameters for call to function LCD_WR_DATA8
   \   000003   7901         MOV     R1,#0x1
   \   000005   12....       LCALL   ??LCD_WR_DATA8?relay
   \   000008   22           RET
    334          
    335          //ÔÚÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸öºº×Ö(32*33´óĞ¡)
    336          //dcolorÎªÄÚÈİÑÕÉ«£¬gbcolorÎª±³¾²ÑÕÉ«

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    337          void showhanzi24x24(unsigned int x,unsigned int y,unsigned char index, unsigned char *temp, unsigned int pointcolor, unsigned int back_color)	
   \                     showhanzi24x24:
    338          {  
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 4,R1
   \   000007   7411         MOV     A,#0x11
   \   000009   12....       LCALL   ?XSTACK_DISP0_8
   \   00000C   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00000F   7413         MOV     A,#0x13
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine17 & 0xFFFF
    339          	unsigned char i,j;    
    340              Address_set(x,y,x+23,y+23); //ÉèÖÃÇøÓò      
   \                     ??CrossCallReturnLabel_24:
   \   00001D   2417         ADD     A,#0x17
   \   00001F   F5..         MOV     ?V0 + 6,A
   \   000021   ED           MOV     A,R5
   \   000022   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   EA           MOV     A,R2
   \   000029   2417         ADD     A,#0x17
   \   00002B   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
    341          	temp+=index*72;	
   \   000037   E5..         MOV     A,?V0 + 4
   \   000039   75F048       MOV     B,#0x48
   \   00003C   A4           MUL     AB
   \   00003D   F8           MOV     R0,A
   \   00003E   A9F0         MOV     R1,B
   \   000040   EE           MOV     A,R6
   \   000041   28           ADD     A,R0
   \   000042   FE           MOV     R6,A
   \   000043   EF           MOV     A,R7
   \   000044   39           ADDC    A,R1
   \   000045   FF           MOV     R7,A
    342          	for(j=0;j<72;j++)
   \   000046   75..48       MOV     ?V0 + 8,#0x48
    343          	{
    344          		for(i=0;i<8;i++)
   \                     ??showhanzi24x24_0:
   \   000049   75..00       MOV     ?V0 + 5,#0x0
    345          		{ 		     
    346          		 	if((*temp&(1<<i))!=0)
   \                     ??showhanzi24x24_1:
   \   00004C   75..01       MOV     ?V0 + 6,#0x1
   \   00004F   75..00       MOV     ?V0 + 7,#0x0
   \   000052   E5..         MOV     A,?V0 + 5
   \   000054   78..         MOV     R0,#?V0 + 6
   \   000056   12....       LCALL   ?S_SHL
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   55..         ANL     A,?V0 + 6
   \   000060   6006         JZ      ??showhanzi24x24_2
    347          			{
    348          				LCD_WR_DATA(pointcolor);
   \   000062                ; Setup parameters for call to function LCD_WR_DATA
   \   000062   AA..         MOV     R2,?V0 + 0
   \   000064   AB..         MOV     R3,?V0 + 1
   \   000066   8004         SJMP    ??showhanzi24x24_3
    349          			} 
    350          			else
    351          			{
    352          				LCD_WR_DATA(back_color);
   \                     ??showhanzi24x24_2:
   \   000068                ; Setup parameters for call to function LCD_WR_DATA
   \   000068   AA..         MOV     R2,?V0 + 2
   \   00006A   AB..         MOV     R3,?V0 + 3
    353          			}   
    354          		}
   \                     ??showhanzi24x24_3:
   \   00006C   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00006F   40DB         JC      ??showhanzi24x24_1
    355          		temp++;
   \   000071   8E82         MOV     DPL,R6
   \   000073   8F83         MOV     DPH,R7
   \   000075   A3           INC     DPTR
   \   000076   AE82         MOV     R6,DPL
   \   000078   AF83         MOV     R7,DPH
    356          	 }
   \   00007A   15..         DEC     ?V0 + 8
   \   00007C   E5..         MOV     A,?V0 + 8
   \   00007E   70C9         JNZ     ??showhanzi24x24_0
    357          }
   \   000080                REQUIRE ?Subroutine3
   \   000080                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F09         MOV     R7,#0x9
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F5..         MOV     ?V0 + 6,A
   \   000002   EB           MOV     A,R3
   \   000003                REQUIRE ??Subroutine36_0
   \   000003                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 7,A
   \   000004   78..         MOV     R0,#?V0 + 6
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007                ; Setup parameters for call to function Address_set
   \   000007                ; Setup parameters for call to function Address_set
   \   000007   EC           MOV     A,R4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   7415         MOV     A,#0x15
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ??LCD_WR_DATA?relay
   \   000003   05..         INC     ?V0 + 5
   \   000005   E5..         MOV     A,?V0 + 5
   \   000007   C3           CLR     C
   \   000008   9408         SUBB    A,#0x8
   \   00000A   22           RET
    358          
    359          //ÔÚÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸öºº×Ö(16*16´óĞ¡)
    360          //pointcolorÎªÄÚÈİÑÕÉ«£¬gbcolorÎª±³¾²ÑÕÉ«

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    361          void showhanzi16x16(unsigned int x,unsigned int y,unsigned char index,unsigned char *temp, unsigned int pointcolor, unsigned int back_color)	
   \                     showhanzi16x16:
    362          {  
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 4,R1
   \   000007   7411         MOV     A,#0x11
   \   000009   12....       LCALL   ?XSTACK_DISP0_8
   \   00000C   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00000F   7413         MOV     A,#0x13
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine17 & 0xFFFF
    363          	unsigned char i,j;
    364                  Address_set(x,y,x+15,y+15); //ÉèÖÃÇøÓò      
   \                     ??CrossCallReturnLabel_25:
   \   00001D   240F         ADD     A,#0xf
   \   00001F   F5..         MOV     ?V0 + 6,A
   \   000021   ED           MOV     A,R5
   \   000022   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   EA           MOV     A,R2
   \   000029   240F         ADD     A,#0xf
   \   00002B   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
    365          	temp+=index*32;	
   \   000037   85....       MOV     ?V0 + 6,?V0 + 4
   \   00003A   75..00       MOV     ?V0 + 7,#0x0
   \   00003D   7405         MOV     A,#0x5
   \   00003F   78..         MOV     R0,#?V0 + 6
   \   000041   12....       LCALL   ?S_SHL
   \   000044   EE           MOV     A,R6
   \   000045   25..         ADD     A,?V0 + 6
   \   000047   FE           MOV     R6,A
   \   000048   EF           MOV     A,R7
   \   000049   35..         ADDC    A,?V0 + 7
   \   00004B   FF           MOV     R7,A
    366          	for(j=0;j<32;j++)
   \   00004C   75..20       MOV     ?V0 + 8,#0x20
    367          	{
    368          		for(i=0;i<8;i++)
   \                     ??showhanzi16x16_0:
   \   00004F   75..00       MOV     ?V0 + 5,#0x0
    369          		{ 		     
    370          		 	if((*temp&(1<<i))!=0)
   \                     ??showhanzi16x16_1:
   \   000052   75..01       MOV     ?V0 + 6,#0x1
   \   000055   75..00       MOV     ?V0 + 7,#0x0
   \   000058   E5..         MOV     A,?V0 + 5
   \   00005A   78..         MOV     R0,#?V0 + 6
   \   00005C   12....       LCALL   ?S_SHL
   \   00005F   8E82         MOV     DPL,R6
   \   000061   8F83         MOV     DPH,R7
   \   000063   E0           MOVX    A,@DPTR
   \   000064   55..         ANL     A,?V0 + 6
   \   000066   6006         JZ      ??showhanzi16x16_2
    371          			{
    372          				LCD_WR_DATA(pointcolor);
   \   000068                ; Setup parameters for call to function LCD_WR_DATA
   \   000068   AA..         MOV     R2,?V0 + 0
   \   00006A   AB..         MOV     R3,?V0 + 1
   \   00006C   8004         SJMP    ??showhanzi16x16_3
    373          			} 
    374          			else
    375          			{
    376          				LCD_WR_DATA(back_color);
   \                     ??showhanzi16x16_2:
   \   00006E                ; Setup parameters for call to function LCD_WR_DATA
   \   00006E   AA..         MOV     R2,?V0 + 2
   \   000070   AB..         MOV     R3,?V0 + 3
    377          			}   
    378          		}
   \                     ??showhanzi16x16_3:
   \   000072   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000075   40DB         JC      ??showhanzi16x16_1
    379          		temp++;
   \   000077   8E82         MOV     DPL,R6
   \   000079   8F83         MOV     DPH,R7
   \   00007B   A3           INC     DPTR
   \   00007C   AE82         MOV     R6,DPL
   \   00007E   AF83         MOV     R7,DPH
    380          	 }
   \   000080   15..         DEC     ?V0 + 8
   \   000082   E5..         MOV     A,?V0 + 8
   \   000084   70C9         JNZ     ??showhanzi16x16_0
    381          }
   \   000086   02....       LJMP    ?Subroutine3 & 0xFFFF
    382          
    383          //»­µã
    384          //POINT_COLOR:´ËµãµÄÑÕÉ«

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    385          void LCD_DrawPoint(uint16 x,uint16 y)
   \                     LCD_DrawPoint:
    386          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    387          	Address_set(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ 
   \   000005                ; Setup parameters for call to function Address_set
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000E   8A..         MOV     ?V0 + 0,R2
   \   000010   8B..         MOV     ?V0 + 1,R3
   \   000012   78..         MOV     R0,#?V0 + 0
   \   000014   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000017   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00001A   12....       LCALL   ?DEALLOC_XSTACK8
    388          	LCD_WR_DATA(GREEN); 	    
   \   00001D                ; Setup parameters for call to function LCD_WR_DATA
   \   00001D   7AE0         MOV     R2,#-0x20
   \   00001F   7B07         MOV     R3,#0x7
   \   000021   12....       LCALL   ??LCD_WR_DATA?relay
    389          } 	 
   \   000024                REQUIRE ?Subroutine2
   \   000024                ; // Fall through to label ?Subroutine2
    390          
    391          //»­Ò»¸ö´óµã
    392          //POINT_COLOR:´ËµãµÄÑÕÉ«

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    393          void LCD_DrawPoint_big(uint16 x,uint16 y)
   \                     LCD_DrawPoint_big:
    394          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    395          	LCD_Fill(x-1,y-1,x+1,y+1,POINT_COLOR);
   \   000005                ; Setup parameters for call to function LCD_Fill
   \   000005   90....       MOV     DPTR,#POINT_COLOR
   \   000008   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00000B   EC           MOV     A,R4
   \   00000C   2401         ADD     A,#0x1
   \   00000E   F5..         MOV     ?V0 + 0,A
   \   000010   ED           MOV     A,R5
   \   000011   3400         ADDC    A,#0x0
   \   000013   F5..         MOV     ?V0 + 1,A
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EA           MOV     A,R2
   \   00001B   2401         ADD     A,#0x1
   \   00001D   F5..         MOV     ?V0 + 0,A
   \   00001F   EB           MOV     A,R3
   \   000020   3400         ADDC    A,#0x0
   \   000022   F5..         MOV     ?V0 + 1,A
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   EC           MOV     A,R4
   \   00002A   24FF         ADD     A,#-0x1
   \   00002C   1C           DEC     R4
   \   00002D   ED           MOV     A,R5
   \   00002E   34FF         ADDC    A,#-0x1
   \   000030   FD           MOV     R5,A
   \   000031   EA           MOV     A,R2
   \   000032   24FF         ADD     A,#-0x1
   \   000034   1A           DEC     R2
   \   000035   EB           MOV     A,R3
   \   000036   34FF         ADDC    A,#-0x1
   \   000038   FB           MOV     R3,A
   \   000039   12....       LCALL   ??LCD_Fill?relay
   \   00003C   7406         MOV     A,#0x6
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
    396          } 
   \   000041   80..         SJMP    ?Subroutine2
    397          //====================================================================================
    398          /* º¯Êı: void DispPic(const unsigned char *p)
    399             ÃèÊö: È«ÆÁÏÔÊ¾Ò»ÕÅÍ¼Æ¬£¬ p ÎªÒªÏÔÊ¾µÄÑÕÉ«ÖµµÄÖ¸Õë  8Î»¸ñÊ½ */
    400          //====================================================================================

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    401          void DispPic(const unsigned char *p)
   \                     DispPic:
    402          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    403          	unsigned int i,j;
    404          	unsigned char pic_h,pic_l;
    405          
    406          		//SetDisArea(0,LCD_W-1,0,LCD_H-1);
    407          	Address_set(0,LCD_W-1,0,LCD_H-1);
   \   000009                ; Setup parameters for call to function Address_set
   \   000009   75..83       MOV     ?V0 + 0,#-0x7d
   \   00000C   75..00       MOV     ?V0 + 1,#0x0
   \   00000F   78..         MOV     R0,#?V0 + 0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   E4           CLR     A
   \   000015   F5..         MOV     ?V0 + 0,A
   \   000017   78..         MOV     R0,#?V0 + 0
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   7C81         MOV     R4,#-0x7f
   \   00001E   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
    408          	//GPIO_SetBits(GPIOB, GPIO_Pin_14); //½ÓÏÂÀ´½«ÒªÌî³äÊı¾İ
    409          	 LCD_DC=1;
   \   000024   D296         SETB    0x90.6
    410          	for(i=0;i<LCD_W;i++)//ĞĞ
   \   000026   75..82       MOV     ?V0 + 3,#-0x7e
    411          	{
    412          	    for(j=0;j<LCD_H;j++)//ÁĞ
   \                     ??DispPic_0:
   \   000029   75..84       MOV     ?V0 + 2,#-0x7c
    413          		{    
    414          		  pic_l=(*p);
   \                     ??DispPic_1:
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F5..         MOV     ?V0 + 0,A
    415          		  pic_h=(*(p+1));
    416          			LCD_WR_DATA(pic_h);				  
   \   000033                ; Setup parameters for call to function LCD_WR_DATA
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   FA           MOV     R2,A
   \   000036   7B00         MOV     R3,#0x0
   \   000038   12....       LCALL   ??LCD_WR_DATA?relay
    417          			LCD_WR_DATA(pic_l);
   \   00003B                ; Setup parameters for call to function LCD_WR_DATA
   \   00003B   AA..         MOV     R2,?V0 + 0
   \   00003D   7B00         MOV     R3,#0x0
   \   00003F   12....       LCALL   ??LCD_WR_DATA?relay
    418          			p=p+2;
   \   000042   EE           MOV     A,R6
   \   000043   2402         ADD     A,#0x2
   \   000045   0E           INC     R6
   \   000046   0E           INC     R6
   \   000047   EF           MOV     A,R7
   \   000048   3400         ADDC    A,#0x0
   \   00004A   FF           MOV     R7,A
    419          		}
   \   00004B   15..         DEC     ?V0 + 2
   \   00004D   E5..         MOV     A,?V0 + 2
   \   00004F   70DB         JNZ     ??DispPic_1
    420          	}
   \   000051   15..         DEC     ?V0 + 3
   \   000053   E5..         MOV     A,?V0 + 3
   \   000055   70D2         JNZ     ??DispPic_0
    421          }
   \   000057   7F04         MOV     R7,#0x4
   \   000059   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00005C                REQUIRE _A_P1
    422          //ÔÚÖ¸¶¨ÇøÓòÄÚÌî³äÖ¸¶¨ÑÕÉ«
    423          //ÇøÓò´óĞ¡:
    424          //  (xend-xsta)*(yend-ysta)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    425          void LCD_Fill(uint16 xsta,uint16 ysta,uint16 xend,uint16 yend,uint16 color)
   \                     LCD_Fill:
    426          {          
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   7412         MOV     A,#0x12
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 6,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 7,A
   \   000019   7414         MOV     A,#0x14
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 8,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 9,A
   \   000025   7416         MOV     A,#0x16
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   12....       LCALL   ?Subroutine18 & 0xFFFF
    427          	uint16 i,j; 
    428          	Address_set(xsta,ysta,xend,yend);      //ÉèÖÃ¹â±êÎ»ÖÃ 
   \                     ??CrossCallReturnLabel_27:
   \   00002D                ; Setup parameters for call to function Address_set
   \   00002D   78..         MOV     R0,#?V0 + 8
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   78..         MOV     R0,#?V0 + 6
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00003A   12....       LCALL   ?DEALLOC_XSTACK8
    429          	for(i=ysta;i<=yend;i++)
   \   00003D   8E..         MOV     ?V0 + 4,R6
   \   00003F   8F..         MOV     ?V0 + 5,R7
   \   000041   8024         SJMP    ??LCD_Fill_0
    430          	{													   	 	
    431          		for(j=xsta;j<=xend;j++)LCD_WR_DATA(color);//ÉèÖÃ¹â±êÎ»ÖÃ 	    
   \                     ??LCD_Fill_1:
   \   000043                ; Setup parameters for call to function LCD_WR_DATA
   \   000043   AA..         MOV     R2,?V0 + 2
   \   000045   AB..         MOV     R3,?V0 + 3
   \   000047   12....       LCALL   ??LCD_WR_DATA?relay
   \   00004A   EE           MOV     A,R6
   \   00004B   2401         ADD     A,#0x1
   \   00004D   0E           INC     R6
   \   00004E   EF           MOV     A,R7
   \   00004F   3400         ADDC    A,#0x0
   \   000051   FF           MOV     R7,A
   \                     ??LCD_Fill_2:
   \   000052   C3           CLR     C
   \   000053   E5..         MOV     A,?V0 + 6
   \   000055   9E           SUBB    A,R6
   \   000056   E5..         MOV     A,?V0 + 7
   \   000058   9F           SUBB    A,R7
   \   000059   50E8         JNC     ??LCD_Fill_1
   \   00005B   E5..         MOV     A,?V0 + 4
   \   00005D   2401         ADD     A,#0x1
   \   00005F   F5..         MOV     ?V0 + 4,A
   \   000061   E5..         MOV     A,?V0 + 5
   \   000063   3400         ADDC    A,#0x0
   \   000065   F5..         MOV     ?V0 + 5,A
   \                     ??LCD_Fill_0:
   \   000067   C3           CLR     C
   \   000068   E5..         MOV     A,?V0 + 8
   \   00006A   95..         SUBB    A,?V0 + 4
   \   00006C   E5..         MOV     A,?V0 + 9
   \   00006E   95..         SUBB    A,?V0 + 5
   \   000070   4006         JC      ??LCD_Fill_3
   \   000072   AE..         MOV     R6,?V0 + 0
   \   000074   AF..         MOV     R7,?V0 + 1
   \   000076   80DA         SJMP    ??LCD_Fill_2
    432          	} 					  	    
    433          }  
   \                     ??LCD_Fill_3:
   \   000078                REQUIRE ?Subroutine4
   \   000078                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    434          
    435          //»­Ïß
    436          //x1,y1:Æğµã×ø±ê
    437          //x2,y2:ÖÕµã×ø±ê  

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    438          void LCD_DrawLine(uint16 x1, uint16 y1, uint16 x2, uint16 y2)
   \                     LCD_DrawLine:
    439          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   741A         MOV     A,#0x1a
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000012   741C         MOV     A,#0x1c
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
    440          	uint16 t; 
    441          	int xerr=0,yerr=0,delta_x,delta_y,distance; 
   \   00001C   75..00       MOV     ?V0 + 10,#0x0
   \   00001F   75..00       MOV     ?V0 + 11,#0x0
   \   000022   75..00       MOV     ?V0 + 8,#0x0
   \   000025   75..00       MOV     ?V0 + 9,#0x0
    442          	int incx,incy,uRow,uCol; 
    443          
    444          	delta_x=x2-x1; //¼ÆËã×ø±êÔöÁ¿ 
   \   000028   EE           MOV     A,R6
   \   000029   C3           CLR     C
   \   00002A   9A           SUBB    A,R2
   \   00002B   F5..         MOV     ?V0 + 0,A
   \   00002D   EF           MOV     A,R7
   \   00002E   9B           SUBB    A,R3
   \   00002F   F5..         MOV     ?V0 + 1,A
    445          	delta_y=y2-y1; 
   \   000031   E8           MOV     A,R0
   \   000032   C3           CLR     C
   \   000033   9C           SUBB    A,R4
   \   000034   FE           MOV     R6,A
   \   000035   E9           MOV     A,R1
   \   000036   9D           SUBB    A,R5
   \   000037   FF           MOV     R7,A
    446          	uRow=x1; 
   \   000038   8A..         MOV     ?V0 + 12,R2
   \   00003A   8B..         MOV     ?V0 + 13,R3
    447          	uCol=y1; 
   \   00003C   8C..         MOV     ?V0 + 14,R4
   \   00003E   8D..         MOV     ?V0 + 15,R5
    448          	if(delta_x>0)incx=1; //ÉèÖÃµ¥²½·½Ïò 
   \   000040   C3           CLR     C
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   9401         SUBB    A,#0x1
   \   000045   E5..         MOV     A,?V0 + 1
   \   000047   12....       LCALL   ??Subroutine39_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   00004A   4008         JC      ??LCD_DrawLine_0
   \   00004C   75..01       MOV     ?V0 + 6,#0x1
   \                     ??LCD_DrawLine_1:
   \   00004F   75..00       MOV     ?V0 + 7,#0x0
   \   000052   801E         SJMP    ??LCD_DrawLine_2
    449          	else if(delta_x==0)incx=0;//´¹Ö±Ïß 
   \                     ??LCD_DrawLine_0:
   \   000054   E5..         MOV     A,?V0 + 0
   \   000056   45..         ORL     A,?V0 + 1
   \   000058   7005         JNZ     ??LCD_DrawLine_3
   \   00005A   75..00       MOV     ?V0 + 6,#0x0
   \   00005D   80F0         SJMP    ??LCD_DrawLine_1
    450          	else {incx=-1;delta_x=-delta_x;} 
   \                     ??LCD_DrawLine_3:
   \   00005F   75..FF       MOV     ?V0 + 6,#-0x1
   \   000062   75..FF       MOV     ?V0 + 7,#-0x1
   \   000065   C3           CLR     C
   \   000066   E4           CLR     A
   \   000067   95..         SUBB    A,?V0 + 0
   \   000069   F8           MOV     R0,A
   \   00006A   E4           CLR     A
   \   00006B   95..         SUBB    A,?V0 + 1
   \   00006D   F9           MOV     R1,A
   \   00006E   88..         MOV     ?V0 + 0,R0
   \   000070   89..         MOV     ?V0 + 1,R1
    451          	if(delta_y>0)incy=1; 
   \                     ??LCD_DrawLine_2:
   \   000072   C3           CLR     C
   \   000073   EE           MOV     A,R6
   \   000074   9401         SUBB    A,#0x1
   \   000076   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000079   4008         JC      ??LCD_DrawLine_4
   \   00007B   75..01       MOV     ?V0 + 4,#0x1
   \                     ??LCD_DrawLine_5:
   \   00007E   75..00       MOV     ?V0 + 5,#0x0
   \   000081   801A         SJMP    ??LCD_DrawLine_6
    452          	else if(delta_y==0)incy=0;//Ë®Æ½Ïß 
   \                     ??LCD_DrawLine_4:
   \   000083   EE           MOV     A,R6
   \   000084   4F           ORL     A,R7
   \   000085   7005         JNZ     ??LCD_DrawLine_7
   \   000087   75..00       MOV     ?V0 + 4,#0x0
   \   00008A   80F2         SJMP    ??LCD_DrawLine_5
    453          	else{incy=-1;delta_y=-delta_y;} 
   \                     ??LCD_DrawLine_7:
   \   00008C   75..FF       MOV     ?V0 + 4,#-0x1
   \   00008F   75..FF       MOV     ?V0 + 5,#-0x1
   \   000092   C3           CLR     C
   \   000093   E4           CLR     A
   \   000094   9E           SUBB    A,R6
   \   000095   F8           MOV     R0,A
   \   000096   E4           CLR     A
   \   000097   9F           SUBB    A,R7
   \   000098   F9           MOV     R1,A
   \   000099   E8           MOV     A,R0
   \   00009A   FE           MOV     R6,A
   \   00009B   E9           MOV     A,R1
   \   00009C   FF           MOV     R7,A
    454          	if( delta_x>delta_y)distance=delta_x; //Ñ¡È¡»ù±¾ÔöÁ¿×ø±êÖá 
   \                     ??LCD_DrawLine_6:
   \   00009D   C3           CLR     C
   \   00009E   EE           MOV     A,R6
   \   00009F   95..         SUBB    A,?V0 + 0
   \   0000A1   EF           MOV     A,R7
   \   0000A2   95..         SUBB    A,?V0 + 1
   \   0000A4   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0000A6   65D0         XRL     A,PSW
   \   0000A8   33           RLC     A
   \   0000A9   5008         JNC     ??LCD_DrawLine_8
   \   0000AB   85....       MOV     ?V0 + 2,?V0 + 0
   \   0000AE   85....       MOV     ?V0 + 3,?V0 + 1
   \   0000B1   8004         SJMP    ??LCD_DrawLine_9
    455          	else distance=delta_y; 
   \                     ??LCD_DrawLine_8:
   \   0000B3   8E..         MOV     ?V0 + 2,R6
   \   0000B5   8F..         MOV     ?V0 + 3,R7
    456          	for(t=0;t<=distance+1;t++ )//»­ÏßÊä³ö 
   \                     ??LCD_DrawLine_9:
   \   0000B7   85..82       MOV     DPL,?XSP + 0
   \   0000BA   85..83       MOV     DPH,?XSP + 1
   \   0000BD   E4           CLR     A
   \   0000BE   F0           MOVX    @DPTR,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   F0           MOVX    @DPTR,A
    457          	{  
    458          		LCD_DrawPoint(uRow,uCol);//»­µã 
   \                     ??LCD_DrawLine_10:
   \   0000C1                ; Setup parameters for call to function LCD_DrawPoint
   \   0000C1   AC..         MOV     R4,?V0 + 14
   \   0000C3   AD..         MOV     R5,?V0 + 15
   \   0000C5   AA..         MOV     R2,?V0 + 12
   \   0000C7   AB..         MOV     R3,?V0 + 13
   \   0000C9   12....       LCALL   ??LCD_DrawPoint?relay
    459          		xerr+=delta_x ; 
   \   0000CC   E5..         MOV     A,?V0 + 10
   \   0000CE   25..         ADD     A,?V0 + 0
   \   0000D0   F5..         MOV     ?V0 + 10,A
   \   0000D2   E5..         MOV     A,?V0 + 11
   \   0000D4   35..         ADDC    A,?V0 + 1
   \   0000D6   F5..         MOV     ?V0 + 11,A
    460          		yerr+=delta_y ; 
   \   0000D8   E5..         MOV     A,?V0 + 8
   \   0000DA   2E           ADD     A,R6
   \   0000DB   F5..         MOV     ?V0 + 8,A
   \   0000DD   E5..         MOV     A,?V0 + 9
   \   0000DF   3F           ADDC    A,R7
   \   0000E0   F5..         MOV     ?V0 + 9,A
    461          		if(xerr>distance) 
   \   0000E2   C3           CLR     C
   \   0000E3   E5..         MOV     A,?V0 + 2
   \   0000E5   95..         SUBB    A,?V0 + 10
   \   0000E7   E5..         MOV     A,?V0 + 3
   \   0000E9   95..         SUBB    A,?V0 + 11
   \   0000EB   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0000ED   65D0         XRL     A,PSW
   \   0000EF   33           RLC     A
   \   0000F0   5019         JNC     ??LCD_DrawLine_11
    462          		{ 
    463          			xerr-=distance; 
   \   0000F2   C3           CLR     C
   \   0000F3   E5..         MOV     A,?V0 + 10
   \   0000F5   95..         SUBB    A,?V0 + 2
   \   0000F7   F5..         MOV     ?V0 + 10,A
   \   0000F9   E5..         MOV     A,?V0 + 11
   \   0000FB   95..         SUBB    A,?V0 + 3
   \   0000FD   F5..         MOV     ?V0 + 11,A
    464          			uRow+=incx; 
   \   0000FF   E5..         MOV     A,?V0 + 12
   \   000101   25..         ADD     A,?V0 + 6
   \   000103   F5..         MOV     ?V0 + 12,A
   \   000105   E5..         MOV     A,?V0 + 13
   \   000107   35..         ADDC    A,?V0 + 7
   \   000109   F5..         MOV     ?V0 + 13,A
    465          		} 
    466          		if(yerr>distance) 
   \                     ??LCD_DrawLine_11:
   \   00010B   C3           CLR     C
   \   00010C   E5..         MOV     A,?V0 + 2
   \   00010E   95..         SUBB    A,?V0 + 8
   \   000110   E5..         MOV     A,?V0 + 3
   \   000112   95..         SUBB    A,?V0 + 9
   \   000114   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000116   65D0         XRL     A,PSW
   \   000118   33           RLC     A
   \   000119   5019         JNC     ??LCD_DrawLine_12
    467          		{ 
    468          			yerr-=distance; 
   \   00011B   C3           CLR     C
   \   00011C   E5..         MOV     A,?V0 + 8
   \   00011E   95..         SUBB    A,?V0 + 2
   \   000120   F5..         MOV     ?V0 + 8,A
   \   000122   E5..         MOV     A,?V0 + 9
   \   000124   95..         SUBB    A,?V0 + 3
   \   000126   F5..         MOV     ?V0 + 9,A
    469          			uCol+=incy; 
   \   000128   E5..         MOV     A,?V0 + 14
   \   00012A   25..         ADD     A,?V0 + 4
   \   00012C   F5..         MOV     ?V0 + 14,A
   \   00012E   E5..         MOV     A,?V0 + 15
   \   000130   35..         ADDC    A,?V0 + 5
   \   000132   F5..         MOV     ?V0 + 15,A
    470          		} 
    471          	}  
   \                     ??LCD_DrawLine_12:
   \   000134   85..82       MOV     DPL,?XSP + 0
   \   000137   85..83       MOV     DPH,?XSP + 1
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   2401         ADD     A,#0x1
   \   00013D   F0           MOVX    @DPTR,A
   \   00013E   A3           INC     DPTR
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   3400         ADDC    A,#0x0
   \   000142   F0           MOVX    @DPTR,A
   \   000143   E5..         MOV     A,?V0 + 2
   \   000145   2401         ADD     A,#0x1
   \   000147   FA           MOV     R2,A
   \   000148   E5..         MOV     A,?V0 + 3
   \   00014A   3400         ADDC    A,#0x0
   \   00014C   FB           MOV     R3,A
   \   00014D   85..82       MOV     DPL,?XSP + 0
   \   000150   85..83       MOV     DPH,?XSP + 1
   \   000153   E0           MOVX    A,@DPTR
   \   000154   F8           MOV     R0,A
   \   000155   A3           INC     DPTR
   \   000156   E0           MOVX    A,@DPTR
   \   000157   F9           MOV     R1,A
   \   000158   C3           CLR     C
   \   000159   EA           MOV     A,R2
   \   00015A   98           SUBB    A,R0
   \   00015B   EB           MOV     A,R3
   \   00015C   99           SUBB    A,R1
   \   00015D   4003         JC      $+5
   \   00015F   02....       LJMP    ??LCD_DrawLine_10 & 0xFFFF
    472          }    
   \   000162   7402         MOV     A,#0x2
   \   000164                REQUIRE ?Subroutine5
   \   000164                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F10         MOV     R7,#0x10
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   EF           MOV     A,R7
   \   000001                REQUIRE ??Subroutine39_0
   \   000001                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   9400         SUBB    A,#0x0
   \   000002   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000004   65D0         XRL     A,PSW
   \   000006   33           RLC     A
   \   000007   22           RET
    473          
    474          //»­¾ØĞÎ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    475          void LCD_DrawRectangle(uint16 x1, uint16 y1, uint16 x2, uint16 y2)
   \                     LCD_DrawRectangle:
    476          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 4,R2
   \   000007   8B..         MOV     ?V0 + 5,R3
   \   000009   8C..         MOV     ?V0 + 6,R4
   \   00000B   8D..         MOV     ?V0 + 7,R5
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000015   7412         MOV     A,#0x12
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 1,A
    477          	LCD_DrawLine(x1,y1,x2,y1);
   \   000021                ; Setup parameters for call to function LCD_DrawLine
   \   000021   78..         MOV     R0,#?V0 + 6
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   78..         MOV     R0,#?V0 + 2
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002B   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
    478          	LCD_DrawLine(x1,y1,x1,y2);
   \   000031                ; Setup parameters for call to function LCD_DrawLine
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   78..         MOV     R0,#?V0 + 4
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   AC..         MOV     R4,?V0 + 6
   \   00003D   AD..         MOV     R5,?V0 + 7
   \   00003F   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    479          	LCD_DrawLine(x1,y2,x2,y2);
   \   000045                ; Setup parameters for call to function LCD_DrawLine
   \   000045   78..         MOV     R0,#?V0 + 0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   78..         MOV     R0,#?V0 + 2
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   AC..         MOV     R4,?V0 + 0
   \   000051   AD..         MOV     R5,?V0 + 1
   \   000053   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000056   12....       LCALL   ?DEALLOC_XSTACK8
    480          	LCD_DrawLine(x2,y1,x2,y2);
   \   000059                ; Setup parameters for call to function LCD_DrawLine
   \   000059   78..         MOV     R0,#?V0 + 0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   78..         MOV     R0,#?V0 + 2
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000063   AC..         MOV     R4,?V0 + 6
   \   000065   AD..         MOV     R5,?V0 + 7
   \   000067   AA..         MOV     R2,?V0 + 2
   \   000069   AB..         MOV     R3,?V0 + 3
   \   00006B   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    481          }
   \   000071                REQUIRE ?Subroutine6
   \   000071                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   AA..         MOV     R2,?V0 + 4
   \   000002   AB..         MOV     R3,?V0 + 5
   \   000004                REQUIRE ??Subroutine38_0
   \   000004                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   12....       LCALL   ??LCD_DrawLine?relay
   \   000003   7404         MOV     A,#0x4
   \   000005   22           RET
    482          
    483          //ÔÚÖ¸¶¨Î»ÖÃ»­Ò»¸öÖ¸¶¨´óĞ¡µÄÔ²
    484          //(x,y):ÖĞĞÄµã
    485          //r    :°ë¾¶

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    486          void Draw_Circle(uint16 x0,uint16 y0,uint8 r)
   \                     Draw_Circle:
    487          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   7402         MOV     A,#0x2
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E9           MOV     A,R1
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   8C..         MOV     ?V0 + 14,R4
   \   00001E   8D..         MOV     ?V0 + 15,R5
    488          	int a,b;
    489          	int di;
    490          	a=0;b=r;	  
   \   000020   75..00       MOV     ?V0 + 10,#0x0
   \   000023   75..00       MOV     ?V0 + 11,#0x0
   \   000026   F8           MOV     R0,A
   \   000027   88..         MOV     ?V0 + 12,R0
   \   000029   75..00       MOV     ?V0 + 13,#0x0
    491          	di=3-(r<<1);             //ÅĞ¶ÏÏÂ¸öµãÎ»ÖÃµÄ±êÖ¾
   \   00002C   C3           CLR     C
   \   00002D   33           RLC     A
   \   00002E   F8           MOV     R0,A
   \   00002F   E4           CLR     A
   \   000030   33           RLC     A
   \   000031   F9           MOV     R1,A
   \   000032   7403         MOV     A,#0x3
   \   000034   98           SUBB    A,R0
   \   000035   FE           MOV     R6,A
   \   000036   E4           CLR     A
   \   000037   99           SUBB    A,R1
   \   000038   FF           MOV     R7,A
   \   000039   8043         SJMP    ??Draw_Circle_0
    492          	while(a<=b)
    493          	{
    494          		LCD_DrawPoint(x0-b,y0-a);             //3           
    495          		LCD_DrawPoint(x0+b,y0-a);             //0           
    496          		LCD_DrawPoint(x0-a,y0+b);             //1       
    497          		LCD_DrawPoint(x0-b,y0-a);             //7           
    498          		LCD_DrawPoint(x0-a,y0-b);             //2             
    499          		LCD_DrawPoint(x0+b,y0+a);             //4               
    500          		LCD_DrawPoint(x0+a,y0-b);             //5
    501          		LCD_DrawPoint(x0+a,y0+b);             //6 
    502          		LCD_DrawPoint(x0-b,y0+a);             
    503          		a++;
    504          		//Ê¹ÓÃBresenhamËã·¨»­Ô²     
    505          		if(di<0)di +=4*a+6;	  
    506          		else
    507          		{
    508          			di+=10+4*(a-b);   
   \                     ??Draw_Circle_1:
   \   00003B   E5..         MOV     A,?V0 + 10
   \   00003D   C3           CLR     C
   \   00003E   95..         SUBB    A,?V0 + 12
   \   000040   F5..         MOV     ?V0 + 0,A
   \   000042   E5..         MOV     A,?V0 + 11
   \   000044   95..         SUBB    A,?V0 + 13
   \   000046   F5..         MOV     ?V0 + 1,A
   \   000048   7402         MOV     A,#0x2
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?S_SHL
   \   00004F   E5..         MOV     A,?V0 + 0
   \   000051   240A         ADD     A,#0xa
   \   000053   12....       LCALL   ?Subroutine29 & 0xFFFF
    509          			b--;
   \                     ??CrossCallReturnLabel_44:
   \   000056   E5..         MOV     A,?V0 + 12
   \   000058   24FF         ADD     A,#-0x1
   \   00005A   F5..         MOV     ?V0 + 12,A
   \   00005C   E5..         MOV     A,?V0 + 13
   \   00005E   34FF         ADDC    A,#-0x1
   \   000060   F5..         MOV     ?V0 + 13,A
    510          		} 
    511          		LCD_DrawPoint(x0+a,y0+b);
   \                     ??Draw_Circle_2:
   \   000062                ; Setup parameters for call to function LCD_DrawPoint
   \   000062   E5..         MOV     A,?V0 + 14
   \   000064   25..         ADD     A,?V0 + 12
   \   000066   FC           MOV     R4,A
   \   000067   E5..         MOV     A,?V0 + 15
   \   000069   35..         ADDC    A,?V0 + 13
   \   00006B   FD           MOV     R5,A
   \   00006C   85..82       MOV     DPL,?XSP + 0
   \   00006F   85..83       MOV     DPH,?XSP + 1
   \   000072   E0           MOVX    A,@DPTR
   \   000073   25..         ADD     A,?V0 + 10
   \   000075   FA           MOV     R2,A
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   35..         ADDC    A,?V0 + 11
   \   00007A   FB           MOV     R3,A
   \   00007B   12....       LCALL   ??LCD_DrawPoint?relay
   \                     ??Draw_Circle_0:
   \   00007E   C3           CLR     C
   \   00007F   E5..         MOV     A,?V0 + 12
   \   000081   95..         SUBB    A,?V0 + 10
   \   000083   E5..         MOV     A,?V0 + 13
   \   000085   95..         SUBB    A,?V0 + 11
   \   000087   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000089   65D0         XRL     A,PSW
   \   00008B   33           RLC     A
   \   00008C   5003         JNC     $+5
   \   00008E   02....       LJMP    ??Draw_Circle_3 & 0xFFFF
   \   000091   85..82       MOV     DPL,?XSP + 0
   \   000094   85..83       MOV     DPH,?XSP + 1
   \   000097   E0           MOVX    A,@DPTR
   \   000098   C3           CLR     C
   \   000099   95..         SUBB    A,?V0 + 12
   \   00009B   F5..         MOV     ?V0 + 8,A
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   95..         SUBB    A,?V0 + 13
   \   0000A1   F5..         MOV     ?V0 + 9,A
   \   0000A3   E5..         MOV     A,?V0 + 14
   \   0000A5   C3           CLR     C
   \   0000A6   95..         SUBB    A,?V0 + 10
   \   0000A8   F5..         MOV     ?V0 + 0,A
   \   0000AA   E5..         MOV     A,?V0 + 15
   \   0000AC   95..         SUBB    A,?V0 + 11
   \   0000AE   F5..         MOV     ?V0 + 1,A
   \   0000B0                ; Setup parameters for call to function LCD_DrawPoint
   \   0000B0   AC..         MOV     R4,?V0 + 0
   \   0000B2   FD           MOV     R5,A
   \   0000B3   AA..         MOV     R2,?V0 + 8
   \   0000B5   AB..         MOV     R3,?V0 + 9
   \   0000B7   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000BA   25..         ADD     A,?V0 + 12
   \   0000BC   F5..         MOV     ?V0 + 4,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   35..         ADDC    A,?V0 + 13
   \   0000C2   F5..         MOV     ?V0 + 5,A
   \   0000C4                ; Setup parameters for call to function LCD_DrawPoint
   \   0000C4   AC..         MOV     R4,?V0 + 0
   \   0000C6   AD..         MOV     R5,?V0 + 1
   \   0000C8   AA..         MOV     R2,?V0 + 4
   \   0000CA   FB           MOV     R3,A
   \   0000CB   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000CE   C3           CLR     C
   \   0000CF   95..         SUBB    A,?V0 + 10
   \   0000D1   F5..         MOV     ?V0 + 2,A
   \   0000D3   A3           INC     DPTR
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   95..         SUBB    A,?V0 + 11
   \   0000D7   F5..         MOV     ?V0 + 3,A
   \   0000D9   E5..         MOV     A,?V0 + 14
   \   0000DB   25..         ADD     A,?V0 + 12
   \   0000DD   F5..         MOV     ?V0 + 6,A
   \   0000DF   E5..         MOV     A,?V0 + 15
   \   0000E1   35..         ADDC    A,?V0 + 13
   \   0000E3   F5..         MOV     ?V0 + 7,A
   \   0000E5                ; Setup parameters for call to function LCD_DrawPoint
   \   0000E5   AC..         MOV     R4,?V0 + 6
   \   0000E7   FD           MOV     R5,A
   \   0000E8   AA..         MOV     R2,?V0 + 2
   \   0000EA   AB..         MOV     R3,?V0 + 3
   \   0000EC   12....       LCALL   ??LCD_DrawPoint?relay
   \   0000EF                ; Setup parameters for call to function LCD_DrawPoint
   \   0000EF   AC..         MOV     R4,?V0 + 0
   \   0000F1   AD..         MOV     R5,?V0 + 1
   \   0000F3   AA..         MOV     R2,?V0 + 8
   \   0000F5   AB..         MOV     R3,?V0 + 9
   \   0000F7   12....       LCALL   ??LCD_DrawPoint?relay
   \   0000FA   E5..         MOV     A,?V0 + 14
   \   0000FC   C3           CLR     C
   \   0000FD   95..         SUBB    A,?V0 + 12
   \   0000FF   F5..         MOV     ?V0 + 0,A
   \   000101   E5..         MOV     A,?V0 + 15
   \   000103   95..         SUBB    A,?V0 + 13
   \   000105   F5..         MOV     ?V0 + 1,A
   \   000107                ; Setup parameters for call to function LCD_DrawPoint
   \   000107   AC..         MOV     R4,?V0 + 0
   \   000109   FD           MOV     R5,A
   \   00010A   AA..         MOV     R2,?V0 + 2
   \   00010C   AB..         MOV     R3,?V0 + 3
   \   00010E   12....       LCALL   ??LCD_DrawPoint?relay
   \   000111   E5..         MOV     A,?V0 + 14
   \   000113   25..         ADD     A,?V0 + 10
   \   000115   F5..         MOV     ?V0 + 2,A
   \   000117   E5..         MOV     A,?V0 + 15
   \   000119   35..         ADDC    A,?V0 + 11
   \   00011B   F5..         MOV     ?V0 + 3,A
   \   00011D                ; Setup parameters for call to function LCD_DrawPoint
   \   00011D   AC..         MOV     R4,?V0 + 2
   \   00011F   FD           MOV     R5,A
   \   000120   AA..         MOV     R2,?V0 + 4
   \   000122   AB..         MOV     R3,?V0 + 5
   \   000124   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000127   25..         ADD     A,?V0 + 10
   \   000129   F5..         MOV     ?V0 + 4,A
   \   00012B   A3           INC     DPTR
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   35..         ADDC    A,?V0 + 11
   \   00012F   F5..         MOV     ?V0 + 5,A
   \   000131                ; Setup parameters for call to function LCD_DrawPoint
   \   000131   AC..         MOV     R4,?V0 + 0
   \   000133   AD..         MOV     R5,?V0 + 1
   \   000135   AA..         MOV     R2,?V0 + 4
   \   000137   FB           MOV     R3,A
   \   000138   12....       LCALL   ??LCD_DrawPoint?relay
   \   00013B                ; Setup parameters for call to function LCD_DrawPoint
   \   00013B   AC..         MOV     R4,?V0 + 6
   \   00013D   AD..         MOV     R5,?V0 + 7
   \   00013F   AA..         MOV     R2,?V0 + 4
   \   000141   AB..         MOV     R3,?V0 + 5
   \   000143   12....       LCALL   ??LCD_DrawPoint?relay
   \   000146                ; Setup parameters for call to function LCD_DrawPoint
   \   000146   AC..         MOV     R4,?V0 + 2
   \   000148   AD..         MOV     R5,?V0 + 3
   \   00014A   AA..         MOV     R2,?V0 + 8
   \   00014C   AB..         MOV     R3,?V0 + 9
   \   00014E   12....       LCALL   ??LCD_DrawPoint?relay
   \   000151   E5..         MOV     A,?V0 + 10
   \   000153   2401         ADD     A,#0x1
   \   000155   F5..         MOV     ?V0 + 10,A
   \   000157   E5..         MOV     A,?V0 + 11
   \   000159   3400         ADDC    A,#0x0
   \   00015B   F5..         MOV     ?V0 + 11,A
   \   00015D   C3           CLR     C
   \   00015E   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000161   4003         JC      $+5
   \   000163   02....       LJMP    ??Draw_Circle_1 & 0xFFFF
   \   000166   85....       MOV     ?V0 + 0,?V0 + 10
   \   000169   85....       MOV     ?V0 + 1,?V0 + 11
   \   00016C   7402         MOV     A,#0x2
   \   00016E   78..         MOV     R0,#?V0 + 0
   \   000170   12....       LCALL   ?S_SHL
   \   000173   E5..         MOV     A,?V0 + 0
   \   000175   2406         ADD     A,#0x6
   \   000177   12....       LCALL   ?Subroutine29 & 0xFFFF
    512          	}
   \                     ??CrossCallReturnLabel_45:
   \   00017A   02....       LJMP    ??Draw_Circle_2 & 0xFFFF
    513          } 
   \                     ??Draw_Circle_3:
   \   00017D   7403         MOV     A,#0x3
   \   00017F   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ??LCD_DrawPoint?relay
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F8           MOV     R0,A
   \   000001   E5..         MOV     A,?V0 + 1
   \   000003   3400         ADDC    A,#0x0
   \   000005   F9           MOV     R1,A
   \   000006   EE           MOV     A,R6
   \   000007   28           ADD     A,R0
   \   000008   FE           MOV     R6,A
   \   000009   EF           MOV     A,R7
   \   00000A   39           ADDC    A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   22           RET
    514          
    515          //ÔÚÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸ö×Ö·û
    516          //num:ÒªÏÔÊ¾µÄ×Ö·û:" "--->"~"
    517          //mode:µş¼Ó·½Ê½(1)»¹ÊÇ·Çµş¼Ó·½Ê½(0)

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    518          void LCD_ShowChar(uint16 x,uint16 y,uint8 num,uint8 mode)
   \                     LCD_ShowChar:
    519          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   89..         MOV     ?V0 + 4,R1
   \   00000F   7412         MOV     A,#0x12
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 5,A
    520              uint8 temp;
    521              uint8 pos,t;
    522              uint16 x0=x;
    523              y=y;
    524              uint16 colortemp=POINT_COLOR;      
   \   000017   90....       MOV     DPTR,#POINT_COLOR
   \   00001A   12....       LCALL   ?Subroutine18 & 0xFFFF
    525              if(x>LCD_W-8||y>LCD_H-16)return;	    
   \                     ??CrossCallReturnLabel_29:
   \   00001D   C3           CLR     C
   \   00001E   EA           MOV     A,R2
   \   00001F   947B         SUBB    A,#0x7b
   \   000021   EB           MOV     A,R3
   \   000022   9400         SUBB    A,#0x0
   \   000024   4003         JC      $+5
   \   000026   02....       LJMP    ??LCD_ShowChar_0 & 0xFFFF
   \   000029   C3           CLR     C
   \   00002A   EE           MOV     A,R6
   \   00002B   9475         SUBB    A,#0x75
   \   00002D   EF           MOV     A,R7
   \   00002E   9400         SUBB    A,#0x0
   \   000030   4003         JC      $+5
   \   000032   02....       LJMP    ??LCD_ShowChar_0 & 0xFFFF
    526          	//ÉèÖÃ´°¿Ú		   
    527          	num=num-' ';//µÃµ½Æ«ÒÆºóµÄÖµ
   \   000035   74E0         MOV     A,#-0x20
   \   000037   25..         ADD     A,?V0 + 4
   \   000039   F5..         MOV     ?V0 + 4,A
    528          	Address_set(x,y,x+8-1,y+16-1);      //ÉèÖÃ¹â±êÎ»ÖÃ 
   \   00003B                ; Setup parameters for call to function Address_set
   \   00003B   EE           MOV     A,R6
   \   00003C   240F         ADD     A,#0xf
   \   00003E   F5..         MOV     ?V0 + 6,A
   \   000040   EF           MOV     A,R7
   \   000041   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   EA           MOV     A,R2
   \   000048   2407         ADD     A,#0x7
   \   00004A   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
    529          	if(!mode) //·Çµş¼Ó·½Ê½
   \   000056   E5..         MOV     A,?V0 + 5
   \   000058   75..00       MOV     ?V0 + 5,#0x0
   \   00005B   705D         JNZ     ??LCD_ShowChar_1
    530          	{
    531          		for(pos=0;pos<16;pos++)
    532          		{ 
    533          		  temp=asc2_1608[(uint16)num*16+pos];		 //µ÷ÓÃ1608×ÖÌå
   \                     ??LCD_ShowChar_2:
   \   00005D   85....       MOV     ?V0 + 6,?V0 + 4
   \   000060   75..00       MOV     ?V0 + 7,#0x0
   \   000063   7404         MOV     A,#0x4
   \   000065   78..         MOV     R0,#?V0 + 6
   \   000067   12....       LCALL   ?S_SHL
   \   00006A   85....       MOV     ?V0 + 0,?V0 + 5
   \   00006D   E5..         MOV     A,?V0 + 6
   \   00006F   25..         ADD     A,?V0 + 0
   \   000071   F8           MOV     R0,A
   \   000072   E5..         MOV     A,?V0 + 7
   \   000074   12....       LCALL   ?Subroutine26 & 0xFFFF
    534          	          for(t=0;t<8;t++)
   \                     ??CrossCallReturnLabel_40:
   \   000077   7E08         MOV     R6,#0x8
    535          		    {                 
    536          		        if(temp&0x01)POINT_COLOR=colortemp;
   \                     ??LCD_ShowChar_3:
   \   000079   E5..         MOV     A,?V0 + 9
   \   00007B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00007D   500B         JNC     ??LCD_ShowChar_4
   \   00007F   90....       MOV     DPTR,#POINT_COLOR
   \   000082   E5..         MOV     A,?V0 + 2
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   E5..         MOV     A,?V0 + 3
   \   000088   800F         SJMP    ??LCD_ShowChar_5
    537          				else POINT_COLOR=BACK_COLOR;
   \                     ??LCD_ShowChar_4:
   \   00008A   90....       MOV     DPTR,#BACK_COLOR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F8           MOV     R0,A
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F9           MOV     R1,A
   \   000092   90....       MOV     DPTR,#POINT_COLOR
   \   000095   E8           MOV     A,R0
   \   000096   F0           MOVX    @DPTR,A
   \   000097   A3           INC     DPTR
   \   000098   E9           MOV     A,R1
   \                     ??LCD_ShowChar_5:
   \   000099   F0           MOVX    @DPTR,A
    538          				LCD_WR_DATA(POINT_COLOR);	
   \   00009A                ; Setup parameters for call to function LCD_WR_DATA
   \   00009A   90....       MOV     DPTR,#POINT_COLOR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   FA           MOV     R2,A
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   FB           MOV     R3,A
   \   0000A2   12....       LCALL   ??LCD_WR_DATA?relay
    539          				temp>>=1; 
   \   0000A5   E5..         MOV     A,?V0 + 9
   \   0000A7   C3           CLR     C
   \   0000A8   13           RRC     A
   \   0000A9   F5..         MOV     ?V0 + 9,A
    540          				x++;
    541          		    }
   \   0000AB   1E           DEC     R6
   \   0000AC   EE           MOV     A,R6
   \   0000AD   70CA         JNZ     ??LCD_ShowChar_3
    542          			x=x0;
    543          			y++;
    544          		}	
   \   0000AF   05..         INC     ?V0 + 5
   \   0000B1   E5..         MOV     A,?V0 + 5
   \   0000B3   C3           CLR     C
   \   0000B4   9410         SUBB    A,#0x10
   \   0000B6   5058         JNC     ??LCD_ShowChar_6
   \   0000B8   80A3         SJMP    ??LCD_ShowChar_2
    545          	}else//µş¼Ó·½Ê½
    546          	{
    547          		for(pos=0;pos<16;pos++)
    548          		{
    549          		    temp=asc2_1608[(uint16)num*16+pos];		 //µ÷ÓÃ1608×ÖÌå
   \                     ??LCD_ShowChar_1:
   \   0000BA   85....       MOV     ?V0 + 8,?V0 + 4
   \   0000BD   75..00       MOV     ?V0 + 9,#0x0
   \   0000C0   7404         MOV     A,#0x4
   \   0000C2   78..         MOV     R0,#?V0 + 8
   \   0000C4   12....       LCALL   ?S_SHL
   \   0000C7   85....       MOV     ?V0 + 6,?V0 + 5
   \   0000CA   E5..         MOV     A,?V0 + 8
   \   0000CC   25..         ADD     A,?V0 + 6
   \   0000CE   F8           MOV     R0,A
   \   0000CF   E5..         MOV     A,?V0 + 9
   \   0000D1   12....       LCALL   ?Subroutine26 & 0xFFFF
    550          			for(t=0;t<8;t++)
   \                     ??CrossCallReturnLabel_41:
   \   0000D4   75..00       MOV     ?V0 + 8,#0x0
    551          		    {                 
    552          		        if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//»­Ò»¸öµã     
   \                     ??LCD_ShowChar_7:
   \   0000D7   E5..         MOV     A,?V0 + 9
   \   0000D9   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000DB   501B         JNC     ??LCD_ShowChar_8
   \   0000DD                ; Setup parameters for call to function LCD_DrawPoint
   \   0000DD   85....       MOV     ?V0 + 6,?V0 + 5
   \   0000E0   EE           MOV     A,R6
   \   0000E1   25..         ADD     A,?V0 + 6
   \   0000E3   FC           MOV     R4,A
   \   0000E4   EF           MOV     A,R7
   \   0000E5   3400         ADDC    A,#0x0
   \   0000E7   FD           MOV     R5,A
   \   0000E8   85....       MOV     ?V0 + 6,?V0 + 8
   \   0000EB   E5..         MOV     A,?V0 + 0
   \   0000ED   25..         ADD     A,?V0 + 6
   \   0000EF   FA           MOV     R2,A
   \   0000F0   E5..         MOV     A,?V0 + 1
   \   0000F2   3400         ADDC    A,#0x0
   \   0000F4   FB           MOV     R3,A
   \   0000F5   12....       LCALL   ??LCD_DrawPoint?relay
    553          		        temp>>=1; 
   \                     ??LCD_ShowChar_8:
   \   0000F8   E5..         MOV     A,?V0 + 9
   \   0000FA   C3           CLR     C
   \   0000FB   13           RRC     A
   \   0000FC   F5..         MOV     ?V0 + 9,A
    554          		    }
   \   0000FE   05..         INC     ?V0 + 8
   \   000100   E5..         MOV     A,?V0 + 8
   \   000102   C3           CLR     C
   \   000103   9408         SUBB    A,#0x8
   \   000105   40D0         JC      ??LCD_ShowChar_7
    555          		}
   \   000107   05..         INC     ?V0 + 5
   \   000109   E5..         MOV     A,?V0 + 5
   \   00010B   C3           CLR     C
   \   00010C   9410         SUBB    A,#0x10
   \   00010E   40AA         JC      ??LCD_ShowChar_1
    556          	}
    557          	POINT_COLOR=colortemp;	
   \                     ??LCD_ShowChar_6:
   \   000110   90....       MOV     DPTR,#POINT_COLOR
   \   000113   E5..         MOV     A,?V0 + 2
   \   000115   F0           MOVX    @DPTR,A
   \   000116   A3           INC     DPTR
   \   000117   E5..         MOV     A,?V0 + 3
   \   000119   F0           MOVX    @DPTR,A
    558          }
   \                     ??LCD_ShowChar_0:
   \   00011A   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   74..         MOV     A,#asc2_1608 & 0xff
   \   000005   28           ADD     A,R0
   \   000006   F582         MOV     DPL,A
   \   000008   74..         MOV     A,#(asc2_1608 >> 8) & 0xff
   \   00000A   39           ADDC    A,R1
   \   00000B   F583         MOV     DPH,A
   \   00000D   E4           CLR     A
   \   00000E   93           MOVC    A,@A+DPTR
   \   00000F   F5..         MOV     ?V0 + 9,A
   \   000011   22           RET
    559          
    560          //m^nº¯Êı

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    561          unsigned int mypow(uint8 m,uint8 n)
   \                     mypow:
    562          {
   \   000000                ; Saved register size: 2
   \   000000                ; Auto size: 0
   \   000000   EA           MOV     A,R2
   \   000001   F8           MOV     R0,A
    563          	unsigned int result=1;	 
   \   000002   7A01         MOV     R2,#0x1
   \   000004   7B00         MOV     R3,#0x0
   \   000006   800D         SJMP    ??mypow_0
    564          	while(n--)result*=m;    
   \                     ??mypow_1:
   \   000008   EA           MOV     A,R2
   \   000009   89F0         MOV     B,R1
   \   00000B   A4           MUL     AB
   \   00000C   FA           MOV     R2,A
   \   00000D   ACF0         MOV     R4,B
   \   00000F   89F0         MOV     B,R1
   \   000011   EB           MOV     A,R3
   \   000012   A4           MUL     AB
   \   000013   2C           ADD     A,R4
   \   000014   FB           MOV     R3,A
   \                     ??mypow_0:
   \   000015   E8           MOV     A,R0
   \   000016   FC           MOV     R4,A
   \   000017   74FF         MOV     A,#-0x1
   \   000019   2C           ADD     A,R4
   \   00001A   18           DEC     R0
   \   00001B   04           INC     A
   \   00001C   70EA         JNZ     ??mypow_1
    565          	return result;
   \   00001E   02....       LJMP    ?BRET
    566          }			 
    567          
    568          //ÏÔÊ¾2¸öÊı×Ö
    569          //x,y :Æğµã×ø±ê	 
    570          //len :Êı×ÖµÄÎ»Êı
    571          //color:ÑÕÉ«
    572          //num:ÊıÖµ(0~4294967295);	

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    573          void LCD_ShowNum(uint16 x,uint16 y,unsigned int num,uint8 len)
   \                     LCD_ShowNum:
    574          {         	
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 6,R2
   \   000007   8B..         MOV     ?V0 + 7,R3
   \   000009   8C..         MOV     ?V0 + 4,R4
   \   00000B   8D..         MOV     ?V0 + 5,R5
   \   00000D   89..         MOV     ?V0 + 2,R1
   \   00000F   7414         MOV     A,#0x14
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine15 & 0xFFFF
    575          	uint8 t,temp;
    576          	uint8 enshow=0;
   \                     ??CrossCallReturnLabel_19:
   \   000017   75..00       MOV     ?V0 + 1,#0x0
    577          	num=(uint16)num;
    578          	for(t=0;t<len;t++)
   \   00001A   75..00       MOV     ?V0 + 0,#0x0
   \   00001D   8034         SJMP    ??LCD_ShowNum_0
    579          	{
    580          		temp=(num/mypow(10,len-t-1))%10;
    581          		if(enshow==0&&t<(len-1))
    582          		{
    583          			if(temp==0)
    584          			{
    585          				LCD_ShowChar(x+8*t,y,' ',0);
    586          				continue;
    587          			}else enshow=1; 
   \                     ??LCD_ShowNum_1:
   \   00001F   75..01       MOV     ?V0 + 1,#0x1
    588          		 	 
    589          		}
    590          	 	LCD_ShowChar(x+8*t,y,temp+48,0); 
   \                     ??LCD_ShowNum_2:
   \   000022                ; Setup parameters for call to function LCD_ShowChar
   \   000022   75..00       MOV     ?V0 + 3,#0x0
   \   000025   78..         MOV     R0,#?V0 + 3
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002A   7430         MOV     A,#0x30
   \   00002C   2A           ADD     A,R2
   \   00002D   F9           MOV     R1,A
   \   00002E   AC..         MOV     R4,?V0 + 4
   \   000030   AD..         MOV     R5,?V0 + 5
   \   000032   85....       MOV     ?V0 + 8,?V0 + 0
   \                     ??LCD_ShowNum_3:
   \   000035   75..00       MOV     ?V0 + 9,#0x0
   \   000038   7403         MOV     A,#0x3
   \   00003A   78..         MOV     R0,#?V0 + 8
   \   00003C   12....       LCALL   ?S_SHL
   \   00003F   E5..         MOV     A,?V0 + 6
   \   000041   25..         ADD     A,?V0 + 8
   \   000043   FA           MOV     R2,A
   \   000044   E5..         MOV     A,?V0 + 7
   \   000046   35..         ADDC    A,?V0 + 9
   \   000048   FB           MOV     R3,A
   \   000049   12....       LCALL   ??LCD_ShowChar?relay
   \   00004C   7401         MOV     A,#0x1
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000051   05..         INC     ?V0 + 0
   \                     ??LCD_ShowNum_0:
   \   000053   E5..         MOV     A,?V0 + 0
   \   000055   C3           CLR     C
   \   000056   95..         SUBB    A,?V0 + 2
   \   000058   5042         JNC     ??LCD_ShowNum_4
   \   00005A                ; Setup parameters for call to function mypow
   \   00005A   E5..         MOV     A,?V0 + 2
   \   00005C   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00005F   12....       LCALL   ?US_DIV_MOD
   \   000062   7A0A         MOV     R2,#0xa
   \   000064   7B00         MOV     R3,#0x0
   \   000066   12....       LCALL   ?US_DIV_MOD
   \   000069   E5..         MOV     A,?V0 + 1
   \   00006B   70B5         JNZ     ??LCD_ShowNum_2
   \   00006D   85....       MOV     ?V0 + 8,?V0 + 0
   \   000070   85....       MOV     ?V0 + 10,?V0 + 2
   \   000073   E5..         MOV     A,?V0 + 10
   \   000075   24FF         ADD     A,#-0x1
   \   000077   F8           MOV     R0,A
   \   000078   E4           CLR     A
   \   000079   34FF         ADDC    A,#-0x1
   \   00007B   F9           MOV     R1,A
   \   00007C   C3           CLR     C
   \   00007D   E5..         MOV     A,?V0 + 8
   \   00007F   98           SUBB    A,R0
   \   000080   E4           CLR     A
   \   000081   99           SUBB    A,R1
   \   000082   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000084   65D0         XRL     A,PSW
   \   000086   33           RLC     A
   \   000087   5099         JNC     ??LCD_ShowNum_2
   \   000089   EA           MOV     A,R2
   \   00008A   7093         JNZ     ??LCD_ShowNum_1
   \   00008C                ; Setup parameters for call to function LCD_ShowChar
   \   00008C   75..00       MOV     ?V0 + 3,#0x0
   \   00008F   78..         MOV     R0,#?V0 + 3
   \   000091   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000094   7920         MOV     R1,#0x20
   \   000096   AC..         MOV     R4,?V0 + 4
   \   000098   AD..         MOV     R5,?V0 + 5
   \   00009A   8099         SJMP    ??LCD_ShowNum_3
    591          	}
    592          } 
   \                     ??LCD_ShowNum_4:
   \   00009C   7F0C         MOV     R7,#0xc
   \   00009E   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   C3           CLR     C
   \   000001   95..         SUBB    A,?V0 + 0
   \   000003   14           DEC     A
   \   000004   FA           MOV     R2,A
   \   000005   790A         MOV     R1,#0xa
   \   000007   12....       LCALL   ??mypow?relay
   \   00000A   EE           MOV     A,R6
   \   00000B   F8           MOV     R0,A
   \   00000C   EF           MOV     A,R7
   \   00000D   F9           MOV     R1,A
   \   00000E   22           RET
    593          
    594          //ÏÔÊ¾2¸öÊı×Ö
    595          //x,y:Æğµã×ø±ê
    596          //num:ÊıÖµ(0~99);	 

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    597          void LCD_Show2Num(uint16 x,uint16 y,uint16 num,uint8 len)
   \                     LCD_Show2Num:
    598          {         	
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 4,R2
   \   000007   8B..         MOV     ?V0 + 5,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   89..         MOV     ?V0 + 1,R1
   \   00000F   7410         MOV     A,#0x10
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine15 & 0xFFFF
    599          	uint8 t,temp;						   
    600          	for(t=0;t<len;t++)
   \                     ??CrossCallReturnLabel_20:
   \   000017   75..00       MOV     ?V0 + 0,#0x0
   \   00001A   8040         SJMP    ??LCD_Show2Num_0
    601          	{
    602          		temp=(num/mypow(10,len-t-1))%10;
    603          	 	LCD_ShowChar(x+8*t,y,temp+'0',0); 
   \                     ??LCD_Show2Num_1:
   \   00001C                ; Setup parameters for call to function LCD_ShowChar
   \   00001C   75..00       MOV     ?V0 + 6,#0x0
   \   00001F   78..         MOV     R0,#?V0 + 6
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000024                ; Setup parameters for call to function mypow
   \   000024   E5..         MOV     A,?V0 + 1
   \   000026   12....       LCALL   ?Subroutine27 & 0xFFFF
    604          	}
   \                     ??CrossCallReturnLabel_43:
   \   000029   12....       LCALL   ?US_DIV_MOD
   \   00002C   7A0A         MOV     R2,#0xa
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   12....       LCALL   ?US_DIV_MOD
   \   000033   EA           MOV     A,R2
   \   000034   2430         ADD     A,#0x30
   \   000036   F9           MOV     R1,A
   \   000037   AC..         MOV     R4,?V0 + 2
   \   000039   AD..         MOV     R5,?V0 + 3
   \   00003B   85....       MOV     ?V0 + 6,?V0 + 0
   \   00003E   75..00       MOV     ?V0 + 7,#0x0
   \   000041   7403         MOV     A,#0x3
   \   000043   78..         MOV     R0,#?V0 + 6
   \   000045   12....       LCALL   ?S_SHL
   \   000048   E5..         MOV     A,?V0 + 4
   \   00004A   25..         ADD     A,?V0 + 6
   \   00004C   FA           MOV     R2,A
   \   00004D   E5..         MOV     A,?V0 + 5
   \   00004F   35..         ADDC    A,?V0 + 7
   \   000051   FB           MOV     R3,A
   \   000052   12....       LCALL   ??LCD_ShowChar?relay
   \   000055   7401         MOV     A,#0x1
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   05..         INC     ?V0 + 0
   \                     ??LCD_Show2Num_0:
   \   00005C   E5..         MOV     A,?V0 + 0
   \   00005E   C3           CLR     C
   \   00005F   95..         SUBB    A,?V0 + 1
   \   000061   40B9         JC      ??LCD_Show2Num_1
    605          } 
   \   000063   02....       LJMP    ?Subroutine6 & 0xFFFF
    606          
    607          //ÏÔÊ¾×Ö·û´®
    608          //x,y:Æğµã×ø±ê  
    609          //*p:×Ö·û´®ÆğÊ¼µØÖ·
    610          //ÓÃ16×ÖÌå

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    611          void LCD_ShowString(uint16 x,uint16 y,  const uint8 *p)
   \                     LCD_ShowString:
    612          {         
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   740D         MOV     A,#0xd
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000015   8067         SJMP    ??LCD_ShowString_0
    613              while(*p!='\0')
    614              {       
    615                  if(x>LCD_W-8){x=0;y+=16;}
   \                     ??LCD_ShowString_1:
   \   000017   C3           CLR     C
   \   000018   E5..         MOV     A,?V0 + 0
   \   00001A   947B         SUBB    A,#0x7b
   \   00001C   E5..         MOV     A,?V0 + 1
   \   00001E   9400         SUBB    A,#0x0
   \   000020   4012         JC      ??LCD_ShowString_2
   \   000022   75..00       MOV     ?V0 + 0,#0x0
   \   000025   75..00       MOV     ?V0 + 1,#0x0
   \   000028   E5..         MOV     A,?V0 + 2
   \   00002A   2410         ADD     A,#0x10
   \   00002C   F5..         MOV     ?V0 + 2,A
   \   00002E   E5..         MOV     A,?V0 + 3
   \   000030   3400         ADDC    A,#0x0
   \   000032   F5..         MOV     ?V0 + 3,A
    616                  if(y>LCD_H-16){y=x=0;}
   \                     ??LCD_ShowString_2:
   \   000034   C3           CLR     C
   \   000035   E5..         MOV     A,?V0 + 2
   \   000037   9475         SUBB    A,#0x75
   \   000039   E5..         MOV     A,?V0 + 3
   \   00003B   9400         SUBB    A,#0x0
   \   00003D   400C         JC      ??LCD_ShowString_3
   \   00003F   75..00       MOV     ?V0 + 0,#0x0
   \   000042   75..00       MOV     ?V0 + 1,#0x0
   \   000045   75..00       MOV     ?V0 + 2,#0x0
   \   000048   75..00       MOV     ?V0 + 3,#0x0
    617                  LCD_ShowChar(x,y,*p,0);
   \                     ??LCD_ShowString_3:
   \   00004B                ; Setup parameters for call to function LCD_ShowChar
   \   00004B   75..00       MOV     ?V0 + 4,#0x0
   \   00004E   78..         MOV     R0,#?V0 + 4
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   AC..         MOV     R4,?V0 + 2
   \   00005B   AD..         MOV     R5,?V0 + 3
   \   00005D   AA..         MOV     R2,?V0 + 0
   \   00005F   AB..         MOV     R3,?V0 + 1
   \   000061   12....       LCALL   ??LCD_ShowChar?relay
   \   000064   7401         MOV     A,#0x1
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
    618                  x+=8;
   \   000069   E5..         MOV     A,?V0 + 0
   \   00006B   2408         ADD     A,#0x8
   \   00006D   F5..         MOV     ?V0 + 0,A
   \   00006F   E5..         MOV     A,?V0 + 1
   \   000071   3400         ADDC    A,#0x0
   \   000073   F5..         MOV     ?V0 + 1,A
    619                  p++;
   \   000075   8E82         MOV     DPL,R6
   \   000077   8F83         MOV     DPH,R7
   \   000079   A3           INC     DPTR
   \   00007A   AE82         MOV     R6,DPL
   \   00007C   AF83         MOV     R7,DPH
    620              }  
   \                     ??LCD_ShowString_0:
   \   00007E   8E82         MOV     DPL,R6
   \   000080   8F83         MOV     DPH,R7
   \   000082   E0           MOVX    A,@DPTR
   \   000083   7092         JNZ     ??LCD_ShowString_1
    621          }
   \   000085                REQUIRE ?Subroutine7
   \   000085                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F05         MOV     R7,#0x5
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    622          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    623          void HalLcdWriteString(char *str, uint8 option)
   \                     HalLcdWriteString:
    624          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    625            LCD_ShowString(0, (option-1)*16, "                ");
   \   000009   E9           MOV     A,R1
   \   00000A   24FF         ADD     A,#-0x1
   \   00000C   F5..         MOV     ?V0 + 2,A
   \   00000E   E4           CLR     A
   \   00000F   34FF         ADDC    A,#-0x1
   \   000011   F5..         MOV     ?V0 + 3,A
   \   000013   7404         MOV     A,#0x4
   \   000015   78..         MOV     R0,#?V0 + 2
   \   000017   12....       LCALL   ?S_SHL
   \   00001A   AE..         MOV     R6,?V0 + 2
   \   00001C   AF..         MOV     R7,?V0 + 3
   \   00001E                ; Setup parameters for call to function LCD_ShowString
   \   00001E   75....       MOV     ?V0 + 2,#`?<Constant "                ">` & 0xff
   \   000021   75....       MOV     ?V0 + 3,#(`?<Constant "                ">` >> 8) & 0xff
   \   000024   78..         MOV     R0,#?V0 + 2
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   EE           MOV     A,R6
   \   00002A   FC           MOV     R4,A
   \   00002B   EF           MOV     A,R7
   \   00002C   FD           MOV     R5,A
   \   00002D   7A00         MOV     R2,#0x0
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   12....       LCALL   ??LCD_ShowString?relay
   \   000034   7402         MOV     A,#0x2
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
    626            LCD_ShowString(0, (option-1)*16, str);
                                                    ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "uint8 const *"
   \   000039                ; Setup parameters for call to function LCD_ShowString
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   EE           MOV     A,R6
   \   00003F   FC           MOV     R4,A
   \   000040   EF           MOV     A,R7
   \   000041   FD           MOV     R5,A
   \   000042   7A00         MOV     R2,#0x0
   \   000044   7B00         MOV     R3,#0x0
   \   000046   12....       LCALL   ??LCD_ShowString?relay
   \   000049   7402         MOV     A,#0x2
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
    627          }
   \   00004E   80..         SJMP    ?Subroutine7
    628          
    629          /**************************************************************************************************
    630           * @fn      HalLcdWriteStringValue
    631           *
    632           * @brief   Write a string followed by a value to the LCD
    633           *
    634           * @param   title  - Title that will be displayed before the value
    635           *          value  - value
    636           *          format - redix
    637           *          line   - line number
    638           *
    639           * @return  None
    640           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    641          void HalLcdWriteStringValue( char *title, uint16 value, uint8 format, uint8 line )
   \                     HalLcdWriteStringValue:
    642          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    643          #if (HAL_LCD == TRUE)
    644            uint8 tmpLen;
    645            uint8 buf[HAL_LCD_MAX_BUFF];
    646            uint32 err;
    647          
    648            tmpLen = (uint8)osal_strlen( (char*)title );
    649            osal_memcpy( buf, title, tmpLen );
    650            buf[tmpLen] = ' ';
    651            err = (uint32)(value);
    652            _ltoa( err, &buf[tmpLen+1], format );
    653            HalLcdWriteString( (char*)buf, line );		
    654          #endif
    655          }
   \   000000   02....       LJMP    ?BRET
    656          
    657          /**************************************************************************************************
    658           * @fn      HalLcdWriteStringValue
    659           *
    660           * @brief   Write a string followed by a value to the LCD
    661           *
    662           * @param   title   - Title that will be displayed before the value
    663           *          value1  - value #1
    664           *          format1 - redix of value #1
    665           *          value2  - value #2
    666           *          format2 - redix of value #2
    667           *          line    - line number
    668           *
    669           * @return  None
    670           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    671          void HalLcdWriteStringValueValue( char *title, uint16 value1, uint8 format1,
   \                     HalLcdWriteStringValueValue:
    672                                            uint16 value2, uint8 format2, uint8 line )
    673          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    674          
    675          #if (HAL_LCD == TRUE)
    676          
    677            uint8 tmpLen;
    678            uint8 buf[HAL_LCD_MAX_BUFF];
    679            uint32 err;
    680          
    681            tmpLen = (uint8)osal_strlen( (char*)title );
    682            if ( tmpLen )
    683            {
    684              osal_memcpy( buf, title, tmpLen );
    685              buf[tmpLen++] = ' ';
    686            }
    687          
    688            err = (uint32)(value1);
    689            _ltoa( err, &buf[tmpLen], format1 );
    690            tmpLen = (uint8)osal_strlen( (char*)buf );
    691          
    692            buf[tmpLen++] = ',';
    693            buf[tmpLen++] = ' ';
    694            err = (uint32)(value2);
    695            _ltoa( err, &buf[tmpLen], format2 );
    696          
    697            HalLcdWriteString( (char *)buf, line );		
    698          
    699          #endif
    700          }
   \   000000   02....       LJMP    ?BRET
    701          
    702          /**************************************************************************************************
    703           * @fn      HalLcdWriteScreen
    704           *
    705           * @brief   Write a value to the LCD
    706           *
    707           * @param   line1  - string that will be displayed on line 1
    708           *          line2  - string that will be displayed on line 2
    709           *
    710           * @return  None
    711           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    712          void HalLcdWriteScreen( char *line1, char *line2 )
   \                     HalLcdWriteScreen:
    713          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    714          #if (HAL_LCD == TRUE)
    715            HalLcdWriteString( line1, 1 );
    716            HalLcdWriteString( line2, 2 );
    717          #endif
    718          }
   \   000000   02....       LJMP    ?BRET
    719          
    720          /**************************************************************************************************
    721           * @fn      HalLcdWriteValue
    722           *
    723           * @brief   Write a value to the LCD
    724           *
    725           * @param   value  - value that will be displayed
    726           *          radix  - 8, 10, 16
    727           *          option - display options
    728           *
    729           * @return  None
    730           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    731          void HalLcdWriteValue ( uint32 value, const uint8 radix, uint8 option)
   \                     HalLcdWriteValue:
    732          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    733          #if (HAL_LCD == TRUE)
    734            uint8 buf[HAL_LCD_MAX_BUFF];
    735          
    736            _ltoa( value, &buf[0], radix );
    737            HalLcdWriteString( (char*)buf, option );
    738          #endif
    739          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_DLY_ms?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_DLY_ms

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_Wrtie_Bus?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_Wrtie_Bus

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_WR_DATA8?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_WR_DATA8

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_WR_DATA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_WR_DATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_WR_REG?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_WR_REG

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_WR_REG_DATA?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_WR_REG_DATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Address_set?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Address_set

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_Clear?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_Clear

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcd_HW_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcd_HW_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??showhanzi24x24?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    showhanzi24x24

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??showhanzi16x16?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    showhanzi16x16

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_DrawPoint?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_DrawPoint

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_DrawPoint_big?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_DrawPoint_big

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??DispPic?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    DispPic

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_Fill?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_Fill

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_DrawLine?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_DrawLine

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_DrawRectangle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_DrawRectangle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Draw_Circle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Draw_Circle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_ShowChar?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_ShowChar

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??mypow?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    mypow

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_ShowNum?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_ShowNum

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_Show2Num?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_Show2Num

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??LCD_ShowString?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    LCD_ShowString

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteString?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteString

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteStringValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteStringValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteStringValueValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteStringValueValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteScreen?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteScreen

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??HalLcdWriteValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLcdWriteValue

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "                ">`:
   \   000000   20202020     DB "                "
   \            20202020
   \            20202020
   \            20202020
   \            00      
    740          /*********************************************************************
    741           * @fn      Board_writeString
    742           *
    743           * @brief   Write a string on the LCD display.
    744           *
    745           * @param   str - string to print
    746           * @param   line - line (page) to write (0-7)
    747           *
    748           * @return  void
    749           *
    750          void Board_writeString(char *str, uint8_t line)
    751          {
    752            HalLcdWriteString( (char*)str, line );
    753          }
    754          
    755          static LCD_Handle lcdHandle = NULL;
    756          void Board_Lcd_writeStringValue(char *str, uint16_t value,
    757                                                 uint8_t format,
    758                                                 uint8_t line)
    759          {
    760            HalLcdWriteString( (char*)str, line );
    761            //LCD_writeLine(lcdHandle, 0, str, value, format, line);
    762          }*/

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     Address_set                     0      0     36
       -> LCD_WR_REG                 0      0     28
       -> LCD_WR_DATA8               0      0     28
       -> LCD_WR_DATA8               0      0     28
       -> LCD_WR_DATA8               0      0     28
       -> LCD_WR_DATA8               0      0     28
       -> LCD_WR_REG                 0      0     28
       -> LCD_WR_DATA8               0      0     28
       -> LCD_WR_DATA8               0      0     28
       -> LCD_WR_DATA8               0      0     28
       -> LCD_WR_DATA8               0      0     28
       -> LCD_WR_REG                 0      0     28
     DispPic                         0      0     16
       -> Address_set                0      0     32
       -> LCD_WR_DATA                0      0     24
       -> LCD_WR_DATA                0      0     24
     Draw_Circle                     1      0     27
       -> LCD_DrawPoint              0      0     54
       -> LCD_DrawPoint              0      0     54
       -> LCD_DrawPoint              0      0     54
       -> LCD_DrawPoint              0      0     54
       -> LCD_DrawPoint              0      0     54
       -> LCD_DrawPoint              0      0     54
       -> LCD_DrawPoint              0      0     54
       -> LCD_DrawPoint              0      0     54
       -> LCD_DrawPoint              0      0     54
       -> LCD_DrawPoint              0      0     54
     HalLcdInit                      2      0      0
       -> HalLcd_HW_Init             4      0      0
     HalLcdWriteScreen               0      0      0
     HalLcdWriteString               0      0     15
       -> LCD_ShowString             0      0     30
       -> LCD_ShowString             0      0     30
     HalLcdWriteStringValue          0      0      1
     HalLcdWriteStringValueValue     0      0      4
     HalLcdWriteValue                0      0      1
     HalLcd_HW_Init                  2      0      0
       -> LCD_DLY_ms                 4      0      0
       -> LCD_DLY_ms                 4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_DLY_ms                 4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_DLY_ms                 4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_WR_DATA8               4      0      0
       -> LCD_WR_REG                 4      0      0
       -> LCD_WR_REG                 4      0      0
     LCD_Clear                       0      0     14
       -> Address_set                0      0     28
       -> LCD_WR_DATA8               0      0     20
       -> LCD_WR_DATA8               0      0     20
     LCD_DLY_ms                      0      0      0
     LCD_DrawLine                    0      0     46
       -> LCD_DrawPoint              0      0     52
     LCD_DrawPoint                   0      0     41
       -> Address_set                0      0     28
       -> LCD_WR_DATA                0      0     20
     LCD_DrawPoint_big               0      0     16
       -> LCD_Fill                   0      0     32
     LCD_DrawRectangle               0      0     24
       -> LCD_DrawLine               0      0     40
       -> LCD_DrawLine               0      0     40
       -> LCD_DrawLine               0      0     40
       -> LCD_DrawLine               0      0     40
     LCD_Fill                        0      0     38
       -> Address_set                0      0     44
       -> LCD_WR_DATA                0      0     36
     LCD_Show2Num                    0      0     19
       -> mypow                      0      0     34
       -> LCD_ShowChar               0      0     34
     LCD_ShowChar                    0      0     43
       -> Address_set                0      0     44
       -> LCD_WR_DATA                0      0     36
       -> LCD_DrawPoint              0      0     36
     LCD_ShowNum                     0      0     23
       -> LCD_ShowChar               0      0     42
       -> mypow                      0      0     40
       -> LCD_ShowChar               0      0     42
     LCD_ShowString                  0      0     29
       -> LCD_ShowChar               0      0     28
     LCD_WR_DATA                     0      0     28
       -> LCD_Wrtie_Bus              0      0     20
       -> LCD_Wrtie_Bus              0      0     20
     LCD_WR_DATA8                    0      0     23
       -> LCD_Wrtie_Bus              0      0     18
     LCD_WR_REG                      0      0     23
       -> LCD_Wrtie_Bus              0      0     18
     LCD_WR_REG_DATA                 0      0      9
       -> LCD_WR_REG                 0      0     18
       -> LCD_WR_DATA                0      0     18
     LCD_Wrtie_Bus                   0      0     10
     mypow                           2      0     20
     showhanzi16x16                  0      0     27
       -> Address_set                0      0     42
       -> LCD_WR_DATA                0      0     34
       -> LCD_WR_DATA                0      0     34
     showhanzi24x24                  0      0     27
       -> Address_set                0      0     42
       -> LCD_WR_DATA                0      0     34
       -> LCD_WR_DATA                0      0     34


   Segment part sizes:

     Function/Label                      Bytes
     --------------                      -----
     _A_P1                                  1
     P1SEL                                  1
     P1DIR                                  1
     asc2_1608                           1520
     BACK_COLOR                             2
     POINT_COLOR                            2
     LCD_DLY_ms                            37
     LCD_Wrtie_Bus                         27
     LCD_WR_DATA8                           7
     ?Subroutine1                           3
     ??Subroutine35_0                       5
     LCD_WR_DATA                           35
     ?Subroutine2                           5
     LCD_WR_REG                             9
     LCD_WR_REG_DATA                       21
     Address_set                           82
     ?Subroutine21                         11
     ?Subroutine15                          6
     ?Subroutine18                          8
     LCD_Clear                             60
     ?Subroutine19                          6
     ??Subroutine37_0                       6
     HalLcdInit                             7
     ?Subroutine0                           7
     HalLcd_HW_Init                       313
     ?Subroutine24                          9
     ?Subroutine23                          9
     ?Subroutine22                          9
     ?Subroutine20                          9
     ?Subroutine34                          9
     ?Subroutine14                          9
     ?Subroutine13                          9
     ?Subroutine12                          9
     ?Subroutine10                         15
     ?Subroutine9                          14
     ?Subroutine33                          9
     ?Subroutine8                          14
     ?Subroutine32                          9
     showhanzi24x24                       128
     ?Subroutine3                           5
     ?Subroutine25                          3
     ??Subroutine36_0                       7
     ?Subroutine17                          9
     ?Subroutine16                         10
     ?Subroutine11                         11
     showhanzi16x16                       137
     LCD_DrawPoint                         36
     LCD_DrawPoint_big                     67
     DispPic                               92
     LCD_Fill                             120
     ?Subroutine4                           5
     LCD_DrawLine                         356
     ?Subroutine5                           8
     ?Subroutine28                          1
     ??Subroutine39_0                       8
     LCD_DrawRectangle                    113
     ?Subroutine6                           5
     ?Subroutine31                          4
     ??Subroutine38_0                       6
     Draw_Circle                          386
     ?Subroutine30                         11
     ?Subroutine29                         13
     LCD_ShowChar                         285
     ?Subroutine26                         18
     mypow                                 33
     LCD_ShowNum                          161
     ?Subroutine27                         15
     LCD_Show2Num                         102
     LCD_ShowString                       133
     ?Subroutine7                           5
     HalLcdWriteString                     80
     HalLcdWriteStringValue                 3
     HalLcdWriteStringValueValue            3
     HalLcdWriteScreen                      3
     HalLcdWriteValue                       3
     ??LCD_DLY_ms?relay                     6
     ??LCD_Wrtie_Bus?relay                  6
     ??LCD_WR_DATA8?relay                   6
     ??LCD_WR_DATA?relay                    6
     ??LCD_WR_REG?relay                     6
     ??LCD_WR_REG_DATA?relay                6
     ??Address_set?relay                    6
     ??LCD_Clear?relay                      6
     ??HalLcdInit?relay                     6
     ??HalLcd_HW_Init?relay                 6
     ??showhanzi24x24?relay                 6
     ??showhanzi16x16?relay                 6
     ??LCD_DrawPoint?relay                  6
     ??LCD_DrawPoint_big?relay              6
     ??DispPic?relay                        6
     ??LCD_Fill?relay                       6
     ??LCD_DrawLine?relay                   6
     ??LCD_DrawRectangle?relay              6
     ??Draw_Circle?relay                    6
     ??LCD_ShowChar?relay                   6
     ??mypow?relay                          6
     ??LCD_ShowNum?relay                    6
     ??LCD_Show2Num?relay                   6
     ??LCD_ShowString?relay                 6
     ??HalLcdWriteString?relay              6
     ??HalLcdWriteStringValue?relay         6
     ??HalLcdWriteStringValueValue?relay    6
     ??HalLcdWriteScreen?relay              6
     ??HalLcdWriteValue?relay               6
     ?<Constant "                ">        17

 
 3 173 bytes in segment BANKED_CODE
   174 bytes in segment BANK_RELAYS
 1 520 bytes in segment CODE_C
     3 bytes in segment SFR_AN
    17 bytes in segment XDATA_ROM_C
     4 bytes in segment XDATA_Z
 
 4 867 bytes of CODE  memory
    17 bytes of CONST memory
     0 bytes of DATA  memory (+ 3 bytes shared)
     4 bytes of XDATA memory

Errors: none
Warnings: 1
