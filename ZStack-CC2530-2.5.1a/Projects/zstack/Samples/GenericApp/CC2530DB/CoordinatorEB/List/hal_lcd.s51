///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        28/May/2022  11:54:11 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\Z /
//                          Stack-CC2530-2.5.1a\Components\hal\target\CC2530E /
//                          B\hal_lcd.c                                       /
//    Command line       =  -f H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc253 /
//                          0\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Ge /
//                          nericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoor /
//                          d.cfg (-DCPU32MHZ -DROOT=__near_func              /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc253 /
//                          0\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Ge /
//                          nericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConf /
//                          ig.cfg (-DZIGBEEPRO -DSECURE=0                    /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\ /
//                          2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\ZStack-CC2530-2.5.1a\Compon /
//                          ents\hal\target\CC2530EB\hal_lcd.c -D ZTOOL_P1    /
//                          -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D       /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\Z /
//                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\Gener /
//                          icApp\CC2530DB\CoordinatorEB\List\ -lA            /
//                          H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\Z /
//                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\Gener /
//                          icApp\CC2530DB\CoordinatorEB\List\                /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\Z /
//                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\Gener /
//                          icApp\CC2530DB\CoordinatorEB\Obj\ -e              /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\Z /
//                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\Gener /
//                          icApp\CC2530DB\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.Ïî /
//                          Ä¿ÍêÕûÔ´Âë\cc2530\ZStack-CC2530-2.5.1a\Projects\z /
//                          stack\Samples\GenericApp\CC2530DB\..\Source\ -I   /
//                          H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\Z /
//                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\Gener /
//                          icApp\CC2530DB\..\..\..\ZMain\TI2530DB\ -I        /
//                          H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\Z /
//                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\Gener /
//                          icApp\CC2530DB\..\..\..\..\..\Components\hal\incl /
//                          ude\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\ /
//                          cc2530\ZStack-CC2530-2.5.1a\Projects\zstack\Sampl /
//                          es\GenericApp\CC2530DB\..\..\..\..\..\Components\ /
//                          hal\target\CC2530EB\ -I                           /
//                          H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\Z /
//                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\Gener /
//                          icApp\CC2530DB\..\..\..\..\..\Components\mac\incl /
//                          ude\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\ /
//                          cc2530\ZStack-CC2530-2.5.1a\Projects\zstack\Sampl /
//                          es\GenericApp\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\high_level\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.Ïî /
//                          Ä¿ÍêÕûÔ´Âë\cc2530\ZStack-CC2530-2.5.1a\Projects\z /
//                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\ /
//                          Components\mac\low_level\srf04\ -I                /
//                          H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\Z /
//                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\Gener /
//                          icApp\CC2530DB\..\..\..\..\..\Components\mac\low_ /
//                          level\srf04\single_chip\ -I                       /
//                          H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\Z /
//                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\Gener /
//                          icApp\CC2530DB\..\..\..\..\..\Components\mt\ -I   /
//                          H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\Z /
//                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\Gener /
//                          icApp\CC2530DB\..\..\..\..\..\Components\osal\inc /
//                          lude\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë /
//                          \cc2530\ZStack-CC2530-2.5.1a\Projects\zstack\Samp /
//                          les\GenericApp\CC2530DB\..\..\..\..\..\Components /
//                          \services\saddr\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.Ï /
//                          îÄ¿ÍêÕûÔ´Âë\cc2530\ZStack-CC2530-2.5.1a\Projects\ /
//                          zstack\Samples\GenericApp\CC2530DB\..\..\..\..\.. /
//                          \Components\services\sdata\ -I                    /
//                          H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\Z /
//                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\Gener /
//                          icApp\CC2530DB\..\..\..\..\..\Components\stack\af /
//                          \ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2 /
//                          530\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ /
//                          GenericApp\CC2530DB\..\..\..\..\..\Components\sta /
//                          ck\nwk\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´ /
//                          Âë\cc2530\ZStack-CC2530-2.5.1a\Projects\zstack\Sa /
//                          mples\GenericApp\CC2530DB\..\..\..\..\..\Componen /
//                          ts\stack\sapi\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ /
//                          ¿ÍêÕûÔ´Âë\cc2530\ZStack-CC2530-2.5.1a\Projects\zs /
//                          tack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\stack\sec\ -I                           /
//                          H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\Z /
//                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\Gener /
//                          icApp\CC2530DB\..\..\..\..\..\Components\stack\sy /
//                          s\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc /
//                          2530\ZStack-CC2530-2.5.1a\Projects\zstack\Samples /
//                          \GenericApp\CC2530DB\..\..\..\..\..\Components\st /
//                          ack\zdo\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ /
//                          ´Âë\cc2530\ZStack-CC2530-2.5.1a\Projects\zstack\S /
//                          amples\GenericApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\zmac\ -I H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕû /
//                          Ô´Âë\cc2530\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\..\..\..\..\..\Compon /
//                          ents\zmac\f8w\ -Ohz --require_prototypes          /
//    List file          =  H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\Z /
//                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\Gener /
//                          icApp\CC2530DB\CoordinatorEB\List\hal_lcd.s51     /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_lcd

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SS_SHR
        EXTERN ?S_SHL
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??Address_set?relay
        FUNCTION ??Address_set?relay,0203H
        PUBLIC ??DispPic?relay
        FUNCTION ??DispPic?relay,0203H
        PUBLIC ??Draw_Circle?relay
        FUNCTION ??Draw_Circle?relay,0203H
        PUBLIC ??HalLcdInit?relay
        FUNCTION ??HalLcdInit?relay,0203H
        PUBLIC ??HalLcdWriteScreen?relay
        FUNCTION ??HalLcdWriteScreen?relay,0203H
        PUBLIC ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,0203H
        PUBLIC ??HalLcdWriteStringValue?relay
        FUNCTION ??HalLcdWriteStringValue?relay,0203H
        PUBLIC ??HalLcdWriteStringValueValue?relay
        FUNCTION ??HalLcdWriteStringValueValue?relay,0203H
        PUBLIC ??HalLcdWriteValue?relay
        FUNCTION ??HalLcdWriteValue?relay,0203H
        PUBLIC ??HalLcd_HW_Init?relay
        FUNCTION ??HalLcd_HW_Init?relay,0203H
        PUBLIC ??LCD_Clear?relay
        FUNCTION ??LCD_Clear?relay,0203H
        PUBLIC ??LCD_DLY_ms?relay
        FUNCTION ??LCD_DLY_ms?relay,0203H
        PUBLIC ??LCD_DrawLine?relay
        FUNCTION ??LCD_DrawLine?relay,0203H
        PUBLIC ??LCD_DrawPoint?relay
        FUNCTION ??LCD_DrawPoint?relay,0203H
        PUBLIC ??LCD_DrawPoint_big?relay
        FUNCTION ??LCD_DrawPoint_big?relay,0203H
        PUBLIC ??LCD_DrawRectangle?relay
        FUNCTION ??LCD_DrawRectangle?relay,0203H
        PUBLIC ??LCD_Fill?relay
        FUNCTION ??LCD_Fill?relay,0203H
        PUBLIC ??LCD_Show2Num?relay
        FUNCTION ??LCD_Show2Num?relay,0203H
        PUBLIC ??LCD_ShowChar?relay
        FUNCTION ??LCD_ShowChar?relay,0203H
        PUBLIC ??LCD_ShowNum?relay
        FUNCTION ??LCD_ShowNum?relay,0203H
        PUBLIC ??LCD_ShowString?relay
        FUNCTION ??LCD_ShowString?relay,0203H
        PUBLIC ??LCD_WR_DATA8?relay
        FUNCTION ??LCD_WR_DATA8?relay,0203H
        PUBLIC ??LCD_WR_DATA?relay
        FUNCTION ??LCD_WR_DATA?relay,0203H
        PUBLIC ??LCD_WR_REG?relay
        FUNCTION ??LCD_WR_REG?relay,0203H
        PUBLIC ??LCD_WR_REG_DATA?relay
        FUNCTION ??LCD_WR_REG_DATA?relay,0203H
        PUBLIC ??LCD_Wrtie_Bus?relay
        FUNCTION ??LCD_Wrtie_Bus?relay,0203H
        PUBLIC ??mypow?relay
        FUNCTION ??mypow?relay,0203H
        PUBLIC ??showhanzi16x16?relay
        FUNCTION ??showhanzi16x16?relay,0203H
        PUBLIC ??showhanzi24x24?relay
        FUNCTION ??showhanzi24x24?relay,0203H
        PUBLIC Address_set
        FUNCTION Address_set,021203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC BACK_COLOR
        PUBLIC DispPic
        FUNCTION DispPic,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC Draw_Circle
        FUNCTION Draw_Circle,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC HalLcdInit
        FUNCTION HalLcdInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLcdWriteScreen
        FUNCTION HalLcdWriteScreen,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC HalLcdWriteString
        FUNCTION HalLcdWriteString,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC HalLcdWriteStringValue
        FUNCTION HalLcdWriteStringValue,0203H
        ARGFRAME XSTACK, 1, STACK
        PUBLIC HalLcdWriteStringValueValue
        FUNCTION HalLcdWriteStringValueValue,0203H
        ARGFRAME XSTACK, 4, STACK
        PUBLIC HalLcdWriteValue
        FUNCTION HalLcdWriteValue,0203H
        ARGFRAME XSTACK, 1, STACK
        PUBLIC HalLcd_HW_Init
        FUNCTION HalLcd_HW_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC LCD_Clear
        FUNCTION LCD_Clear,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC LCD_DLY_ms
        FUNCTION LCD_DLY_ms,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC LCD_DrawLine
        FUNCTION LCD_DrawLine,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 26, STACK
        PUBLIC LCD_DrawPoint
        FUNCTION LCD_DrawPoint,021203H
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC LCD_DrawPoint_big
        FUNCTION LCD_DrawPoint_big,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC LCD_DrawRectangle
        FUNCTION LCD_DrawRectangle,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC LCD_Fill
        FUNCTION LCD_Fill,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC LCD_Show2Num
        FUNCTION LCD_Show2Num,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC LCD_ShowChar
        FUNCTION LCD_ShowChar,021203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC LCD_ShowNum
        FUNCTION LCD_ShowNum,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC LCD_ShowString
        FUNCTION LCD_ShowString,021203H
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC LCD_WR_DATA
        FUNCTION LCD_WR_DATA,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC LCD_WR_DATA8
        FUNCTION LCD_WR_DATA8,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC LCD_WR_REG
        FUNCTION LCD_WR_REG,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC LCD_WR_REG_DATA
        FUNCTION LCD_WR_REG_DATA,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC LCD_Wrtie_Bus
        FUNCTION LCD_Wrtie_Bus,0203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBLIC POINT_COLOR
        PUBWEAK _A_P1
        PUBLIC asc2_1608
        PUBLIC mypow
        FUNCTION mypow,0203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC showhanzi16x16
        FUNCTION showhanzi16x16,021203H
        ARGFRAME XSTACK, 6, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC showhanzi24x24
        FUNCTION showhanzi24x24,021203H
        ARGFRAME XSTACK, 6, STACK
        LOCFRAME XSTACK, 21, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
Address_set         SYMBOL "Address_set"
??Address_set?relay SYMBOL "?relay", Address_set
DispPic             SYMBOL "DispPic"
??DispPic?relay     SYMBOL "?relay", DispPic
Draw_Circle         SYMBOL "Draw_Circle"
??Draw_Circle?relay SYMBOL "?relay", Draw_Circle
HalLcdInit          SYMBOL "HalLcdInit"
??HalLcdInit?relay  SYMBOL "?relay", HalLcdInit
HalLcdWriteScreen   SYMBOL "HalLcdWriteScreen"
??HalLcdWriteScreen?relay SYMBOL "?relay", HalLcdWriteScreen
HalLcdWriteString   SYMBOL "HalLcdWriteString"
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
HalLcdWriteStringValue SYMBOL "HalLcdWriteStringValue"
??HalLcdWriteStringValue?relay SYMBOL "?relay", HalLcdWriteStringValue
HalLcdWriteStringValueValue SYMBOL "HalLcdWriteStringValueValue"
??HalLcdWriteStringValueValue?relay SYMBOL "?relay", HalLcdWriteStringValueValue
HalLcdWriteValue    SYMBOL "HalLcdWriteValue"
??HalLcdWriteValue?relay SYMBOL "?relay", HalLcdWriteValue
HalLcd_HW_Init      SYMBOL "HalLcd_HW_Init"
??HalLcd_HW_Init?relay SYMBOL "?relay", HalLcd_HW_Init
LCD_Clear           SYMBOL "LCD_Clear"
??LCD_Clear?relay   SYMBOL "?relay", LCD_Clear
LCD_DLY_ms          SYMBOL "LCD_DLY_ms"
??LCD_DLY_ms?relay  SYMBOL "?relay", LCD_DLY_ms
LCD_DrawLine        SYMBOL "LCD_DrawLine"
??LCD_DrawLine?relay SYMBOL "?relay", LCD_DrawLine
LCD_DrawPoint       SYMBOL "LCD_DrawPoint"
??LCD_DrawPoint?relay SYMBOL "?relay", LCD_DrawPoint
LCD_DrawPoint_big   SYMBOL "LCD_DrawPoint_big"
??LCD_DrawPoint_big?relay SYMBOL "?relay", LCD_DrawPoint_big
LCD_DrawRectangle   SYMBOL "LCD_DrawRectangle"
??LCD_DrawRectangle?relay SYMBOL "?relay", LCD_DrawRectangle
LCD_Fill            SYMBOL "LCD_Fill"
??LCD_Fill?relay    SYMBOL "?relay", LCD_Fill
LCD_Show2Num        SYMBOL "LCD_Show2Num"
??LCD_Show2Num?relay SYMBOL "?relay", LCD_Show2Num
LCD_ShowChar        SYMBOL "LCD_ShowChar"
??LCD_ShowChar?relay SYMBOL "?relay", LCD_ShowChar
LCD_ShowNum         SYMBOL "LCD_ShowNum"
??LCD_ShowNum?relay SYMBOL "?relay", LCD_ShowNum
LCD_ShowString      SYMBOL "LCD_ShowString"
??LCD_ShowString?relay SYMBOL "?relay", LCD_ShowString
LCD_WR_DATA8        SYMBOL "LCD_WR_DATA8"
??LCD_WR_DATA8?relay SYMBOL "?relay", LCD_WR_DATA8
LCD_WR_DATA         SYMBOL "LCD_WR_DATA"
??LCD_WR_DATA?relay SYMBOL "?relay", LCD_WR_DATA
LCD_WR_REG          SYMBOL "LCD_WR_REG"
??LCD_WR_REG?relay  SYMBOL "?relay", LCD_WR_REG
LCD_WR_REG_DATA     SYMBOL "LCD_WR_REG_DATA"
??LCD_WR_REG_DATA?relay SYMBOL "?relay", LCD_WR_REG_DATA
LCD_Wrtie_Bus       SYMBOL "LCD_Wrtie_Bus"
??LCD_Wrtie_Bus?relay SYMBOL "?relay", LCD_Wrtie_Bus
mypow               SYMBOL "mypow"
??mypow?relay       SYMBOL "?relay", mypow
showhanzi16x16      SYMBOL "showhanzi16x16"
??showhanzi16x16?relay SYMBOL "?relay", showhanzi16x16
showhanzi24x24      SYMBOL "showhanzi24x24"
??showhanzi24x24?relay SYMBOL "?relay", showhanzi24x24

// H:\ÎïÁªÍøÊµÑµÏîÄ¿ËùÓĞ×ÊÁÏ\2.ÏîÄ¿ÍêÕûÔ´Âë\cc2530\ZStack-CC2530-2.5.1a\Components\hal\target\CC2530EB\hal_lcd.c
//    1 #include <ioCC2530.h>

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//    2 #include "hal_lcd.h"
//    3 #include "hal_types.h"
//    4    
//    5 //È¡ºº×Ö×ÖÄ££¬ºáÏò8µãÓÒ¸ßÎ»   
//    6    

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//    7 __code const unsigned char asc2_1608[1520]={
asc2_1608:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 0
        DB 0
        DB 24
        DB 24
        DB 0
        DB 0
        DB 0
        DB 72
        DB 108
        DB 36
        DB 18
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 36
        DB 36
        DB 36
        DB 127
        DB 18
        DB 18
        DB 18
        DB 127
        DB 18
        DB 18
        DB 18
        DB 0
        DB 0
        DB 0
        DB 0
        DB 8
        DB 28
        DB 42
        DB 42
        DB 10
        DB 12
        DB 24
        DB 40
        DB 40
        DB 42
        DB 42
        DB 28
        DB 8
        DB 8
        DB 0
        DB 0
        DB 0
        DB 34
        DB 37
        DB 21
        DB 21
        DB 21
        DB 42
        DB 88
        DB 84
        DB 84
        DB 84
        DB 34
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 12
        DB 18
        DB 18
        DB 18
        DB 10
        DB 118
        DB 37
        DB 41
        DB 17
        DB 145
        DB 110
        DB 0
        DB 0
        DB 0
        DB 6
        DB 6
        DB 4
        DB 3
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 32
        DB 16
        DB 16
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 16
        DB 16
        DB 32
        DB 64
        DB 0
        DB 0
        DB 2
        DB 4
        DB 8
        DB 8
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 8
        DB 8
        DB 4
        DB 2
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 8
        DB 8
        DB 107
        DB 28
        DB 28
        DB 107
        DB 8
        DB 8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 8
        DB 8
        DB 8
        DB 8
        DB 127
        DB 8
        DB 8
        DB 8
        DB 8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 6
        DB 6
        DB 4
        DB 3
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 254
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 6
        DB 6
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 64
        DB 64
        DB 32
        DB 32
        DB 16
        DB 16
        DB 8
        DB 8
        DB 4
        DB 4
        DB 2
        DB 2
        DB 0
        DB 0
        DB 0
        DB 0
        DB 24
        DB 36
        DB 66
        DB 66
        DB 66
        DB 66
        DB 66
        DB 66
        DB 66
        DB 36
        DB 24
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 8
        DB 14
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 62
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 60
        DB 66
        DB 66
        DB 66
        DB 32
        DB 32
        DB 16
        DB 8
        DB 4
        DB 66
        DB 126
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 60
        DB 66
        DB 66
        DB 32
        DB 24
        DB 32
        DB 64
        DB 64
        DB 66
        DB 34
        DB 28
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 32
        DB 48
        DB 40
        DB 36
        DB 36
        DB 34
        DB 34
        DB 126
        DB 32
        DB 32
        DB 120
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 126
        DB 2
        DB 2
        DB 2
        DB 26
        DB 38
        DB 64
        DB 64
        DB 66
        DB 34
        DB 28
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 56
        DB 36
        DB 2
        DB 2
        DB 26
        DB 38
        DB 66
        DB 66
        DB 66
        DB 36
        DB 24
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 126
        DB 34
        DB 34
        DB 16
        DB 16
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 60
        DB 66
        DB 66
        DB 66
        DB 36
        DB 24
        DB 36
        DB 66
        DB 66
        DB 66
        DB 60
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 24
        DB 36
        DB 66
        DB 66
        DB 66
        DB 100
        DB 88
        DB 64
        DB 64
        DB 36
        DB 28
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 24
        DB 24
        DB 0
        DB 0
        DB 0
        DB 0
        DB 24
        DB 24
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 8
        DB 8
        DB 4
        DB 0
        DB 0
        DB 0
        DB 64
        DB 32
        DB 16
        DB 8
        DB 4
        DB 2
        DB 4
        DB 8
        DB 16
        DB 32
        DB 64
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 127
        DB 0
        DB 0
        DB 0
        DB 127
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 2
        DB 4
        DB 8
        DB 16
        DB 32
        DB 64
        DB 32
        DB 16
        DB 8
        DB 4
        DB 2
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 60
        DB 66
        DB 66
        DB 70
        DB 64
        DB 32
        DB 16
        DB 16
        DB 0
        DB 24
        DB 24
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 28
        DB 34
        DB 90
        DB 85
        DB 85
        DB 85
        DB 85
        DB 45
        DB 66
        DB 34
        DB 28
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 8
        DB 8
        DB 24
        DB 20
        DB 20
        DB 36
        DB 60
        DB 34
        DB 66
        DB 66
        DB 231
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 31
        DB 34
        DB 34
        DB 34
        DB 30
        DB 34
        DB 66
        DB 66
        DB 66
        DB 34
        DB 31
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 124
        DB 66
        DB 66
        DB 1
        DB 1
        DB 1
        DB 1
        DB 1
        DB 66
        DB 34
        DB 28
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 31
        DB 34
        DB 66
        DB 66
        DB 66
        DB 66
        DB 66
        DB 66
        DB 66
        DB 34
        DB 31
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 63
        DB 66
        DB 18
        DB 18
        DB 30
        DB 18
        DB 18
        DB 2
        DB 66
        DB 66
        DB 63
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 63
        DB 66
        DB 18
        DB 18
        DB 30
        DB 18
        DB 18
        DB 2
        DB 2
        DB 2
        DB 7
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 60
        DB 34
        DB 34
        DB 1
        DB 1
        DB 1
        DB 113
        DB 33
        DB 34
        DB 34
        DB 28
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 231
        DB 66
        DB 66
        DB 66
        DB 66
        DB 126
        DB 66
        DB 66
        DB 66
        DB 66
        DB 231
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 62
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 62
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 124
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 17
        DB 15
        DB 0
        DB 0
        DB 0
        DB 119
        DB 34
        DB 18
        DB 10
        DB 14
        DB 10
        DB 18
        DB 18
        DB 34
        DB 34
        DB 119
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 7
        DB 2
        DB 2
        DB 2
        DB 2
        DB 2
        DB 2
        DB 2
        DB 2
        DB 66
        DB 127
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 119
        DB 54
        DB 54
        DB 54
        DB 54
        DB 42
        DB 42
        DB 42
        DB 42
        DB 42
        DB 107
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 227
        DB 70
        DB 70
        DB 74
        DB 74
        DB 82
        DB 82
        DB 82
        DB 98
        DB 98
        DB 71
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 28
        DB 34
        DB 65
        DB 65
        DB 65
        DB 65
        DB 65
        DB 65
        DB 65
        DB 34
        DB 28
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 63
        DB 66
        DB 66
        DB 66
        DB 66
        DB 62
        DB 2
        DB 2
        DB 2
        DB 2
        DB 7
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 28
        DB 34
        DB 65
        DB 65
        DB 65
        DB 65
        DB 65
        DB 77
        DB 83
        DB 50
        DB 28
        DB 96
        DB 0
        DB 0
        DB 0
        DB 0
        DB 63
        DB 66
        DB 66
        DB 66
        DB 62
        DB 18
        DB 18
        DB 34
        DB 34
        DB 66
        DB 199
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 124
        DB 66
        DB 66
        DB 2
        DB 4
        DB 24
        DB 32
        DB 64
        DB 66
        DB 66
        DB 62
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 127
        DB 73
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 28
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 231
        DB 66
        DB 66
        DB 66
        DB 66
        DB 66
        DB 66
        DB 66
        DB 66
        DB 66
        DB 60
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 231
        DB 66
        DB 66
        DB 34
        DB 36
        DB 36
        DB 20
        DB 20
        DB 24
        DB 8
        DB 8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 107
        DB 73
        DB 73
        DB 73
        DB 73
        DB 85
        DB 85
        DB 54
        DB 34
        DB 34
        DB 34
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 231
        DB 66
        DB 36
        DB 36
        DB 24
        DB 24
        DB 24
        DB 36
        DB 36
        DB 66
        DB 231
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 119
        DB 34
        DB 34
        DB 20
        DB 20
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 28
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 126
        DB 33
        DB 32
        DB 16
        DB 16
        DB 8
        DB 4
        DB 4
        DB 66
        DB 66
        DB 63
        DB 0
        DB 0
        DB 0
        DB 120
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 120
        DB 0
        DB 0
        DB 0
        DB 2
        DB 2
        DB 4
        DB 4
        DB 8
        DB 8
        DB 8
        DB 16
        DB 16
        DB 32
        DB 32
        DB 32
        DB 64
        DB 64
        DB 0
        DB 30
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 30
        DB 0
        DB 0
        DB 56
        DB 68
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 255
        DB 0
        DB 6
        DB 8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 60
        DB 66
        DB 120
        DB 68
        DB 66
        DB 66
        DB 252
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 3
        DB 2
        DB 2
        DB 2
        DB 26
        DB 38
        DB 66
        DB 66
        DB 66
        DB 38
        DB 26
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 56
        DB 68
        DB 2
        DB 2
        DB 2
        DB 68
        DB 56
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 96
        DB 64
        DB 64
        DB 64
        DB 120
        DB 68
        DB 66
        DB 66
        DB 66
        DB 100
        DB 216
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 60
        DB 66
        DB 126
        DB 2
        DB 2
        DB 66
        DB 60
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 240
        DB 136
        DB 8
        DB 8
        DB 126
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 62
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 124
        DB 34
        DB 34
        DB 28
        DB 2
        DB 60
        DB 66
        DB 66
        DB 60
        DB 0
        DB 0
        DB 0
        DB 3
        DB 2
        DB 2
        DB 2
        DB 58
        DB 70
        DB 66
        DB 66
        DB 66
        DB 66
        DB 231
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 12
        DB 12
        DB 0
        DB 0
        DB 14
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 62
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 48
        DB 48
        DB 0
        DB 0
        DB 56
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 34
        DB 30
        DB 0
        DB 0
        DB 0
        DB 3
        DB 2
        DB 2
        DB 2
        DB 114
        DB 18
        DB 10
        DB 22
        DB 18
        DB 34
        DB 119
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 14
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 62
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 127
        DB 146
        DB 146
        DB 146
        DB 146
        DB 146
        DB 183
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 59
        DB 70
        DB 66
        DB 66
        DB 66
        DB 66
        DB 231
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 60
        DB 66
        DB 66
        DB 66
        DB 66
        DB 66
        DB 60
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 27
        DB 38
        DB 66
        DB 66
        DB 66
        DB 34
        DB 30
        DB 2
        DB 7
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 120
        DB 68
        DB 66
        DB 66
        DB 66
        DB 68
        DB 120
        DB 64
        DB 224
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 119
        DB 76
        DB 4
        DB 4
        DB 4
        DB 4
        DB 31
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 124
        DB 66
        DB 2
        DB 60
        DB 64
        DB 66
        DB 62
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 8
        DB 8
        DB 62
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 48
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 99
        DB 66
        DB 66
        DB 66
        DB 66
        DB 98
        DB 220
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 231
        DB 66
        DB 36
        DB 36
        DB 20
        DB 8
        DB 8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 235
        DB 73
        DB 73
        DB 85
        DB 85
        DB 34
        DB 34
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 118
        DB 36
        DB 24
        DB 24
        DB 24
        DB 36
        DB 110
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 231
        DB 66
        DB 36
        DB 36
        DB 20
        DB 24
        DB 8
        DB 8
        DB 7
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 126
        DB 34
        DB 16
        DB 8
        DB 8
        DB 68
        DB 126
        DB 0
        DB 0
        DB 0
        DB 192
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 16
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 32
        DB 192
        DB 0
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 16
        DB 0
        DB 6
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 16
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 6
        DB 0
        DB 12
        DB 50
        DB 194
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
//    8 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//    9 0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x18,0x18,0x00,0x00,
//   10 0x00,0x48,0x6C,0x24,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   11 0x00,0x00,0x00,0x24,0x24,0x24,0x7F,0x12,0x12,0x12,0x7F,0x12,0x12,0x12,0x00,0x00,
//   12 0x00,0x00,0x08,0x1C,0x2A,0x2A,0x0A,0x0C,0x18,0x28,0x28,0x2A,0x2A,0x1C,0x08,0x08,
//   13 0x00,0x00,0x00,0x22,0x25,0x15,0x15,0x15,0x2A,0x58,0x54,0x54,0x54,0x22,0x00,0x00,
//   14 0x00,0x00,0x00,0x0C,0x12,0x12,0x12,0x0A,0x76,0x25,0x29,0x11,0x91,0x6E,0x00,0x00,
//   15 0x00,0x06,0x06,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   16 0x00,0x40,0x20,0x10,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x10,0x10,0x20,0x40,0x00,
//   17 0x00,0x02,0x04,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x10,0x08,0x08,0x04,0x02,0x00,
//   18 0x00,0x00,0x00,0x00,0x08,0x08,0x6B,0x1C,0x1C,0x6B,0x08,0x08,0x00,0x00,0x00,0x00,
//   19 0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x7F,0x08,0x08,0x08,0x08,0x00,0x00,0x00,
//   20 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06,0x04,0x03,
//   21 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   22 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x06,0x00,0x00,
//   23 0x00,0x00,0x80,0x40,0x40,0x20,0x20,0x10,0x10,0x08,0x08,0x04,0x04,0x02,0x02,0x00,
//   24 0x00,0x00,0x00,0x18,0x24,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18,0x00,0x00,
//   25 0x00,0x00,0x00,0x08,0x0E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
//   26 0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x20,0x20,0x10,0x08,0x04,0x42,0x7E,0x00,0x00,
//   27 0x00,0x00,0x00,0x3C,0x42,0x42,0x20,0x18,0x20,0x40,0x40,0x42,0x22,0x1C,0x00,0x00,
//   28 0x00,0x00,0x00,0x20,0x30,0x28,0x24,0x24,0x22,0x22,0x7E,0x20,0x20,0x78,0x00,0x00,
//   29 0x00,0x00,0x00,0x7E,0x02,0x02,0x02,0x1A,0x26,0x40,0x40,0x42,0x22,0x1C,0x00,0x00,
//   30 0x00,0x00,0x00,0x38,0x24,0x02,0x02,0x1A,0x26,0x42,0x42,0x42,0x24,0x18,0x00,0x00,
//   31 0x00,0x00,0x00,0x7E,0x22,0x22,0x10,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,
//   32 0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x24,0x18,0x24,0x42,0x42,0x42,0x3C,0x00,0x00,
//   33 0x00,0x00,0x00,0x18,0x24,0x42,0x42,0x42,0x64,0x58,0x40,0x40,0x24,0x1C,0x00,0x00,
//   34 0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,
//   35 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x04,
//   36 0x00,0x00,0x00,0x40,0x20,0x10,0x08,0x04,0x02,0x04,0x08,0x10,0x20,0x40,0x00,0x00,
//   37 0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00,
//   38 0x00,0x00,0x00,0x02,0x04,0x08,0x10,0x20,0x40,0x20,0x10,0x08,0x04,0x02,0x00,0x00,
//   39 0x00,0x00,0x00,0x3C,0x42,0x42,0x46,0x40,0x20,0x10,0x10,0x00,0x18,0x18,0x00,0x00,
//   40 0x00,0x00,0x00,0x1C,0x22,0x5A,0x55,0x55,0x55,0x55,0x2D,0x42,0x22,0x1C,0x00,0x00,
//   41 0x00,0x00,0x00,0x08,0x08,0x18,0x14,0x14,0x24,0x3C,0x22,0x42,0x42,0xE7,0x00,0x00,
//   42 0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x1E,0x22,0x42,0x42,0x42,0x22,0x1F,0x00,0x00,
//   43 0x00,0x00,0x00,0x7C,0x42,0x42,0x01,0x01,0x01,0x01,0x01,0x42,0x22,0x1C,0x00,0x00,
//   44 0x00,0x00,0x00,0x1F,0x22,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x22,0x1F,0x00,0x00,
//   45 0x00,0x00,0x00,0x3F,0x42,0x12,0x12,0x1E,0x12,0x12,0x02,0x42,0x42,0x3F,0x00,0x00,
//   46 0x00,0x00,0x00,0x3F,0x42,0x12,0x12,0x1E,0x12,0x12,0x02,0x02,0x02,0x07,0x00,0x00,
//   47 0x00,0x00,0x00,0x3C,0x22,0x22,0x01,0x01,0x01,0x71,0x21,0x22,0x22,0x1C,0x00,0x00,
//   48 0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0xE7,0x00,0x00,
//   49 0x00,0x00,0x00,0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
//   50 0x00,0x00,0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x11,0x0F,
//   51 0x00,0x00,0x00,0x77,0x22,0x12,0x0A,0x0E,0x0A,0x12,0x12,0x22,0x22,0x77,0x00,0x00,
//   52 0x00,0x00,0x00,0x07,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x42,0x7F,0x00,0x00,
//   53 0x00,0x00,0x00,0x77,0x36,0x36,0x36,0x36,0x2A,0x2A,0x2A,0x2A,0x2A,0x6B,0x00,0x00,
//   54 0x00,0x00,0x00,0xE3,0x46,0x46,0x4A,0x4A,0x52,0x52,0x52,0x62,0x62,0x47,0x00,0x00,
//   55 0x00,0x00,0x00,0x1C,0x22,0x41,0x41,0x41,0x41,0x41,0x41,0x41,0x22,0x1C,0x00,0x00,
//   56 0x00,0x00,0x00,0x3F,0x42,0x42,0x42,0x42,0x3E,0x02,0x02,0x02,0x02,0x07,0x00,0x00,
//   57 0x00,0x00,0x00,0x1C,0x22,0x41,0x41,0x41,0x41,0x41,0x4D,0x53,0x32,0x1C,0x60,0x00,
//   58 0x00,0x00,0x00,0x3F,0x42,0x42,0x42,0x3E,0x12,0x12,0x22,0x22,0x42,0xC7,0x00,0x00,
//   59 0x00,0x00,0x00,0x7C,0x42,0x42,0x02,0x04,0x18,0x20,0x40,0x42,0x42,0x3E,0x00,0x00,
//   60 0x00,0x00,0x00,0x7F,0x49,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x1C,0x00,0x00,
//   61 0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
//   62 0x00,0x00,0x00,0xE7,0x42,0x42,0x22,0x24,0x24,0x14,0x14,0x18,0x08,0x08,0x00,0x00,
//   63 0x00,0x00,0x00,0x6B,0x49,0x49,0x49,0x49,0x55,0x55,0x36,0x22,0x22,0x22,0x00,0x00,
//   64 0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x18,0x18,0x18,0x24,0x24,0x42,0xE7,0x00,0x00,
//   65 0x00,0x00,0x00,0x77,0x22,0x22,0x14,0x14,0x08,0x08,0x08,0x08,0x08,0x1C,0x00,0x00,
//   66 0x00,0x00,0x00,0x7E,0x21,0x20,0x10,0x10,0x08,0x04,0x04,0x42,0x42,0x3F,0x00,0x00,
//   67 0x00,0x78,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x78,0x00,
//   68 0x00,0x00,0x02,0x02,0x04,0x04,0x08,0x08,0x08,0x10,0x10,0x20,0x20,0x20,0x40,0x40,
//   69 0x00,0x1E,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1E,0x00,
//   70 0x00,0x38,0x44,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   71 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,
//   72 0x00,0x06,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//   73 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x78,0x44,0x42,0x42,0xFC,0x00,0x00,
//   74 0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x1A,0x26,0x42,0x42,0x42,0x26,0x1A,0x00,0x00,
//   75 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x02,0x02,0x02,0x44,0x38,0x00,0x00,
//   76 0x00,0x00,0x00,0x60,0x40,0x40,0x40,0x78,0x44,0x42,0x42,0x42,0x64,0xD8,0x00,0x00,
//   77 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x7E,0x02,0x02,0x42,0x3C,0x00,0x00,
//   78 0x00,0x00,0x00,0xF0,0x88,0x08,0x08,0x7E,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
//   79 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x22,0x22,0x1C,0x02,0x3C,0x42,0x42,0x3C,
//   80 0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x3A,0x46,0x42,0x42,0x42,0x42,0xE7,0x00,0x00,
//   81 0x00,0x00,0x00,0x0C,0x0C,0x00,0x00,0x0E,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
//   82 0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x38,0x20,0x20,0x20,0x20,0x20,0x20,0x22,0x1E,
//   83 0x00,0x00,0x00,0x03,0x02,0x02,0x02,0x72,0x12,0x0A,0x16,0x12,0x22,0x77,0x00,0x00,
//   84 0x00,0x00,0x00,0x0E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,
//   85 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7F,0x92,0x92,0x92,0x92,0x92,0xB7,0x00,0x00,
//   86 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3B,0x46,0x42,0x42,0x42,0x42,0xE7,0x00,0x00,
//   87 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,
//   88 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1B,0x26,0x42,0x42,0x42,0x22,0x1E,0x02,0x07,
//   89 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x44,0x42,0x42,0x42,0x44,0x78,0x40,0xE0,
//   90 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x77,0x4C,0x04,0x04,0x04,0x04,0x1F,0x00,0x00,
//   91 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7C,0x42,0x02,0x3C,0x40,0x42,0x3E,0x00,0x00,
//   92 0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x3E,0x08,0x08,0x08,0x08,0x08,0x30,0x00,0x00,
//   93 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0x42,0x42,0x42,0x42,0x62,0xDC,0x00,0x00,
//   94 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x14,0x08,0x08,0x00,0x00,
//   95 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEB,0x49,0x49,0x55,0x55,0x22,0x22,0x00,0x00,
//   96 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x76,0x24,0x18,0x18,0x18,0x24,0x6E,0x00,0x00,
//   97 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x14,0x18,0x08,0x08,0x07,
//   98 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x22,0x10,0x08,0x08,0x44,0x7E,0x00,0x00,
//   99 0x00,0xC0,0x20,0x20,0x20,0x20,0x20,0x10,0x20,0x20,0x20,0x20,0x20,0x20,0xC0,0x00,
//  100 0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,
//  101 0x00,0x06,0x08,0x08,0x08,0x08,0x08,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x06,0x00,
//  102 0x0C,0x32,0xC2,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  103 };
//  104 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  105 uint16 BACK_COLOR, POINT_COLOR;   //±³¾°É«£¬»­±ÊÉ«	
BACK_COLOR:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
POINT_COLOR:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  106 
//  107 void LCD_DLY_ms(unsigned int ms);
//  108 void LCD_Wrtie_Bus(char dat);
//  109 void LCD_WR_REG_DATA(uint8 reg,int da);
//  110 unsigned int mypow(uint8 m,uint8 n);
//  111 
//  112 /*********************LCD ÑÓÊ±1ms************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  113 void LCD_DLY_ms(unsigned int ms)
LCD_DLY_ms:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function LCD_DLY_ms
        CODE
//  114 {                         
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??LCD_DLY_ms_0
//  115     unsigned int a;
//  116     while(ms)
//  117     {
//  118         a=3200;
??LCD_DLY_ms_1:
        MOV     R0,#-0x80
        MOV     R1,#0xc
//  119         while(a--);
??LCD_DLY_ms_2:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,R4
        ORL     A,R5
        JNZ     ??LCD_DLY_ms_2
//  120         ms--;
        MOV     A,R2
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R3,A
//  121     }
??LCD_DLY_ms_0:
        MOV     A,R2
        ORL     A,R3
        JNZ     ??LCD_DLY_ms_1
//  122     return;
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//  123 }
//  124 
//  125 /**************************************************************************************************
//  126  * @fn      halLcd_ConfigIO
//  127  *
//  128  * @brief   Configure IO lines needed for LCD control.
//  129  *
//  130  * @param   None
//  131  *
//  132  * @return  None
//  133  **************************************************************************************************/
//  134 static void halLcd_ConfigIO(void)
//  135 {
//  136     //#define LCD_CS  	//Æ¬Ñ¡Ö±½Ó½Óµ½ÁËGND
//  137     #define LCD_DC     P1_6	//A0  H/L ÃüÁîÊı¾İÑ¡Í¨¶Ë£¬H£ºÊı¾İ£¬L:ÃüÁî
//  138     #define LCD_SCL    P1_7     //SCLK  Ê±ÖÓ D0£¨SCLK£©
//  139     #define LCD_SDA    P1_5     //SDA   D1£¨MOSI£© Êı¾İ
//  140     #define LCD_REST   P1_2     //¸´Î»¶Ë
//  141     //#define LCD_CS  ½ÓµØ
//  142   
//  143 	P1SEL &= ~0xe4;          //ÈÃP12£¬P15£¬P16 P17ÎªÆÕÍ¨IO¿Ú
//  144 	P1DIR |= 0xe4;           //°ÑP12£¬P15£¬P16 P17ÉèÖÃÎªÊä³ö
//  145 
//  146 	LCD_DC=1;
//  147 	LCD_SCL=1;
//  148 	LCD_SDA=1;
//  149 	LCD_REST=1;
//  150 }
//  151 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  152 void LCD_Wrtie_Bus(char dat)
LCD_Wrtie_Bus:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function LCD_Wrtie_Bus
        CODE
//  153 {
        ; Saved register size: 0
        ; Auto size: 0
//  154     uint8 i=0, temp=0;
//  155     for(i=0;i<8;i++) //·¢ËÍÒ»¸ö°ËÎ»Êı¾İ 
        MOV     R0,#0x8
//  156     {
//  157         LCD_SCL=0;  
??LCD_Wrtie_Bus_0:
        CLR     0x90.7
//  158         temp = dat&0x80;
//  159         if (temp == 0)
        MOV     A,R1
        MOV     C,0xE0 /* A   */.7
        JC      ??LCD_Wrtie_Bus_1
//  160         {
//  161             LCD_SDA=0;
        CLR     0x90.5
        SJMP    ??LCD_Wrtie_Bus_2
//  162         }
//  163         else
//  164         {
//  165             LCD_SDA=1;
??LCD_Wrtie_Bus_1:
        SETB    0x90.5
//  166         }
//  167         LCD_SCL=1;       
??LCD_Wrtie_Bus_2:
        SETB    0x90.7
//  168         dat<<=1;    
        CLR     C
        RLC     A
        MOV     R1,A
//  169     }
        DEC     R0
        MOV     A,R0
        JNZ     ??LCD_Wrtie_Bus_0
//  170 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
        REQUIRE _A_P1
//  171 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  172 void LCD_WR_DATA8(char dat) //·¢ËÍÊı¾İ(8bitµÄÊı¾İ)
LCD_WR_DATA8:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function LCD_WR_DATA8
        CODE
//  173 {
        FUNCALL LCD_WR_DATA8, LCD_Wrtie_Bus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  174     LCD_DC=1;
        SETB    0x90.6
        CFI EndBlock cfiBlock2
//  175     LCD_Wrtie_Bus(dat);
        ; Setup parameters for call to function LCD_Wrtie_Bus
        REQUIRE ?Subroutine1
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine1
//  176 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ??LCD_Wrtie_Bus?relay
        CFI EndBlock cfiBlock3
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine35_0:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//  177 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  178 void LCD_WR_DATA(int dat)
LCD_WR_DATA:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function LCD_WR_DATA
        CODE
//  179 {
        FUNCALL LCD_WR_DATA, LCD_Wrtie_Bus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_WR_DATA, LCD_Wrtie_Bus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  180     LCD_DC=1;
        SETB    0x90.6
//  181     LCD_Wrtie_Bus(dat>>8);
        ; Setup parameters for call to function LCD_Wrtie_Bus
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     A,#0x8
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        MOV     R1,?V0 + 0
        LCALL   ??LCD_Wrtie_Bus?relay
//  182     LCD_Wrtie_Bus(dat);
        ; Setup parameters for call to function LCD_Wrtie_Bus
        MOV     A,R6
        MOV     R1,A
        LCALL   ??LCD_Wrtie_Bus?relay
//  183 }
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock5
        REQUIRE _A_P1
//  184 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  185 void LCD_WR_REG(uint8 cmd)	 
LCD_WR_REG:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function LCD_WR_REG
        CODE
//  186 {
        FUNCALL LCD_WR_REG, LCD_Wrtie_Bus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  187     LCD_DC=0; 
        CLR     0x90.6
//  188     LCD_Wrtie_Bus(cmd);
        ; Setup parameters for call to function LCD_Wrtie_Bus
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock6
        REQUIRE _A_P1
//  189 }
//  190 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  191  void LCD_WR_REG_DATA(uint8 reg,int da)
LCD_WR_REG_DATA:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function LCD_WR_REG_DATA
        CODE
//  192 {
        FUNCALL LCD_WR_REG_DATA, LCD_WR_REG
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_WR_REG_DATA, LCD_WR_DATA
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  193     LCD_WR_REG(reg);
        ; Setup parameters for call to function LCD_WR_REG
        LCALL   ??LCD_WR_REG?relay
//  194     LCD_WR_DATA(da);
        ; Setup parameters for call to function LCD_WR_DATA
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??LCD_WR_DATA?relay
//  195 }
        SJMP    ??Subroutine35_0
        CFI EndBlock cfiBlock7
//  196 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  197 void Address_set(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2)
Address_set:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function Address_set
        CODE
//  198 {  
        FUNCALL Address_set, LCD_WR_REG
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Address_set, LCD_WR_DATA8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Address_set, LCD_WR_DATA8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Address_set, LCD_WR_DATA8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Address_set, LCD_WR_DATA8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Address_set, LCD_WR_REG
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Address_set, LCD_WR_DATA8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Address_set, LCD_WR_DATA8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Address_set, LCD_WR_DATA8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Address_set, LCD_WR_DATA8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Address_set, LCD_WR_REG
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
//  199    LCD_WR_REG(0x2a);
??CrossCallReturnLabel_15:
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#0x2a
        LCALL   ??LCD_WR_REG?relay
//  200    LCD_WR_DATA8(x1>>8);
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,?V0 + 5
        LCALL   ??LCD_WR_DATA8?relay
//  201    LCD_WR_DATA8(x1);
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,?V0 + 4
        LCALL   ??LCD_WR_DATA8?relay
//  202    LCD_WR_DATA8(x2>>8);
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,?V0 + 3
        LCALL   ??LCD_WR_DATA8?relay
//  203    LCD_WR_DATA8(x2);
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,?V0 + 2
        LCALL   ??LCD_WR_DATA8?relay
//  204   
//  205    LCD_WR_REG(0x2b);
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#0x2b
        LCALL   ??LCD_WR_REG?relay
//  206    LCD_WR_DATA8(y1>>8);
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,?V0 + 1
        LCALL   ??LCD_WR_DATA8?relay
//  207    LCD_WR_DATA8(y1);
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,?V0 + 0
        LCALL   ??LCD_WR_DATA8?relay
//  208    LCD_WR_DATA8(y2>>8);
        ; Setup parameters for call to function LCD_WR_DATA8
        LCALL   ?Subroutine21 & 0xFFFF
//  209    LCD_WR_DATA8(y2);
//  210 
//  211    LCD_WR_REG(0x2C);
??CrossCallReturnLabel_32:
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#0x2c
        LCALL   ??LCD_WR_REG?relay
//  212 }
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock8
//  213 
//  214 #undef  USE_LANDSCAPE  
//  215 
//  216 //ÇåÆÁº¯Êı
//  217 //Color:ÒªÇåÆÁµÄÌî³äÉ«

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  218 void LCD_Clear(uint16 Color)
LCD_Clear:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function LCD_Clear
        CODE
//  219 {
        FUNCALL LCD_Clear, Address_set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Clear, LCD_WR_DATA8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Clear, LCD_WR_DATA8
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  220 	uint8 VH,VL;
//  221 	uint16 i,j;
//  222 	VH=Color>>8;
        MOV     A,R3
        MOV     R7,A
//  223 	VL=Color;	
        MOV     A,R2
        MOV     R6,A
//  224 	Address_set(0,0,LCD_W-1,160);
        ; Setup parameters for call to function Address_set
        MOV     ?V0 + 0,#-0x60
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#-0x7f
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_62:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  225         
//  226         for(i=0;i<LCD_W;i++)
        MOV     ?V0 + 1,#-0x7e
//  227              {
//  228               for (j=0;j<LCD_H;j++)
??LCD_Clear_0:
        MOV     ?V0 + 0,#-0x7c
//  229                     {
//  230                       LCD_WR_DATA8(VH);
??LCD_Clear_1:
        ; Setup parameters for call to function LCD_WR_DATA8
        LCALL   ?Subroutine21 & 0xFFFF
//  231                       LCD_WR_DATA8(VL);	
//  232                     }
??CrossCallReturnLabel_33:
        DEC     ?V0 + 0
        MOV     A,?V0 + 0
        JNZ     ??LCD_Clear_1
//  233               }
        DEC     ?V0 + 1
        MOV     A,?V0 + 1
        JNZ     ??LCD_Clear_0
//  234 }
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_33
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOV     A,R7
        MOV     R1,A
        LCALL   ??LCD_WR_DATA8?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     A,R6
        MOV     R1,A
        LCALL   ??LCD_WR_DATA8?relay
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
//  235 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  236 void HalLcdInit(void)
HalLcdInit:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function HalLcdInit
        CODE
//  237 {
        FUNCALL HalLcdInit, HalLcd_HW_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  238   HalLcd_HW_Init();
        ; Setup parameters for call to function HalLcd_HW_Init
        LCALL   ??HalLcd_HW_Init?relay
        CFI EndBlock cfiBlock13
//  239 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock14
//  240 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  241 void HalLcd_HW_Init(void)
HalLcd_HW_Init:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function HalLcd_HW_Init
        CODE
//  242 {
        FUNCALL HalLcd_HW_Init, LCD_DLY_ms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_DLY_ms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_DLY_ms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_DLY_ms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_DATA8
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WR_REG
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  243         halLcd_ConfigIO();
        ANL     0xf4,#0x1b
        ORL     0xfe,#0xe4
        SETB    0x90.6
        SETB    0x90.7
        SETB    0x90.5
        SETB    0x90.2
//  244 
//  245         LCD_REST=1;
        SETB    0x90.2
//  246         LCD_DLY_ms(5);	
        ; Setup parameters for call to function LCD_DLY_ms
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??LCD_DLY_ms?relay
//  247 	LCD_REST=0;
        CLR     0x90.2
//  248 	LCD_DLY_ms(5);
        ; Setup parameters for call to function LCD_DLY_ms
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??LCD_DLY_ms?relay
//  249 	LCD_REST=1;
        SETB    0x90.2
//  250         
//  251         //LCD_CS=1;
//  252         //LCD_DLY_ms(5);
//  253         //LCD_CS=0;
//  254 
//  255         LCD_WR_REG(0x11); //Sleep out
        ; Setup parameters for call to function LCD_WR_REG
        LCALL   ?Subroutine10 & 0xFFFF
//  256 	LCD_DLY_ms(120); //Delay 120ms
//  257 	//------------------------------------ST7735S Frame Rate-----------------------------------------//
//  258 	LCD_WR_REG(0xB1);
??CrossCallReturnLabel_5:
        LCALL   ?Subroutine12 & 0xFFFF
//  259 	LCD_WR_DATA8(0x05);
//  260 
//  261 
//  262         LCD_WR_REG(0x11);//Sleep exit 
??CrossCallReturnLabel_9:
        ; Setup parameters for call to function LCD_WR_REG
        LCALL   ?Subroutine10 & 0xFFFF
//  263         LCD_DLY_ms (120);
//  264          
//  265         //ST7735R Frame Rate
//  266         LCD_WR_REG(0xB1); 
??CrossCallReturnLabel_6:
        LCALL   ?Subroutine8 & 0xFFFF
//  267         LCD_WR_DATA8(0x01); 
//  268         
//  269         LCD_WR_DATA8(0x2C); LCD_WR_DATA8(0x2D); 
//  270         LCD_WR_REG(0xB2); 
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#-0x4e
        LCALL   ?Subroutine8 & 0xFFFF
//  271         LCD_WR_DATA8(0x01); LCD_WR_DATA8(0x2C); LCD_WR_DATA8(0x2D); 
//  272         LCD_WR_REG(0xB3); 
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#-0x4d
        LCALL   ?Subroutine8 & 0xFFFF
//  273         LCD_WR_DATA8(0x01); LCD_WR_DATA8(0x2C); LCD_WR_DATA8(0x2D); 
//  274         LCD_WR_DATA8(0x01); LCD_WR_DATA8(0x2C); LCD_WR_DATA8(0x2D); 
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x1
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_34:
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x2d
        LCALL   ??LCD_WR_DATA8?relay
//  275         
//  276         LCD_WR_REG(0xB4); //Column inversion 
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#-0x4c
        LCALL   ??LCD_WR_REG?relay
//  277         LCD_WR_DATA8(0x07); 
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x7
        LCALL   ??LCD_WR_DATA8?relay
//  278          
//  279         //ST7735R Power Sequence
//  280         LCD_WR_REG(0xC0); 
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#-0x40
        LCALL   ??LCD_WR_REG?relay
//  281         LCD_WR_DATA8(0xA2); LCD_WR_DATA8(0x02); LCD_WR_DATA8(0x84); 
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#-0x5e
        LCALL   ??LCD_WR_DATA8?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x2
        LCALL   ??LCD_WR_DATA8?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#-0x7c
        LCALL   ??LCD_WR_DATA8?relay
//  282         LCD_WR_REG(0xC1); LCD_WR_DATA8(0xC5); 
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#-0x3f
        LCALL   ??LCD_WR_REG?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#-0x3b
        LCALL   ??LCD_WR_DATA8?relay
//  283         LCD_WR_REG(0xC2); 
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#-0x3e
        LCALL   ??LCD_WR_REG?relay
//  284         LCD_WR_DATA8(0x0A); LCD_WR_DATA8(0x00); 
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0xa
        LCALL   ?Subroutine34 & 0xFFFF
//  285         LCD_WR_REG(0xC3); 
??CrossCallReturnLabel_53:
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#-0x3d
        LCALL   ?Subroutine13 & 0xFFFF
//  286         LCD_WR_DATA8(0x8A); LCD_WR_DATA8(0x2A); 
??CrossCallReturnLabel_11:
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x2a
        LCALL   ??LCD_WR_DATA8?relay
//  287         LCD_WR_REG(0xC4); 
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#-0x3c
        LCALL   ?Subroutine13 & 0xFFFF
//  288         LCD_WR_DATA8(0x8A); LCD_WR_DATA8(0xEE); 
??CrossCallReturnLabel_12:
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#-0x12
        LCALL   ??LCD_WR_DATA8?relay
//  289          
//  290         LCD_WR_REG(0xC5); //VCOM 
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#-0x3b
        LCALL   ??LCD_WR_REG?relay
//  291         LCD_WR_DATA8(0x0E); 
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0xe
        LCALL   ??LCD_WR_DATA8?relay
//  292          
//  293         LCD_WR_REG(0x36); //MX, MY, RGB mode 
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#0x36
        LCALL   ??LCD_WR_REG?relay
//  294         LCD_WR_DATA8(0xC8); 
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#-0x38
        LCALL   ??LCD_WR_DATA8?relay
//  295         
//  296         //ST7735R Gamma Sequence
//  297         LCD_WR_REG(0xe0); 
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#-0x20
        LCALL   ?Subroutine14 & 0xFFFF
//  298         LCD_WR_DATA8(0x0f); LCD_WR_DATA8(0x1a); 
??CrossCallReturnLabel_13:
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x1a
        LCALL   ?Subroutine23 & 0xFFFF
//  299         LCD_WR_DATA8(0x0f); LCD_WR_DATA8(0x18); 
??CrossCallReturnLabel_36:
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x18
        LCALL   ??LCD_WR_DATA8?relay
//  300         LCD_WR_DATA8(0x2f); LCD_WR_DATA8(0x28); 
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x2f
        LCALL   ??LCD_WR_DATA8?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x28
        LCALL   ??LCD_WR_DATA8?relay
//  301         LCD_WR_DATA8(0x20); LCD_WR_DATA8(0x22); 
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x20
        LCALL   ??LCD_WR_DATA8?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x22
        LCALL   ??LCD_WR_DATA8?relay
//  302         LCD_WR_DATA8(0x1f); LCD_WR_DATA8(0x1b); 
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x1f
        LCALL   ??LCD_WR_DATA8?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x1b
        LCALL   ??LCD_WR_DATA8?relay
//  303         LCD_WR_DATA8(0x23); LCD_WR_DATA8(0x37); LCD_WR_DATA8(0x00); 
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x23
        LCALL   ??LCD_WR_DATA8?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x37
        LCALL   ?Subroutine20 & 0xFFFF
//  304         
//  305         LCD_WR_DATA8(0x07); 
//  306         LCD_WR_DATA8(0x02); LCD_WR_DATA8(0x10); 
??CrossCallReturnLabel_30:
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x2
        LCALL   ?Subroutine24 & 0xFFFF
//  307         LCD_WR_REG(0xe1); 
??CrossCallReturnLabel_38:
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#-0x1f
        LCALL   ?Subroutine14 & 0xFFFF
//  308         LCD_WR_DATA8(0x0f); LCD_WR_DATA8(0x1b); 
??CrossCallReturnLabel_14:
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x1b
        LCALL   ?Subroutine23 & 0xFFFF
//  309         LCD_WR_DATA8(0x0f); LCD_WR_DATA8(0x17); 
??CrossCallReturnLabel_37:
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x17
        LCALL   ??LCD_WR_DATA8?relay
//  310         LCD_WR_DATA8(0x33); LCD_WR_DATA8(0x2c); 
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x33
        LCALL   ?Subroutine22 & 0xFFFF
//  311         LCD_WR_DATA8(0x29); LCD_WR_DATA8(0x2e); 
??CrossCallReturnLabel_35:
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x29
        LCALL   ??LCD_WR_DATA8?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x2e
        LCALL   ??LCD_WR_DATA8?relay
//  312         LCD_WR_DATA8(0x30); LCD_WR_DATA8(0x30); 
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x30
        LCALL   ??LCD_WR_DATA8?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x30
        LCALL   ??LCD_WR_DATA8?relay
//  313         LCD_WR_DATA8(0x39); LCD_WR_DATA8(0x3f); 
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x39
        LCALL   ??LCD_WR_DATA8?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x3f
        LCALL   ?Subroutine20 & 0xFFFF
//  314         LCD_WR_DATA8(0x00); LCD_WR_DATA8(0x07); 
//  315         LCD_WR_DATA8(0x03); LCD_WR_DATA8(0x10);  
??CrossCallReturnLabel_31:
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x3
        LCALL   ?Subroutine24 & 0xFFFF
//  316         
//  317         LCD_WR_REG(0x2a);
??CrossCallReturnLabel_39:
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#0x2a
        LCALL   ?Subroutine9 & 0xFFFF
//  318         LCD_WR_DATA8(0x00);LCD_WR_DATA8(0x00);
//  319         LCD_WR_DATA8(0x00);LCD_WR_DATA8(0x7f);
//  320         LCD_WR_REG(0x2b);
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#0x2b
        LCALL   ?Subroutine9 & 0xFFFF
//  321         LCD_WR_DATA8(0x00);LCD_WR_DATA8(0x00);
//  322         LCD_WR_DATA8(0x00);LCD_WR_DATA8(0x7f);
//  323         
//  324         LCD_WR_REG(0xF0); //Enable test command  
??CrossCallReturnLabel_4:
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#-0x10
        LCALL   ?Subroutine32 & 0xFFFF
//  325         LCD_WR_DATA8(0x01); 
//  326         LCD_WR_REG(0xF6); //Disable ram power save mode 
??CrossCallReturnLabel_49:
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#-0xa
        LCALL   ?Subroutine33 & 0xFFFF
//  327         LCD_WR_DATA8(0x00); 
//  328          
//  329         LCD_WR_REG(0x3A); //65k mode 
??CrossCallReturnLabel_51:
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#0x3a
        LCALL   ?Subroutine12 & 0xFFFF
//  330         LCD_WR_DATA8(0x05); 
//  331         LCD_WR_REG(0x29); //Display on
??CrossCallReturnLabel_10:
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#0x29
        LCALL   ??LCD_WR_REG?relay
//  332         LCD_WR_REG(0x2C);
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#0x2c
        LCALL   ??LCD_WR_REG?relay
//  333 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock15
        REQUIRE _A_P1
        REQUIRE P1SEL
        REQUIRE P1DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond17) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond17) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond17) CFA_SP SP+-5
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        LCALL   ??LCD_WR_DATA8?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x10
        LCALL   ??LCD_WR_DATA8?relay
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_36
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond20) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond20) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond20) CFA_SP SP+-5
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        LCALL   ??LCD_WR_DATA8?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0xf
        LCALL   ??LCD_WR_DATA8?relay
        RET
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_35
        CFI (cfiCond23) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond23) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond23) CFA_SP SP+-5
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        LCALL   ??LCD_WR_DATA8?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x2c
        LCALL   ??LCD_WR_DATA8?relay
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond26) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond26) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond26) CFA_SP SP+-5
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_54:
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x7
        LCALL   ??LCD_WR_DATA8?relay
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_30
        CFI (cfiCond29) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond29) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond29) CFA_SP SP+-5
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_31
        CFI (cfiCond30) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond30) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond30) CFA_SP SP+-5
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_3
        CFI (cfiCond31) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond31) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond31) CFA_SP SP+-5
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_4
        CFI (cfiCond32) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond32) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond32) CFA_SP SP+-5
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        LCALL   ??LCD_WR_DATA8?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x0
        LCALL   ??LCD_WR_DATA8?relay
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond35) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond35) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond35) CFA_SP SP+-5
        CFI Block cfiPicker36 Using cfiCommon1
        CFI (cfiPicker36) NoFunction
        CFI (cfiPicker36) Picker
        LCALL   ??LCD_WR_REG?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0xf
        LCALL   ??LCD_WR_DATA8?relay
        RET
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiPicker36

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond38) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond38) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond38) CFA_SP SP+-5
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        LCALL   ??LCD_WR_REG?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#-0x76
        LCALL   ??LCD_WR_DATA8?relay
        RET
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond40 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond41) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond41) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond41) CFA_SP SP+-5
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        LCALL   ??LCD_WR_REG?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x5
        LCALL   ??LCD_WR_DATA8?relay
        RET
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond44) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond44) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond44) CFA_SP SP+-5
        CFI Block cfiPicker45 Using cfiCommon1
        CFI (cfiPicker45) NoFunction
        CFI (cfiPicker45) Picker
        MOV     R1,#0x11
        LCALL   ??LCD_WR_REG?relay
        ; Setup parameters for call to function LCD_DLY_ms
        ; Setup parameters for call to function LCD_DLY_ms
        MOV     R2,#0x78
        MOV     R3,#0x0
        LCALL   ??LCD_DLY_ms?relay
        ; Setup parameters for call to function LCD_WR_REG
        ; Setup parameters for call to function LCD_WR_REG
        MOV     R1,#-0x4f
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiPicker45

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond46 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond47) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond47) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond47) CFA_SP SP+-5
        CFI Block cfiPicker48 Using cfiCommon1
        CFI (cfiPicker48) NoFunction
        CFI (cfiPicker48) Picker
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_52:
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x0
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_55:
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x7f
        LCALL   ??LCD_WR_DATA8?relay
        RET
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiPicker48

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
        CFI Block cfiCond49 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_3
        CFI (cfiCond50) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond50) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond50) CFA_SP SP+-5
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_4
        CFI (cfiCond51) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond51) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond51) CFA_SP SP+-5
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        LCALL   ??LCD_WR_REG?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x0
        LCALL   ??LCD_WR_DATA8?relay
        RET
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond54) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond54) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond54) CFA_SP SP+-5
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond55) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond55) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond55) CFA_SP SP+-5
        CFI Block cfiPicker56 Using cfiCommon1
        CFI (cfiPicker56) NoFunction
        CFI (cfiPicker56) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_50:
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x2c
        LCALL   ??LCD_WR_DATA8?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x2d
        LCALL   ??LCD_WR_DATA8?relay
        RET
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiPicker56

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_0
        CFI (cfiCond58) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond58) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond58) CFA_SP SP+-5
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_1
        CFI (cfiCond59) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond59) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond59) CFA_SP SP+-5
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_2
        CFI (cfiCond60) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond60) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond60) CFA_SP SP+-5
        CFI Block cfiPicker61 Using cfiCommon1
        CFI (cfiPicker61) NoFunction
        CFI (cfiPicker61) Picker
        LCALL   ??LCD_WR_REG?relay
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        ; Setup parameters for call to function LCD_WR_DATA8
        MOV     R1,#0x1
        LCALL   ??LCD_WR_DATA8?relay
        RET
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiPicker61
//  334 
//  335 //ÔÚÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸öºº×Ö(32*33´óĞ¡)
//  336 //dcolorÎªÄÚÈİÑÕÉ«£¬gbcolorÎª±³¾²ÑÕÉ«

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  337 void showhanzi24x24(unsigned int x,unsigned int y,unsigned char index, unsigned char *temp, unsigned int pointcolor, unsigned int back_color)	
showhanzi24x24:
        CFI Block cfiBlock62 Using cfiCommon0
        CFI Function showhanzi24x24
        CODE
//  338 {  
        FUNCALL showhanzi24x24, Address_set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL showhanzi24x24, LCD_WR_DATA
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL showhanzi24x24, LCD_WR_DATA
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x11
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        ; Saved register size: 17
        ; Auto size: 0
        MOV     ?V0 + 4,R1
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
//  339 	unsigned char i,j;    
//  340     Address_set(x,y,x+23,y+23); //ÉèÖÃÇøÓò      
??CrossCallReturnLabel_24:
        ADD     A,#0x17
        MOV     ?V0 + 6,A
        MOV     A,R5
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_56:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R2
        ADD     A,#0x17
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_59:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_64:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
//  341 	temp+=index*72;	
        MOV     A,?V0 + 4
        MOV     B,#0x48
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,R6
        ADD     A,R0
        MOV     R6,A
        MOV     A,R7
        ADDC    A,R1
        MOV     R7,A
//  342 	for(j=0;j<72;j++)
        MOV     ?V0 + 8,#0x48
//  343 	{
//  344 		for(i=0;i<8;i++)
??showhanzi24x24_0:
        MOV     ?V0 + 5,#0x0
//  345 		{ 		     
//  346 		 	if((*temp&(1<<i))!=0)
??showhanzi24x24_1:
        MOV     ?V0 + 6,#0x1
        MOV     ?V0 + 7,#0x0
        MOV     A,?V0 + 5
        MOV     R0,#?V0 + 6
        LCALL   ?S_SHL
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ANL     A,?V0 + 6
        JZ      ??showhanzi24x24_2
//  347 			{
//  348 				LCD_WR_DATA(pointcolor);
        ; Setup parameters for call to function LCD_WR_DATA
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        SJMP    ??showhanzi24x24_3
//  349 			} 
//  350 			else
//  351 			{
//  352 				LCD_WR_DATA(back_color);
??showhanzi24x24_2:
        ; Setup parameters for call to function LCD_WR_DATA
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
//  353 			}   
//  354 		}
??showhanzi24x24_3:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_7:
        JC      ??showhanzi24x24_1
//  355 		temp++;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  356 	 }
        DEC     ?V0 + 8
        MOV     A,?V0 + 8
        JNZ     ??showhanzi24x24_0
        CFI EndBlock cfiBlock62
//  357 }
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock63 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x9
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock63
//  358 
//  359 //ÔÚÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸öºº×Ö(16*16´óĞ¡)
//  360 //pointcolorÎªÄÚÈİÑÕÉ«£¬gbcolorÎª±³¾²ÑÕÉ«

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  361 void showhanzi16x16(unsigned int x,unsigned int y,unsigned char index,unsigned char *temp, unsigned int pointcolor, unsigned int back_color)	
showhanzi16x16:
        CFI Block cfiBlock64 Using cfiCommon0
        CFI Function showhanzi16x16
        CODE
//  362 {  
        FUNCALL showhanzi16x16, Address_set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL showhanzi16x16, LCD_WR_DATA
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL showhanzi16x16, LCD_WR_DATA
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x11
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        ; Saved register size: 17
        ; Auto size: 0
        MOV     ?V0 + 4,R1
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
//  363 	unsigned char i,j;
//  364         Address_set(x,y,x+15,y+15); //ÉèÖÃÇøÓò      
??CrossCallReturnLabel_25:
        ADD     A,#0xf
        MOV     ?V0 + 6,A
        MOV     A,R5
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_57:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R2
        ADD     A,#0xf
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_60:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_65:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 17)
//  365 	temp+=index*32;	
        MOV     ?V0 + 6,?V0 + 4
        MOV     ?V0 + 7,#0x0
        MOV     A,#0x5
        MOV     R0,#?V0 + 6
        LCALL   ?S_SHL
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     R6,A
        MOV     A,R7
        ADDC    A,?V0 + 7
        MOV     R7,A
//  366 	for(j=0;j<32;j++)
        MOV     ?V0 + 8,#0x20
//  367 	{
//  368 		for(i=0;i<8;i++)
??showhanzi16x16_0:
        MOV     ?V0 + 5,#0x0
//  369 		{ 		     
//  370 		 	if((*temp&(1<<i))!=0)
??showhanzi16x16_1:
        MOV     ?V0 + 6,#0x1
        MOV     ?V0 + 7,#0x0
        MOV     A,?V0 + 5
        MOV     R0,#?V0 + 6
        LCALL   ?S_SHL
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ANL     A,?V0 + 6
        JZ      ??showhanzi16x16_2
//  371 			{
//  372 				LCD_WR_DATA(pointcolor);
        ; Setup parameters for call to function LCD_WR_DATA
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        SJMP    ??showhanzi16x16_3
//  373 			} 
//  374 			else
//  375 			{
//  376 				LCD_WR_DATA(back_color);
??showhanzi16x16_2:
        ; Setup parameters for call to function LCD_WR_DATA
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
//  377 			}   
//  378 		}
??showhanzi16x16_3:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_8:
        JC      ??showhanzi16x16_1
//  379 		temp++;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  380 	 }
        DEC     ?V0 + 8
        MOV     A,?V0 + 8
        JNZ     ??showhanzi16x16_0
//  381 }
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock64

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond65 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_59
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker68 Using cfiCommon1
        CFI (cfiPicker68) NoFunction
        CFI (cfiPicker68) Picker
        MOV     ?V0 + 6,A
        MOV     A,R3
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiPicker68
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine36_0:
        CFI Block cfiCond69 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_56
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond70 Using cfiCommon0
        CFI (cfiCond70) NoFunction
        CFI (cfiCond70) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond70) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond70) CFA_SP SP+0
        CFI (cfiCond70) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker75 Using cfiCommon1
        CFI (cfiPicker75) NoFunction
        CFI (cfiPicker75) Picker
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 6
        RET
        CFI EndBlock cfiCond69
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiPicker75

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond76 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker78 Using cfiCommon1
        CFI (cfiPicker78) NoFunction
        CFI (cfiPicker78) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        ; Setup parameters for call to function Address_set
        ; Setup parameters for call to function Address_set
        MOV     A,R4
        RET
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiPicker78

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond79 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker81 Using cfiCommon1
        CFI (cfiPicker81) NoFunction
        CFI (cfiPicker81) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     A,#0x15
        RET
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiPicker81

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond82 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker84 Using cfiCommon1
        CFI (cfiPicker84) NoFunction
        CFI (cfiPicker84) Picker
        LCALL   ??LCD_WR_DATA?relay
        INC     ?V0 + 5
        MOV     A,?V0 + 5
        CLR     C
        SUBB    A,#0x8
        RET
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiPicker84
//  382 
//  383 //»­µã
//  384 //POINT_COLOR:´ËµãµÄÑÕÉ«

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  385 void LCD_DrawPoint(uint16 x,uint16 y)
LCD_DrawPoint:
        CFI Block cfiBlock85 Using cfiCommon0
        CFI Function LCD_DrawPoint
        CODE
//  386 {
        FUNCALL LCD_DrawPoint, Address_set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_DrawPoint, LCD_WR_DATA
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  387 	Address_set(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ 
        ; Setup parameters for call to function Address_set
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_66:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  388 	LCD_WR_DATA(GREEN); 	    
        ; Setup parameters for call to function LCD_WR_DATA
        MOV     R2,#-0x20
        MOV     R3,#0x7
        LCALL   ??LCD_WR_DATA?relay
        CFI EndBlock cfiBlock85
//  389 } 	 
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock86 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock86
//  390 
//  391 //»­Ò»¸ö´óµã
//  392 //POINT_COLOR:´ËµãµÄÑÕÉ«

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  393 void LCD_DrawPoint_big(uint16 x,uint16 y)
LCD_DrawPoint_big:
        CFI Block cfiBlock87 Using cfiCommon0
        CFI Function LCD_DrawPoint_big
        CODE
//  394 {
        FUNCALL LCD_DrawPoint_big, LCD_Fill
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  395 	LCD_Fill(x-1,y-1,x+1,y+1,POINT_COLOR);
        ; Setup parameters for call to function LCD_Fill
        MOV     DPTR,#POINT_COLOR
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R4
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R2
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R4
        ADD     A,#-0x1
        DEC     R4
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     R5,A
        MOV     A,R2
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R3,A
        LCALL   ??LCD_Fill?relay
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  396 } 
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock87
//  397 //====================================================================================
//  398 /* º¯Êı: void DispPic(const unsigned char *p)
//  399    ÃèÊö: È«ÆÁÏÔÊ¾Ò»ÕÅÍ¼Æ¬£¬ p ÎªÒªÏÔÊ¾µÄÑÕÉ«ÖµµÄÖ¸Õë  8Î»¸ñÊ½ */
//  400 //====================================================================================

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  401 void DispPic(const unsigned char *p)
DispPic:
        CFI Block cfiBlock88 Using cfiCommon0
        CFI Function DispPic
        CODE
//  402 {
        FUNCALL DispPic, Address_set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DispPic, LCD_WR_DATA
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL DispPic, LCD_WR_DATA
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  403 	unsigned int i,j;
//  404 	unsigned char pic_h,pic_l;
//  405 
//  406 		//SetDisArea(0,LCD_W-1,0,LCD_H-1);
//  407 	Address_set(0,LCD_W-1,0,LCD_H-1);
        ; Setup parameters for call to function Address_set
        MOV     ?V0 + 0,#-0x7d
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        CLR     A
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#-0x7f
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_63:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  408 	//GPIO_SetBits(GPIOB, GPIO_Pin_14); //½ÓÏÂÀ´½«ÒªÌî³äÊı¾İ
//  409 	 LCD_DC=1;
        SETB    0x90.6
//  410 	for(i=0;i<LCD_W;i++)//ĞĞ
        MOV     ?V0 + 3,#-0x7e
//  411 	{
//  412 	    for(j=0;j<LCD_H;j++)//ÁĞ
??DispPic_0:
        MOV     ?V0 + 2,#-0x7c
//  413 		{    
//  414 		  pic_l=(*p);
??DispPic_1:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
//  415 		  pic_h=(*(p+1));
//  416 			LCD_WR_DATA(pic_h);				  
        ; Setup parameters for call to function LCD_WR_DATA
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??LCD_WR_DATA?relay
//  417 			LCD_WR_DATA(pic_l);
        ; Setup parameters for call to function LCD_WR_DATA
        MOV     R2,?V0 + 0
        MOV     R3,#0x0
        LCALL   ??LCD_WR_DATA?relay
//  418 			p=p+2;
        MOV     A,R6
        ADD     A,#0x2
        INC     R6
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  419 		}
        DEC     ?V0 + 2
        MOV     A,?V0 + 2
        JNZ     ??DispPic_1
//  420 	}
        DEC     ?V0 + 3
        MOV     A,?V0 + 3
        JNZ     ??DispPic_0
//  421 }
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock88
        REQUIRE _A_P1
//  422 //ÔÚÖ¸¶¨ÇøÓòÄÚÌî³äÖ¸¶¨ÑÕÉ«
//  423 //ÇøÓò´óĞ¡:
//  424 //  (xend-xsta)*(yend-ysta)

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  425 void LCD_Fill(uint16 xsta,uint16 ysta,uint16 xend,uint16 yend,uint16 color)
LCD_Fill:
        CFI Block cfiBlock89 Using cfiCommon0
        CFI Function LCD_Fill
        CODE
//  426 {          
        FUNCALL LCD_Fill, Address_set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Fill, LCD_WR_DATA
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
//  427 	uint16 i,j; 
//  428 	Address_set(xsta,ysta,xend,yend);      //ÉèÖÃ¹â±êÎ»ÖÃ 
??CrossCallReturnLabel_27:
        ; Setup parameters for call to function Address_set
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_67:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
//  429 	for(i=ysta;i<=yend;i++)
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        SJMP    ??LCD_Fill_0
//  430 	{													   	 	
//  431 		for(j=xsta;j<=xend;j++)LCD_WR_DATA(color);//ÉèÖÃ¹â±êÎ»ÖÃ 	    
??LCD_Fill_1:
        ; Setup parameters for call to function LCD_WR_DATA
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??LCD_WR_DATA?relay
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
??LCD_Fill_2:
        CLR     C
        MOV     A,?V0 + 6
        SUBB    A,R6
        MOV     A,?V0 + 7
        SUBB    A,R7
        JNC     ??LCD_Fill_1
        MOV     A,?V0 + 4
        ADD     A,#0x1
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
??LCD_Fill_0:
        CLR     C
        MOV     A,?V0 + 8
        SUBB    A,?V0 + 4
        MOV     A,?V0 + 9
        SUBB    A,?V0 + 5
        JC      ??LCD_Fill_3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
        SJMP    ??LCD_Fill_2
        CFI EndBlock cfiBlock89
//  432 	} 					  	    
//  433 }  
??LCD_Fill_3:
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiBlock90 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock90

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond91 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_62
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker93 Using cfiCommon1
        CFI (cfiPicker93) NoFunction
        CFI (cfiPicker93) Picker
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x0
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiPicker93
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
        CFI Block cfiCond94 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_64
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_65
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond95) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond95) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_62
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker101 Using cfiCommon1
        CFI (cfiPicker101) NoFunction
        CFI (cfiPicker101) Picker
        LCALL   ??Address_set?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiPicker101
//  434 
//  435 //»­Ïß
//  436 //x1,y1:Æğµã×ø±ê
//  437 //x2,y2:ÖÕµã×ø±ê  

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  438 void LCD_DrawLine(uint16 x1, uint16 y1, uint16 x2, uint16 y2)
LCD_DrawLine:
        CFI Block cfiBlock102 Using cfiCommon0
        CFI Function LCD_DrawLine
        CODE
//  439 {
        FUNCALL LCD_DrawLine, LCD_DrawPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
//  440 	uint16 t; 
//  441 	int xerr=0,yerr=0,delta_x,delta_y,distance; 
        MOV     ?V0 + 10,#0x0
        MOV     ?V0 + 11,#0x0
        MOV     ?V0 + 8,#0x0
        MOV     ?V0 + 9,#0x0
//  442 	int incx,incy,uRow,uCol; 
//  443 
//  444 	delta_x=x2-x1; //¼ÆËã×ø±êÔöÁ¿ 
        MOV     A,R6
        CLR     C
        SUBB    A,R2
        MOV     ?V0 + 0,A
        MOV     A,R7
        SUBB    A,R3
        MOV     ?V0 + 1,A
//  445 	delta_y=y2-y1; 
        MOV     A,R0
        CLR     C
        SUBB    A,R4
        MOV     R6,A
        MOV     A,R1
        SUBB    A,R5
        MOV     R7,A
//  446 	uRow=x1; 
        MOV     ?V0 + 12,R2
        MOV     ?V0 + 13,R3
//  447 	uCol=y1; 
        MOV     ?V0 + 14,R4
        MOV     ?V0 + 15,R5
//  448 	if(delta_x>0)incx=1; //ÉèÖÃµ¥²½·½Ïò 
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x1
        MOV     A,?V0 + 1
        LCALL   ??Subroutine39_0 & 0xFFFF
??CrossCallReturnLabel_73:
        JC      ??LCD_DrawLine_0
        MOV     ?V0 + 6,#0x1
??LCD_DrawLine_1:
        MOV     ?V0 + 7,#0x0
        SJMP    ??LCD_DrawLine_2
//  449 	else if(delta_x==0)incx=0;//´¹Ö±Ïß 
??LCD_DrawLine_0:
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??LCD_DrawLine_3
        MOV     ?V0 + 6,#0x0
        SJMP    ??LCD_DrawLine_1
//  450 	else {incx=-1;delta_x=-delta_x;} 
??LCD_DrawLine_3:
        MOV     ?V0 + 6,#-0x1
        MOV     ?V0 + 7,#-0x1
        CLR     C
        CLR     A
        SUBB    A,?V0 + 0
        MOV     R0,A
        CLR     A
        SUBB    A,?V0 + 1
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
//  451 	if(delta_y>0)incy=1; 
??LCD_DrawLine_2:
        CLR     C
        MOV     A,R6
        SUBB    A,#0x1
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_74:
        JC      ??LCD_DrawLine_4
        MOV     ?V0 + 4,#0x1
??LCD_DrawLine_5:
        MOV     ?V0 + 5,#0x0
        SJMP    ??LCD_DrawLine_6
//  452 	else if(delta_y==0)incy=0;//Ë®Æ½Ïß 
??LCD_DrawLine_4:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??LCD_DrawLine_7
        MOV     ?V0 + 4,#0x0
        SJMP    ??LCD_DrawLine_5
//  453 	else{incy=-1;delta_y=-delta_y;} 
??LCD_DrawLine_7:
        MOV     ?V0 + 4,#-0x1
        MOV     ?V0 + 5,#-0x1
        CLR     C
        CLR     A
        SUBB    A,R6
        MOV     R0,A
        CLR     A
        SUBB    A,R7
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
//  454 	if( delta_x>delta_y)distance=delta_x; //Ñ¡È¡»ù±¾ÔöÁ¿×ø±êÖá 
??LCD_DrawLine_6:
        CLR     C
        MOV     A,R6
        SUBB    A,?V0 + 0
        MOV     A,R7
        SUBB    A,?V0 + 1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??LCD_DrawLine_8
        MOV     ?V0 + 2,?V0 + 0
        MOV     ?V0 + 3,?V0 + 1
        SJMP    ??LCD_DrawLine_9
//  455 	else distance=delta_y; 
??LCD_DrawLine_8:
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,R7
//  456 	for(t=0;t<=distance+1;t++ )//»­ÏßÊä³ö 
??LCD_DrawLine_9:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  457 	{  
//  458 		LCD_DrawPoint(uRow,uCol);//»­µã 
??LCD_DrawLine_10:
        ; Setup parameters for call to function LCD_DrawPoint
        MOV     R4,?V0 + 14
        MOV     R5,?V0 + 15
        MOV     R2,?V0 + 12
        MOV     R3,?V0 + 13
        LCALL   ??LCD_DrawPoint?relay
//  459 		xerr+=delta_x ; 
        MOV     A,?V0 + 10
        ADD     A,?V0 + 0
        MOV     ?V0 + 10,A
        MOV     A,?V0 + 11
        ADDC    A,?V0 + 1
        MOV     ?V0 + 11,A
//  460 		yerr+=delta_y ; 
        MOV     A,?V0 + 8
        ADD     A,R6
        MOV     ?V0 + 8,A
        MOV     A,?V0 + 9
        ADDC    A,R7
        MOV     ?V0 + 9,A
//  461 		if(xerr>distance) 
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,?V0 + 10
        MOV     A,?V0 + 3
        SUBB    A,?V0 + 11
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??LCD_DrawLine_11
//  462 		{ 
//  463 			xerr-=distance; 
        CLR     C
        MOV     A,?V0 + 10
        SUBB    A,?V0 + 2
        MOV     ?V0 + 10,A
        MOV     A,?V0 + 11
        SUBB    A,?V0 + 3
        MOV     ?V0 + 11,A
//  464 			uRow+=incx; 
        MOV     A,?V0 + 12
        ADD     A,?V0 + 6
        MOV     ?V0 + 12,A
        MOV     A,?V0 + 13
        ADDC    A,?V0 + 7
        MOV     ?V0 + 13,A
//  465 		} 
//  466 		if(yerr>distance) 
??LCD_DrawLine_11:
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,?V0 + 8
        MOV     A,?V0 + 3
        SUBB    A,?V0 + 9
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??LCD_DrawLine_12
//  467 		{ 
//  468 			yerr-=distance; 
        CLR     C
        MOV     A,?V0 + 8
        SUBB    A,?V0 + 2
        MOV     ?V0 + 8,A
        MOV     A,?V0 + 9
        SUBB    A,?V0 + 3
        MOV     ?V0 + 9,A
//  469 			uCol+=incy; 
        MOV     A,?V0 + 14
        ADD     A,?V0 + 4
        MOV     ?V0 + 14,A
        MOV     A,?V0 + 15
        ADDC    A,?V0 + 5
        MOV     ?V0 + 15,A
//  470 		} 
//  471 	}  
??LCD_DrawLine_12:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        MOV     A,?V0 + 2
        ADD     A,#0x1
        MOV     R2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     C
        MOV     A,R2
        SUBB    A,R0
        MOV     A,R3
        SUBB    A,R1
        JC      $+5
        LJMP    ??LCD_DrawLine_10 & 0xFFFF
//  472 }    
        MOV     A,#0x2
        CFI EndBlock cfiBlock102
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiBlock103 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Valid
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock103

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond104 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond107) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond107) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond107) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond108) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 13)
        CFI Block cfiPicker111 Using cfiCommon1
        CFI (cfiPicker111) NoFunction
        CFI (cfiPicker111) Picker
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        RET
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiPicker111
//  473 
//  474 //»­¾ØĞÎ

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  475 void LCD_DrawRectangle(uint16 x1, uint16 y1, uint16 x2, uint16 y2)
LCD_DrawRectangle:
        CFI Block cfiBlock112 Using cfiCommon0
        CFI Function LCD_DrawRectangle
        CODE
//  476 {
        FUNCALL LCD_DrawRectangle, LCD_DrawLine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_DrawRectangle, LCD_DrawLine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_DrawRectangle, LCD_DrawLine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_DrawRectangle, LCD_DrawLine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  477 	LCD_DrawLine(x1,y1,x2,y1);
        ; Setup parameters for call to function LCD_DrawLine
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_71:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  478 	LCD_DrawLine(x1,y1,x1,y2);
        ; Setup parameters for call to function LCD_DrawLine
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_69:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  479 	LCD_DrawLine(x1,y2,x2,y2);
        ; Setup parameters for call to function LCD_DrawLine
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_70:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  480 	LCD_DrawLine(x2,y1,x2,y2);
        ; Setup parameters for call to function LCD_DrawLine
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_72:
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock112
//  481 }
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiBlock113 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock113

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond114 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_69
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker116 Using cfiCommon1
        CFI (cfiPicker116) NoFunction
        CFI (cfiPicker116) Picker
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiPicker116
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
        CFI Block cfiCond117 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_71
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_72
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond118) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_70
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker121 Using cfiCommon1
        CFI (cfiPicker121) NoFunction
        CFI (cfiPicker121) Picker
        LCALL   ??LCD_DrawLine?relay
        MOV     A,#0x4
        RET
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiPicker121

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond122 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond123) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond123) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond124) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond124) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_29
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond125) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker126 Using cfiCommon1
        CFI (cfiPicker126) NoFunction
        CFI (cfiPicker126) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        RET
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiPicker126
//  482 
//  483 //ÔÚÖ¸¶¨Î»ÖÃ»­Ò»¸öÖ¸¶¨´óĞ¡µÄÔ²
//  484 //(x,y):ÖĞĞÄµã
//  485 //r    :°ë¾¶

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  486 void Draw_Circle(uint16 x0,uint16 y0,uint8 r)
Draw_Circle:
        CFI Block cfiBlock127 Using cfiCommon0
        CFI Function Draw_Circle
        CODE
//  487 {
        FUNCALL Draw_Circle, LCD_DrawPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Draw_Circle, LCD_DrawPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Draw_Circle, LCD_DrawPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Draw_Circle, LCD_DrawPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Draw_Circle, LCD_DrawPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Draw_Circle, LCD_DrawPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Draw_Circle, LCD_DrawPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Draw_Circle, LCD_DrawPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Draw_Circle, LCD_DrawPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Draw_Circle, LCD_DrawPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     ?V0 + 14,R4
        MOV     ?V0 + 15,R5
//  488 	int a,b;
//  489 	int di;
//  490 	a=0;b=r;	  
        MOV     ?V0 + 10,#0x0
        MOV     ?V0 + 11,#0x0
        MOV     R0,A
        MOV     ?V0 + 12,R0
        MOV     ?V0 + 13,#0x0
//  491 	di=3-(r<<1);             //ÅĞ¶ÏÏÂ¸öµãÎ»ÖÃµÄ±êÖ¾
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#0x3
        SUBB    A,R0
        MOV     R6,A
        CLR     A
        SUBB    A,R1
        MOV     R7,A
        SJMP    ??Draw_Circle_0
//  492 	while(a<=b)
//  493 	{
//  494 		LCD_DrawPoint(x0-b,y0-a);             //3           
//  495 		LCD_DrawPoint(x0+b,y0-a);             //0           
//  496 		LCD_DrawPoint(x0-a,y0+b);             //1       
//  497 		LCD_DrawPoint(x0-b,y0-a);             //7           
//  498 		LCD_DrawPoint(x0-a,y0-b);             //2             
//  499 		LCD_DrawPoint(x0+b,y0+a);             //4               
//  500 		LCD_DrawPoint(x0+a,y0-b);             //5
//  501 		LCD_DrawPoint(x0+a,y0+b);             //6 
//  502 		LCD_DrawPoint(x0-b,y0+a);             
//  503 		a++;
//  504 		//Ê¹ÓÃBresenhamËã·¨»­Ô²     
//  505 		if(di<0)di +=4*a+6;	  
//  506 		else
//  507 		{
//  508 			di+=10+4*(a-b);   
??Draw_Circle_1:
        MOV     A,?V0 + 10
        CLR     C
        SUBB    A,?V0 + 12
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 11
        SUBB    A,?V0 + 13
        MOV     ?V0 + 1,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,#0xa
        LCALL   ?Subroutine29 & 0xFFFF
//  509 			b--;
??CrossCallReturnLabel_44:
        MOV     A,?V0 + 12
        ADD     A,#-0x1
        MOV     ?V0 + 12,A
        MOV     A,?V0 + 13
        ADDC    A,#-0x1
        MOV     ?V0 + 13,A
//  510 		} 
//  511 		LCD_DrawPoint(x0+a,y0+b);
??Draw_Circle_2:
        ; Setup parameters for call to function LCD_DrawPoint
        MOV     A,?V0 + 14
        ADD     A,?V0 + 12
        MOV     R4,A
        MOV     A,?V0 + 15
        ADDC    A,?V0 + 13
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,?V0 + 10
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 11
        MOV     R3,A
        LCALL   ??LCD_DrawPoint?relay
??Draw_Circle_0:
        CLR     C
        MOV     A,?V0 + 12
        SUBB    A,?V0 + 10
        MOV     A,?V0 + 13
        SUBB    A,?V0 + 11
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     $+5
        LJMP    ??Draw_Circle_3 & 0xFFFF
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,?V0 + 12
        MOV     ?V0 + 8,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 13
        MOV     ?V0 + 9,A
        MOV     A,?V0 + 14
        CLR     C
        SUBB    A,?V0 + 10
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 15
        SUBB    A,?V0 + 11
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function LCD_DrawPoint
        MOV     R4,?V0 + 0
        MOV     R5,A
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_46:
        ADD     A,?V0 + 12
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 13
        MOV     ?V0 + 5,A
        ; Setup parameters for call to function LCD_DrawPoint
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,?V0 + 4
        MOV     R3,A
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_47:
        CLR     C
        SUBB    A,?V0 + 10
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,?V0 + 11
        MOV     ?V0 + 3,A
        MOV     A,?V0 + 14
        ADD     A,?V0 + 12
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 15
        ADDC    A,?V0 + 13
        MOV     ?V0 + 7,A
        ; Setup parameters for call to function LCD_DrawPoint
        MOV     R4,?V0 + 6
        MOV     R5,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??LCD_DrawPoint?relay
        ; Setup parameters for call to function LCD_DrawPoint
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        LCALL   ??LCD_DrawPoint?relay
        MOV     A,?V0 + 14
        CLR     C
        SUBB    A,?V0 + 12
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 15
        SUBB    A,?V0 + 13
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function LCD_DrawPoint
        MOV     R4,?V0 + 0
        MOV     R5,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??LCD_DrawPoint?relay
        MOV     A,?V0 + 14
        ADD     A,?V0 + 10
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 15
        ADDC    A,?V0 + 11
        MOV     ?V0 + 3,A
        ; Setup parameters for call to function LCD_DrawPoint
        MOV     R4,?V0 + 2
        MOV     R5,A
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_48:
        ADD     A,?V0 + 10
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 11
        MOV     ?V0 + 5,A
        ; Setup parameters for call to function LCD_DrawPoint
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,?V0 + 4
        MOV     R3,A
        LCALL   ??LCD_DrawPoint?relay
        ; Setup parameters for call to function LCD_DrawPoint
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??LCD_DrawPoint?relay
        ; Setup parameters for call to function LCD_DrawPoint
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        LCALL   ??LCD_DrawPoint?relay
        MOV     A,?V0 + 10
        ADD     A,#0x1
        MOV     ?V0 + 10,A
        MOV     A,?V0 + 11
        ADDC    A,#0x0
        MOV     ?V0 + 11,A
        CLR     C
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_75:
        JC      $+5
        LJMP    ??Draw_Circle_1 & 0xFFFF
        MOV     ?V0 + 0,?V0 + 10
        MOV     ?V0 + 1,?V0 + 11
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,#0x6
        LCALL   ?Subroutine29 & 0xFFFF
//  512 	}
??CrossCallReturnLabel_45:
        LJMP    ??Draw_Circle_2 & 0xFFFF
//  513 } 
??Draw_Circle_3:
        MOV     A,#0x3
        LJMP    ?Subroutine5 & 0xFFFF
        CFI EndBlock cfiBlock127

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond128 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond129) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond129) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond129) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond129) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond129) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond129) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond129) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond129) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond129) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond130) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond130) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond130) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond130) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond130) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker131 Using cfiCommon1
        CFI (cfiPicker131) NoFunction
        CFI (cfiPicker131) Picker
        LCALL   ??LCD_DrawPoint?relay
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiPicker131

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond132 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond133 Using cfiCommon0
        CFI (cfiCond133) NoFunction
        CFI (cfiCond133) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond133) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond133) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond133) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond133) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond133) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond133) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond133) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond133) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond133) CFA_SP SP+0
        CFI (cfiCond133) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker134 Using cfiCommon1
        CFI (cfiPicker134) NoFunction
        CFI (cfiPicker134) Picker
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R6
        ADD     A,R0
        MOV     R6,A
        MOV     A,R7
        ADDC    A,R1
        MOV     R7,A
        RET
        CFI EndBlock cfiCond132
        CFI EndBlock cfiCond133
        CFI EndBlock cfiPicker134

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond135 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_74
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond136) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond136) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond136) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond136) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond136) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond136) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond136) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond136) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker137 Using cfiCommon1
        CFI (cfiPicker137) NoFunction
        CFI (cfiPicker137) Picker
        MOV     A,R7
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiPicker137
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine39_0:
        CFI Block cfiCond138 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_73
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond139 Using cfiCommon0
        CFI (cfiCond139) NoFunction
        CFI (cfiCond139) Conditional ??CrossCallReturnLabel_74
        CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond139) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond139) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond139) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond139) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond139) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond139) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond139) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond139) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond139) CFA_SP SP+0
        CFI (cfiCond139) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond140 Using cfiCommon0
        CFI (cfiCond140) NoFunction
        CFI (cfiCond140) Conditional ??CrossCallReturnLabel_75
        CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond140) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond140) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond140) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond140) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond140) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond140) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond140) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond140) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond140) CFA_SP SP+0
        CFI (cfiCond140) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker141 Using cfiCommon1
        CFI (cfiPicker141) NoFunction
        CFI (cfiPicker141) Picker
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond138
        CFI EndBlock cfiCond139
        CFI EndBlock cfiCond140
        CFI EndBlock cfiPicker141
//  514 
//  515 //ÔÚÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸ö×Ö·û
//  516 //num:ÒªÏÔÊ¾µÄ×Ö·û:" "--->"~"
//  517 //mode:µş¼Ó·½Ê½(1)»¹ÊÇ·Çµş¼Ó·½Ê½(0)

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  518 void LCD_ShowChar(uint16 x,uint16 y,uint8 num,uint8 mode)
LCD_ShowChar:
        CFI Block cfiBlock142 Using cfiCommon0
        CFI Function LCD_ShowChar
        CODE
//  519 {
        FUNCALL LCD_ShowChar, Address_set
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_ShowChar, LCD_WR_DATA
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_ShowChar, LCD_DrawPoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     ?V0 + 4,R1
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
//  520     uint8 temp;
//  521     uint8 pos,t;
//  522     uint16 x0=x;
//  523     y=y;
//  524     uint16 colortemp=POINT_COLOR;      
        MOV     DPTR,#POINT_COLOR
        LCALL   ?Subroutine18 & 0xFFFF
//  525     if(x>LCD_W-8||y>LCD_H-16)return;	    
??CrossCallReturnLabel_29:
        CLR     C
        MOV     A,R2
        SUBB    A,#0x7b
        MOV     A,R3
        SUBB    A,#0x0
        JC      $+5
        LJMP    ??LCD_ShowChar_0 & 0xFFFF
        CLR     C
        MOV     A,R6
        SUBB    A,#0x75
        MOV     A,R7
        SUBB    A,#0x0
        JC      $+5
        LJMP    ??LCD_ShowChar_0 & 0xFFFF
//  526 	//ÉèÖÃ´°¿Ú		   
//  527 	num=num-' ';//µÃµ½Æ«ÒÆºóµÄÖµ
        MOV     A,#-0x20
        ADD     A,?V0 + 4
        MOV     ?V0 + 4,A
//  528 	Address_set(x,y,x+8-1,y+16-1);      //ÉèÖÃ¹â±êÎ»ÖÃ 
        ; Setup parameters for call to function Address_set
        MOV     A,R6
        ADD     A,#0xf
        MOV     ?V0 + 6,A
        MOV     A,R7
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R2
        ADD     A,#0x7
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_61:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_68:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
//  529 	if(!mode) //·Çµş¼Ó·½Ê½
        MOV     A,?V0 + 5
        MOV     ?V0 + 5,#0x0
        JNZ     ??LCD_ShowChar_1
//  530 	{
//  531 		for(pos=0;pos<16;pos++)
//  532 		{ 
//  533 		  temp=asc2_1608[(uint16)num*16+pos];		 //µ÷ÓÃ1608×ÖÌå
??LCD_ShowChar_2:
        MOV     ?V0 + 6,?V0 + 4
        MOV     ?V0 + 7,#0x0
        MOV     A,#0x4
        MOV     R0,#?V0 + 6
        LCALL   ?S_SHL
        MOV     ?V0 + 0,?V0 + 5
        MOV     A,?V0 + 6
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,?V0 + 7
        LCALL   ?Subroutine26 & 0xFFFF
//  534 	          for(t=0;t<8;t++)
??CrossCallReturnLabel_40:
        MOV     R6,#0x8
//  535 		    {                 
//  536 		        if(temp&0x01)POINT_COLOR=colortemp;
??LCD_ShowChar_3:
        MOV     A,?V0 + 9
        MOV     C,0xE0 /* A   */.0
        JNC     ??LCD_ShowChar_4
        MOV     DPTR,#POINT_COLOR
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        SJMP    ??LCD_ShowChar_5
//  537 				else POINT_COLOR=BACK_COLOR;
??LCD_ShowChar_4:
        MOV     DPTR,#BACK_COLOR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#POINT_COLOR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??LCD_ShowChar_5:
        MOVX    @DPTR,A
//  538 				LCD_WR_DATA(POINT_COLOR);	
        ; Setup parameters for call to function LCD_WR_DATA
        MOV     DPTR,#POINT_COLOR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??LCD_WR_DATA?relay
//  539 				temp>>=1; 
        MOV     A,?V0 + 9
        CLR     C
        RRC     A
        MOV     ?V0 + 9,A
//  540 				x++;
//  541 		    }
        DEC     R6
        MOV     A,R6
        JNZ     ??LCD_ShowChar_3
//  542 			x=x0;
//  543 			y++;
//  544 		}	
        INC     ?V0 + 5
        MOV     A,?V0 + 5
        CLR     C
        SUBB    A,#0x10
        JNC     ??LCD_ShowChar_6
        SJMP    ??LCD_ShowChar_2
//  545 	}else//µş¼Ó·½Ê½
//  546 	{
//  547 		for(pos=0;pos<16;pos++)
//  548 		{
//  549 		    temp=asc2_1608[(uint16)num*16+pos];		 //µ÷ÓÃ1608×ÖÌå
??LCD_ShowChar_1:
        MOV     ?V0 + 8,?V0 + 4
        MOV     ?V0 + 9,#0x0
        MOV     A,#0x4
        MOV     R0,#?V0 + 8
        LCALL   ?S_SHL
        MOV     ?V0 + 6,?V0 + 5
        MOV     A,?V0 + 8
        ADD     A,?V0 + 6
        MOV     R0,A
        MOV     A,?V0 + 9
        LCALL   ?Subroutine26 & 0xFFFF
//  550 			for(t=0;t<8;t++)
??CrossCallReturnLabel_41:
        MOV     ?V0 + 8,#0x0
//  551 		    {                 
//  552 		        if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//»­Ò»¸öµã     
??LCD_ShowChar_7:
        MOV     A,?V0 + 9
        MOV     C,0xE0 /* A   */.0
        JNC     ??LCD_ShowChar_8
        ; Setup parameters for call to function LCD_DrawPoint
        MOV     ?V0 + 6,?V0 + 5
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     R4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R5,A
        MOV     ?V0 + 6,?V0 + 8
        MOV     A,?V0 + 0
        ADD     A,?V0 + 6
        MOV     R2,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??LCD_DrawPoint?relay
//  553 		        temp>>=1; 
??LCD_ShowChar_8:
        MOV     A,?V0 + 9
        CLR     C
        RRC     A
        MOV     ?V0 + 9,A
//  554 		    }
        INC     ?V0 + 8
        MOV     A,?V0 + 8
        CLR     C
        SUBB    A,#0x8
        JC      ??LCD_ShowChar_7
//  555 		}
        INC     ?V0 + 5
        MOV     A,?V0 + 5
        CLR     C
        SUBB    A,#0x10
        JC      ??LCD_ShowChar_1
//  556 	}
//  557 	POINT_COLOR=colortemp;	
??LCD_ShowChar_6:
        MOV     DPTR,#POINT_COLOR
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  558 }
??LCD_ShowChar_0:
        LJMP    ?Subroutine4 & 0xFFFF
        CFI EndBlock cfiBlock142

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond143 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_40
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_41
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond144) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiPicker145 Using cfiCommon1
        CFI (cfiPicker145) NoFunction
        CFI (cfiPicker145) Picker
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#asc2_1608 & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(asc2_1608 >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0 + 9,A
        RET
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiPicker145
//  559 
//  560 //m^nº¯Êı

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  561 unsigned int mypow(uint8 m,uint8 n)
mypow:
        CFI Block cfiBlock146 Using cfiCommon0
        CFI Function mypow
        CODE
//  562 {
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R2
        MOV     R0,A
//  563 	unsigned int result=1;	 
        MOV     R2,#0x1
        MOV     R3,#0x0
        SJMP    ??mypow_0
//  564 	while(n--)result*=m;    
??mypow_1:
        MOV     A,R2
        MOV     B,R1
        MUL     AB
        MOV     R2,A
        MOV     R4,B
        MOV     B,R1
        MOV     A,R3
        MUL     AB
        ADD     A,R4
        MOV     R3,A
??mypow_0:
        MOV     A,R0
        MOV     R4,A
        MOV     A,#-0x1
        ADD     A,R4
        DEC     R0
        INC     A
        JNZ     ??mypow_1
//  565 	return result;
        LJMP    ?BRET
        CFI EndBlock cfiBlock146
//  566 }			 
//  567 
//  568 //ÏÔÊ¾2¸öÊı×Ö
//  569 //x,y :Æğµã×ø±ê	 
//  570 //len :Êı×ÖµÄÎ»Êı
//  571 //color:ÑÕÉ«
//  572 //num:ÊıÖµ(0~4294967295);	

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  573 void LCD_ShowNum(uint16 x,uint16 y,unsigned int num,uint8 len)
LCD_ShowNum:
        CFI Block cfiBlock147 Using cfiCommon0
        CFI Function LCD_ShowNum
        CODE
//  574 {         	
        FUNCALL LCD_ShowNum, LCD_ShowChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_ShowNum, mypow
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_ShowNum, LCD_ShowChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     ?V0 + 4,R4
        MOV     ?V0 + 5,R5
        MOV     ?V0 + 2,R1
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
//  575 	uint8 t,temp;
//  576 	uint8 enshow=0;
??CrossCallReturnLabel_19:
        MOV     ?V0 + 1,#0x0
//  577 	num=(uint16)num;
//  578 	for(t=0;t<len;t++)
        MOV     ?V0 + 0,#0x0
        SJMP    ??LCD_ShowNum_0
//  579 	{
//  580 		temp=(num/mypow(10,len-t-1))%10;
//  581 		if(enshow==0&&t<(len-1))
//  582 		{
//  583 			if(temp==0)
//  584 			{
//  585 				LCD_ShowChar(x+8*t,y,' ',0);
//  586 				continue;
//  587 			}else enshow=1; 
??LCD_ShowNum_1:
        MOV     ?V0 + 1,#0x1
//  588 		 	 
//  589 		}
//  590 	 	LCD_ShowChar(x+8*t,y,temp+48,0); 
??LCD_ShowNum_2:
        ; Setup parameters for call to function LCD_ShowChar
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,#0x30
        ADD     A,R2
        MOV     R1,A
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        MOV     ?V0 + 8,?V0 + 0
??LCD_ShowNum_3:
        MOV     ?V0 + 9,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 8
        LCALL   ?S_SHL
        MOV     A,?V0 + 6
        ADD     A,?V0 + 8
        MOV     R2,A
        MOV     A,?V0 + 7
        ADDC    A,?V0 + 9
        MOV     R3,A
        LCALL   ??LCD_ShowChar?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        INC     ?V0 + 0
??LCD_ShowNum_0:
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,?V0 + 2
        JNC     ??LCD_ShowNum_4
        ; Setup parameters for call to function mypow
        MOV     A,?V0 + 2
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_42:
        LCALL   ?US_DIV_MOD
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,?V0 + 1
        JNZ     ??LCD_ShowNum_2
        MOV     ?V0 + 8,?V0 + 0
        MOV     ?V0 + 10,?V0 + 2
        MOV     A,?V0 + 10
        ADD     A,#-0x1
        MOV     R0,A
        CLR     A
        ADDC    A,#-0x1
        MOV     R1,A
        CLR     C
        MOV     A,?V0 + 8
        SUBB    A,R0
        CLR     A
        SUBB    A,R1
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??LCD_ShowNum_2
        MOV     A,R2
        JNZ     ??LCD_ShowNum_1
        ; Setup parameters for call to function LCD_ShowChar
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,#0x20
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
        SJMP    ??LCD_ShowNum_3
        CFI CFA_XSP16 add(XSP16, 20)
//  591 	}
//  592 } 
??LCD_ShowNum_4:
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock147
//  593 
//  594 //ÏÔÊ¾2¸öÊı×Ö
//  595 //x,y:Æğµã×ø±ê
//  596 //num:ÊıÖµ(0~99);	 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  597 void LCD_Show2Num(uint16 x,uint16 y,uint16 num,uint8 len)
LCD_Show2Num:
        CFI Block cfiBlock148 Using cfiCommon0
        CFI Function LCD_Show2Num
        CODE
//  598 {         	
        FUNCALL LCD_Show2Num, mypow
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Show2Num, LCD_ShowChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     ?V0 + 1,R1
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
//  599 	uint8 t,temp;						   
//  600 	for(t=0;t<len;t++)
??CrossCallReturnLabel_20:
        MOV     ?V0 + 0,#0x0
        SJMP    ??LCD_Show2Num_0
//  601 	{
//  602 		temp=(num/mypow(10,len-t-1))%10;
//  603 	 	LCD_ShowChar(x+8*t,y,temp+'0',0); 
??LCD_Show2Num_1:
        ; Setup parameters for call to function LCD_ShowChar
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        ; Setup parameters for call to function mypow
        MOV     A,?V0 + 1
        LCALL   ?Subroutine27 & 0xFFFF
//  604 	}
??CrossCallReturnLabel_43:
        LCALL   ?US_DIV_MOD
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        MOV     R1,A
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     ?V0 + 6,?V0 + 0
        MOV     ?V0 + 7,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 6
        LCALL   ?S_SHL
        MOV     A,?V0 + 4
        ADD     A,?V0 + 6
        MOV     R2,A
        MOV     A,?V0 + 5
        ADDC    A,?V0 + 7
        MOV     R3,A
        LCALL   ??LCD_ShowChar?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        INC     ?V0 + 0
??LCD_Show2Num_0:
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,?V0 + 1
        JC      ??LCD_Show2Num_1
//  605 } 
        LJMP    ?Subroutine6 & 0xFFFF
        CFI EndBlock cfiBlock148

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond149 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker151 Using cfiCommon1
        CFI (cfiPicker151) NoFunction
        CFI (cfiPicker151) Picker
        CLR     C
        SUBB    A,?V0 + 0
        DEC     A
        MOV     R2,A
        MOV     R1,#0xa
        LCALL   ??mypow?relay
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        RET
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiPicker151
//  606 
//  607 //ÏÔÊ¾×Ö·û´®
//  608 //x,y:Æğµã×ø±ê  
//  609 //*p:×Ö·û´®ÆğÊ¼µØÖ·
//  610 //ÓÃ16×ÖÌå

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  611 void LCD_ShowString(uint16 x,uint16 y,  const uint8 *p)
LCD_ShowString:
        CFI Block cfiBlock152 Using cfiCommon0
        CFI Function LCD_ShowString
        CODE
//  612 {         
        FUNCALL LCD_ShowString, LCD_ShowChar
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_21:
        SJMP    ??LCD_ShowString_0
//  613     while(*p!='\0')
//  614     {       
//  615         if(x>LCD_W-8){x=0;y+=16;}
??LCD_ShowString_1:
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x7b
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        JC      ??LCD_ShowString_2
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        MOV     A,?V0 + 2
        ADD     A,#0x10
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
//  616         if(y>LCD_H-16){y=x=0;}
??LCD_ShowString_2:
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,#0x75
        MOV     A,?V0 + 3
        SUBB    A,#0x0
        JC      ??LCD_ShowString_3
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
//  617         LCD_ShowChar(x,y,*p,0);
??LCD_ShowString_3:
        ; Setup parameters for call to function LCD_ShowChar
        MOV     ?V0 + 4,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??LCD_ShowChar?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  618         x+=8;
        MOV     A,?V0 + 0
        ADD     A,#0x8
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
//  619         p++;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  620     }  
??LCD_ShowString_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??LCD_ShowString_1
        CFI EndBlock cfiBlock152
//  621 }
        REQUIRE ?Subroutine7
        ; // Fall through to label ?Subroutine7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiBlock153 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock153
//  622 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  623 void HalLcdWriteString(char *str, uint8 option)
HalLcdWriteString:
        CFI Block cfiBlock154 Using cfiCommon0
        CFI Function HalLcdWriteString
        CODE
//  624 {
        FUNCALL HalLcdWriteString, LCD_ShowString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, LCD_ShowString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  625   LCD_ShowString(0, (option-1)*16, "                ");
        MOV     A,R1
        ADD     A,#-0x1
        MOV     ?V0 + 2,A
        CLR     A
        ADDC    A,#-0x1
        MOV     ?V0 + 3,A
        MOV     A,#0x4
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        ; Setup parameters for call to function LCD_ShowString
        MOV     ?V0 + 2,#`?<Constant "                ">` & 0xff
        MOV     ?V0 + 3,#(`?<Constant "                ">` >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??LCD_ShowString?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  626   LCD_ShowString(0, (option-1)*16, str);
        ; Setup parameters for call to function LCD_ShowString
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??LCD_ShowString?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  627 }
        SJMP    ?Subroutine7
        CFI EndBlock cfiBlock154
//  628 
//  629 /**************************************************************************************************
//  630  * @fn      HalLcdWriteStringValue
//  631  *
//  632  * @brief   Write a string followed by a value to the LCD
//  633  *
//  634  * @param   title  - Title that will be displayed before the value
//  635  *          value  - value
//  636  *          format - redix
//  637  *          line   - line number
//  638  *
//  639  * @return  None
//  640  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  641 void HalLcdWriteStringValue( char *title, uint16 value, uint8 format, uint8 line )
HalLcdWriteStringValue:
        CFI Block cfiBlock155 Using cfiCommon0
        CFI Function HalLcdWriteStringValue
        CODE
//  642 {
        ; Saved register size: 0
        ; Auto size: 0
//  643 #if (HAL_LCD == TRUE)
//  644   uint8 tmpLen;
//  645   uint8 buf[HAL_LCD_MAX_BUFF];
//  646   uint32 err;
//  647 
//  648   tmpLen = (uint8)osal_strlen( (char*)title );
//  649   osal_memcpy( buf, title, tmpLen );
//  650   buf[tmpLen] = ' ';
//  651   err = (uint32)(value);
//  652   _ltoa( err, &buf[tmpLen+1], format );
//  653   HalLcdWriteString( (char*)buf, line );		
//  654 #endif
//  655 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock155
//  656 
//  657 /**************************************************************************************************
//  658  * @fn      HalLcdWriteStringValue
//  659  *
//  660  * @brief   Write a string followed by a value to the LCD
//  661  *
//  662  * @param   title   - Title that will be displayed before the value
//  663  *          value1  - value #1
//  664  *          format1 - redix of value #1
//  665  *          value2  - value #2
//  666  *          format2 - redix of value #2
//  667  *          line    - line number
//  668  *
//  669  * @return  None
//  670  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  671 void HalLcdWriteStringValueValue( char *title, uint16 value1, uint8 format1,
HalLcdWriteStringValueValue:
        CFI Block cfiBlock156 Using cfiCommon0
        CFI Function HalLcdWriteStringValueValue
        CODE
//  672                                   uint16 value2, uint8 format2, uint8 line )
//  673 {
        ; Saved register size: 0
        ; Auto size: 0
//  674 
//  675 #if (HAL_LCD == TRUE)
//  676 
//  677   uint8 tmpLen;
//  678   uint8 buf[HAL_LCD_MAX_BUFF];
//  679   uint32 err;
//  680 
//  681   tmpLen = (uint8)osal_strlen( (char*)title );
//  682   if ( tmpLen )
//  683   {
//  684     osal_memcpy( buf, title, tmpLen );
//  685     buf[tmpLen++] = ' ';
//  686   }
//  687 
//  688   err = (uint32)(value1);
//  689   _ltoa( err, &buf[tmpLen], format1 );
//  690   tmpLen = (uint8)osal_strlen( (char*)buf );
//  691 
//  692   buf[tmpLen++] = ',';
//  693   buf[tmpLen++] = ' ';
//  694   err = (uint32)(value2);
//  695   _ltoa( err, &buf[tmpLen], format2 );
//  696 
//  697   HalLcdWriteString( (char *)buf, line );		
//  698 
//  699 #endif
//  700 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock156
//  701 
//  702 /**************************************************************************************************
//  703  * @fn      HalLcdWriteScreen
//  704  *
//  705  * @brief   Write a value to the LCD
//  706  *
//  707  * @param   line1  - string that will be displayed on line 1
//  708  *          line2  - string that will be displayed on line 2
//  709  *
//  710  * @return  None
//  711  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  712 void HalLcdWriteScreen( char *line1, char *line2 )
HalLcdWriteScreen:
        CFI Block cfiBlock157 Using cfiCommon0
        CFI Function HalLcdWriteScreen
        CODE
//  713 {
        ; Saved register size: 0
        ; Auto size: 0
//  714 #if (HAL_LCD == TRUE)
//  715   HalLcdWriteString( line1, 1 );
//  716   HalLcdWriteString( line2, 2 );
//  717 #endif
//  718 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock157
//  719 
//  720 /**************************************************************************************************
//  721  * @fn      HalLcdWriteValue
//  722  *
//  723  * @brief   Write a value to the LCD
//  724  *
//  725  * @param   value  - value that will be displayed
//  726  *          radix  - 8, 10, 16
//  727  *          option - display options
//  728  *
//  729  * @return  None
//  730  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  731 void HalLcdWriteValue ( uint32 value, const uint8 radix, uint8 option)
HalLcdWriteValue:
        CFI Block cfiBlock158 Using cfiCommon0
        CFI Function HalLcdWriteValue
        CODE
//  732 {
        ; Saved register size: 0
        ; Auto size: 0
//  733 #if (HAL_LCD == TRUE)
//  734   uint8 buf[HAL_LCD_MAX_BUFF];
//  735 
//  736   _ltoa( value, &buf[0], radix );
//  737   HalLcdWriteString( (char*)buf, option );
//  738 #endif
//  739 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock158

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_DLY_ms?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_DLY_ms

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_Wrtie_Bus?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_Wrtie_Bus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_WR_DATA8?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_WR_DATA8

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_WR_DATA?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_WR_DATA

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_WR_REG?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_WR_REG

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_WR_REG_DATA?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_WR_REG_DATA

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Address_set?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Address_set

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_Clear?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_Clear

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcd_HW_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??showhanzi24x24?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    showhanzi24x24

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??showhanzi16x16?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    showhanzi16x16

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_DrawPoint?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_DrawPoint

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_DrawPoint_big?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_DrawPoint_big

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DispPic?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DispPic

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_Fill?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_Fill

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_DrawLine?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_DrawLine

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_DrawRectangle?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_DrawRectangle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Draw_Circle?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Draw_Circle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_ShowChar?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_ShowChar

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??mypow?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    mypow

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_ShowNum?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_ShowNum

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_Show2Num?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_Show2Num

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_ShowString?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_ShowString

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteString?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteString

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteStringValue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteStringValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteStringValueValue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteStringValueValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteScreen?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteScreen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteValue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteValue

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "                ">`:
        DB "                "

        END
//  740 /*********************************************************************
//  741  * @fn      Board_writeString
//  742  *
//  743  * @brief   Write a string on the LCD display.
//  744  *
//  745  * @param   str - string to print
//  746  * @param   line - line (page) to write (0-7)
//  747  *
//  748  * @return  void
//  749  *
//  750 void Board_writeString(char *str, uint8_t line)
//  751 {
//  752   HalLcdWriteString( (char*)str, line );
//  753 }
//  754 
//  755 static LCD_Handle lcdHandle = NULL;
//  756 void Board_Lcd_writeStringValue(char *str, uint16_t value,
//  757                                        uint8_t format,
//  758                                        uint8_t line)
//  759 {
//  760   HalLcdWriteString( (char*)str, line );
//  761   //LCD_writeLine(lcdHandle, 0, str, value, format, line);
//  762 }*/
// 
// 3 173 bytes in segment BANKED_CODE
//   174 bytes in segment BANK_RELAYS
// 1 520 bytes in segment CODE_C
//     3 bytes in segment SFR_AN
//    17 bytes in segment XDATA_ROM_C
//     4 bytes in segment XDATA_Z
// 
// 4 867 bytes of CODE  memory
//    17 bytes of CONST memory
//     0 bytes of DATA  memory (+ 3 bytes shared)
//     4 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
