///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        15/Dec/2017  09:55:39 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þÐ­µ÷Æ÷\ZStac /
//                          k-CC2530-2.5.1a\Projects\zstack\Samples\GenericAp /
//                          p\Source\Temperature.c                            /
//    Command line       =  -f D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þÐ­µ÷Æ÷\ZS /
//                          tack-CC2530-2.5.1a\Projects\zstack\Samples\Generi /
//                          cApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cf /
//                          g (-DCPU32MHZ -DROOT=__near_func                  /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þÐ­µ÷Æ÷\ZS /
//                          tack-CC2530-2.5.1a\Projects\zstack\Samples\Generi /
//                          cApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.c /
//                          fg (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0  /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\zigbee------\cÓïÑÔ°æ\ÏÂ /
//                          Î»»ú\½Úµã¶þÐ­µ÷Æ÷\ZStack-CC2530-2.5.1a\Projects\z /
//                          stack\Samples\GenericApp\Source\Temperature.c -D  /
//                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D             /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC            /
//                          D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þÐ­µ÷Æ÷\ZStac /
//                          k-CC2530-2.5.1a\Projects\zstack\Samples\GenericAp /
//                          p\CC2530DB\CoordinatorEB\List\ -lA                /
//                          D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þÐ­µ÷Æ÷\ZStac /
//                          k-CC2530-2.5.1a\Projects\zstack\Samples\GenericAp /
//                          p\CC2530DB\CoordinatorEB\List\ --diag_suppress    /
//                          Pe001,Pa010 -o D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµ /
//                          ã¶þÐ­µ÷Æ÷\ZStack-CC2530-2.5.1a\Projects\zstack\Sa /
//                          mples\GenericApp\CC2530DB\CoordinatorEB\Obj\ -e   /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þÐ­µ÷Æ÷\ZStac /
//                          k-CC2530-2.5.1a\Projects\zstack\Samples\GenericAp /
//                          p\CC2530DB\ -I D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµ /
//                          ã¶þÐ­µ÷Æ÷\ZStack-CC2530-2.5.1a\Projects\zstack\Sa /
//                          mples\GenericApp\CC2530DB\..\Source\ -I           /
//                          D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þÐ­µ÷Æ÷\ZStac /
//                          k-CC2530-2.5.1a\Projects\zstack\Samples\GenericAp /
//                          p\CC2530DB\..\..\..\ZMain\TI2530DB\ -I            /
//                          D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þÐ­µ÷Æ÷\ZStac /
//                          k-CC2530-2.5.1a\Projects\zstack\Samples\GenericAp /
//                          p\CC2530DB\..\..\..\..\..\Components\hal\include\ /
//                           -I D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þÐ­µ÷Æ÷\Z /
//                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\Gener /
//                          icApp\CC2530DB\..\..\..\..\..\Components\hal\targ /
//                          et\CC2530EB\ -I D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Ú /
//                          µã¶þÐ­µ÷Æ÷\ZStack-CC2530-2.5.1a\Projects\zstack\S /
//                          amples\GenericApp\CC2530DB\..\..\..\..\..\Compone /
//                          nts\mac\include\ -I D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»» /
//                          ú\½Úµã¶þÐ­µ÷Æ÷\ZStack-CC2530-2.5.1a\Projects\zsta /
//                          ck\Samples\GenericApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\mac\high_level\ -I                        /
//                          D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þÐ­µ÷Æ÷\ZStac /
//                          k-CC2530-2.5.1a\Projects\zstack\Samples\GenericAp /
//                          p\CC2530DB\..\..\..\..\..\Components\mac\low_leve /
//                          l\srf04\ -I D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þ /
//                          Ð­µ÷Æ÷\ZStack-CC2530-2.5.1a\Projects\zstack\Sampl /
//                          es\GenericApp\CC2530DB\..\..\..\..\..\Components\ /
//                          mac\low_level\srf04\single_chip\ -I               /
//                          D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þÐ­µ÷Æ÷\ZStac /
//                          k-CC2530-2.5.1a\Projects\zstack\Samples\GenericAp /
//                          p\CC2530DB\..\..\..\..\..\Components\mt\ -I       /
//                          D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þÐ­µ÷Æ÷\ZStac /
//                          k-CC2530-2.5.1a\Projects\zstack\Samples\GenericAp /
//                          p\CC2530DB\..\..\..\..\..\Components\osal\include /
//                          \ -I D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þÐ­µ÷Æ÷\ /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\Components\service /
//                          s\saddr\ -I D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þ /
//                          Ð­µ÷Æ÷\ZStack-CC2530-2.5.1a\Projects\zstack\Sampl /
//                          es\GenericApp\CC2530DB\..\..\..\..\..\Components\ /
//                          services\sdata\ -I D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú /
//                          \½Úµã¶þÐ­µ÷Æ÷\ZStack-CC2530-2.5.1a\Projects\zstac /
//                          k\Samples\GenericApp\CC2530DB\..\..\..\..\..\Comp /
//                          onents\stack\af\ -I D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»» /
//                          ú\½Úµã¶þÐ­µ÷Æ÷\ZStack-CC2530-2.5.1a\Projects\zsta /
//                          ck\Samples\GenericApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\stack\nwk\ -I D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ /
//                          »»ú\½Úµã¶þÐ­µ÷Æ÷\ZStack-CC2530-2.5.1a\Projects\zs /
//                          tack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C /
//                          omponents\stack\sapi\ -I                          /
//                          D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þÐ­µ÷Æ÷\ZStac /
//                          k-CC2530-2.5.1a\Projects\zstack\Samples\GenericAp /
//                          p\CC2530DB\..\..\..\..\..\Components\stack\sec\   /
//                          -I D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þÐ­µ÷Æ÷\ZS /
//                          tack-CC2530-2.5.1a\Projects\zstack\Samples\Generi /
//                          cApp\CC2530DB\..\..\..\..\..\Components\stack\sys /
//                          \ -I D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þÐ­µ÷Æ÷\ /
//                          ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\..\..\..\..\..\Components\stack\z /
//                          do\ -I D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þÐ­µ÷Æ /
//                          ÷\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\Ge /
//                          nericApp\CC2530DB\..\..\..\..\..\Components\zmac\ /
//                           -I D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þÐ­µ÷Æ÷\Z /
//                          Stack-CC2530-2.5.1a\Projects\zstack\Samples\Gener /
//                          icApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w /
//                          \ -Ohz --require_prototypes                       /
//    List file          =  D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þÐ­µ÷Æ÷\ZStac /
//                          k-CC2530-2.5.1a\Projects\zstack\Samples\GenericAp /
//                          p\CC2530DB\CoordinatorEB\List\Temperature.s51     /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Temperature

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?S_SHL
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??Hal_HW_WaitUs?relay
        FUNCTION ??Hal_HW_WaitUs?relay,0203H
        PUBLIC ??Temperature_readAndsend?relay
        FUNCTION ??Temperature_readAndsend?relay,0203H
        PUBLIC ??get_id?relay
        FUNCTION ??get_id?relay,0203H
        PUBLIC ??init_1820?relay
        FUNCTION ??init_1820?relay,0203H
        PUBLIC ??myApp_ReadTemperature?relay
        FUNCTION ??myApp_ReadTemperature?relay,0203H
        PUBLIC ??read_1820?relay
        FUNCTION ??read_1820?relay,0203H
        PUBLIC ??read_data?relay
        FUNCTION ??read_data?relay,0203H
        PUBLIC ??write_1820?relay
        FUNCTION ??write_1820?relay,0203H
        PUBLIC Hal_HW_WaitUs
        FUNCTION Hal_HW_WaitUs,080203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBWEAK P1DIR
        PUBLIC Temperature_readAndsend
        FUNCTION Temperature_readAndsend,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK _A_P1
        PUBLIC ds18b20_cunzai
        PUBLIC flag
        PUBLIC get_id
        FUNCTION get_id,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC id
        PUBLIC init_1820
        FUNCTION init_1820,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC myApp_ReadTemperature
        FUNCTION myApp_ReadTemperature,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC read_1820
        FUNCTION read_1820,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC read_data
        FUNCTION read_data,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC temh
        PUBLIC teml
        PUBLIC wendu
        PUBLIC write_1820
        FUNCTION write_1820,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
Hal_HW_WaitUs       SYMBOL "Hal_HW_WaitUs"
??Hal_HW_WaitUs?relay SYMBOL "?relay", Hal_HW_WaitUs
Temperature_readAndsend SYMBOL "Temperature_readAndsend"
??Temperature_readAndsend?relay SYMBOL "?relay", Temperature_readAndsend
get_id              SYMBOL "get_id"
??get_id?relay      SYMBOL "?relay", get_id
init_1820           SYMBOL "init_1820"
??init_1820?relay   SYMBOL "?relay", init_1820
myApp_ReadTemperature SYMBOL "myApp_ReadTemperature"
??myApp_ReadTemperature?relay SYMBOL "?relay", myApp_ReadTemperature
read_1820           SYMBOL "read_1820"
??read_1820?relay   SYMBOL "?relay", read_1820
read_data           SYMBOL "read_data"
??read_data?relay   SYMBOL "?relay", read_data
write_1820          SYMBOL "write_1820"
??write_1820?relay  SYMBOL "?relay", write_1820

// D:\zigbee------\cÓïÑÔ°æ\ÏÂÎ»»ú\½Úµã¶þÐ­µ÷Æ÷\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\Source\Temperature.c
//    1 #include"head.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//    2 #include"Temperature_head.h"
//    3 #include "hal_uart.h"
//    4 #define CL_DQ  P1_1=0
//    5 #define SET_DQ P1_1=1 
//    6 #define SET_OUT P1DIR|=0x02
//    7 #define SET_IN  P1DIR&=~0x02
//    8 #define IN_DQ  P1_1
//    9 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   10 uchar temh,teml;
temh:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
teml:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   11 uchar wendu[30]={0};
wendu:
        DS 30
        REQUIRE __INIT_XDATA_Z
//   12 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   13 uchar id[8];
id:
        DS 8
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   14 uchar flag;
flag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   15 uchar ds18b20_cunzai;
ds18b20_cunzai:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   16 
//   17 #define CLKCONCMD_32MHZ  (0)
//   18 #define OSC_32KHZ  0x00
//   19 
//   20 #define HAL_BOARD_INI()                                         \ 
//   21 {                                                                \ 
//   22   uint16 i;                                                      \ 
//   23                                                                  \ 
//   24   SLEEPCMD &= ~(1<<(2));                       /* turn on 16MHz RC and 32MHz XOSC */                \ 
//   25   while (!(SLEEPSTA & (1 << (6))));            /* wait for 32MHz XOSC stable */                     \ 
//   26   asm("NOP");                                /* chip bug workaround */                            \ 
//   27   for (i=0; i<504; i++) asm("NOP");          /* Require 63us delay for all revs */                \ 
//   28   CLKCONCMD = (CLKCONCMD_32MHZ | OSC_32KHZ); /* Select 32MHz XOSC and the source for 32K clock */ \ 
//   29   while (CLKCONSTA != (CLKCONCMD_32MHZ | OSC_32KHZ)); /* Wait for the change to be effective */   \ 
//   30   SLEEPCMD |= (1 << (2));                        /* turn off 16MHz RC */                              \ 
//   31 }
//   32 
//   33 /**************************************************************************************************
//   34  * @fn      HalLcd_HW_WaitUs
//   35  *
//   36  * @brief   wait for x us. @ 32MHz MCU clock it takes 32 "nop"s for 1 us delay.
//   37  *
//   38  * @param   x us. range[0-65536]
//   39  *
//   40  * @return  None
//   41  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   42 void Hal_HW_WaitUs(uint microSecs)
Hal_HW_WaitUs:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Hal_HW_WaitUs
        CODE
//   43 {
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??Hal_HW_WaitUs_0
//   44   while(microSecs--)
//   45   {
//   46     /* 1 usecs */
//   47     asm("nop"); asm("nop"); asm("nop"); 
??Hal_HW_WaitUs_1:
        nop
        nop
        nop
//   48   }
??Hal_HW_WaitUs_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??Hal_HW_WaitUs_1
//   49 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   50 void init_1820(void) 
init_1820:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function init_1820
        CODE
//   51 {
        FUNCALL init_1820, Hal_HW_WaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init_1820, Hal_HW_WaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init_1820, Hal_HW_WaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL init_1820, Hal_HW_WaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   52   SET_OUT;//Ê¹P11ÎªÊä³ö×´Ì¬ 
        ORL     0xfe,#0x2
//   53   SET_DQ;//Êä³ö1
        SETB    0x90.1
//   54   Hal_HW_WaitUs(7);
        ; Setup parameters for call to function Hal_HW_WaitUs
        MOV     R2,#0x7
        MOV     R3,#0x0
        LCALL   ??Hal_HW_WaitUs?relay
//   55   CL_DQ; //Êä³ö0
        CLR     0x90.1
//   56   Hal_HW_WaitUs(530);//À­µÍÒ»¶ÎÊ±¼ä 
        ; Setup parameters for call to function Hal_HW_WaitUs
        MOV     R2,#0x12
        MOV     R3,#0x2
        LCALL   ?Subroutine3 & 0xFFFF
//   57   
//   58   SET_DQ;//Ê¹P11Îª¸ß£¬  
//   59   SET_IN;//Ê¹P11³ÉÎªÊäÈë×´Ì¬£¬µÈ´ý18b20µÄ´æÔÚµÍÂö³å½øÀ´ 
//   60   Hal_HW_WaitUs(44); //Ê¹P11Îª1ºóµÈ´ý15-60us£¬ÕâÀïµÈ´ý44us
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function Hal_HW_WaitUs
        MOV     R2,#0x2c
        MOV     R3,#0x0
        LCALL   ??Hal_HW_WaitUs?relay
//   61   if( IN_DQ == 0)
//   62     ds18b20_cunzai = 1;
        MOV     C,0x90.1
        JC      ??init_1820_0
        SETB    B.0
        SJMP    ??init_1820_1
??init_1820_0:
        CLR     B.0
??init_1820_1:
        MOV     C,B.0
        CLR     A
        RLC     A
        MOV     DPTR,#ds18b20_cunzai
        MOVX    @DPTR,A
//   63       else
//   64         ds18b20_cunzai = 0;//µÈ´ý»Ø¸´ 
//   65   Hal_HW_WaitUs(150);//»Ø¸´µÄµÍµçÆ½ÔÚ60µ½240us  
        ; Setup parameters for call to function Hal_HW_WaitUs
        MOV     R2,#-0x6a
        MOV     R3,#0x0
        LCALL   ??Hal_HW_WaitUs?relay
//   66   SET_OUT; 
        ORL     0xfe,#0x2
//   67   SET_DQ;//»Øµ½³õÊ¼DQ=1£»
        SETB    0x90.1
//   68 }
        SJMP    ??Subroutine5_0
        CFI EndBlock cfiBlock1
        REQUIRE P1DIR
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock2
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine5_0:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock3
//   69 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   70 void write_1820(uint x)  
write_1820:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function write_1820
        CODE
//   71 {  
        FUNCALL write_1820, Hal_HW_WaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL write_1820, Hal_HW_WaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   72   uchar m;    
//   73   SET_OUT;
        ORL     0xfe,#0x2
//   74   for(m=0;m<8;m++)  
        MOV     ?V0 + 0,#0x0
//   75   {  
//   76      CL_DQ;
??write_1820_0:
        CLR     0x90.1
//   77      Hal_HW_WaitUs(1);//¿´Ê±ÐòÍ¼£¬ÖÁÉÙÑÓÊ±1us£¬²Å²úÉúÐ´"Ê±¼äÏ¶" 
        ; Setup parameters for call to function Hal_HW_WaitUs
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??Hal_HW_WaitUs?relay
//   78      if(x&(1<<m))    //Ð´Êý¾Ý£¬´ÓµÍÎ»¿ªÊ¼  
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
        MOV     A,?V0 + 0
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     A,R6
        ANL     A,?V0 + 2
        MOV     R0,A
        MOV     A,R7
        ANL     A,?V0 + 3
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??write_1820_1
//   79      SET_DQ; 
        SETB    0x90.1
        SJMP    ??write_1820_2
//   80      else  
//   81      CL_DQ;  
??write_1820_1:
        CLR     0x90.1
//   82      Hal_HW_WaitUs(40);   //15~60us  
??write_1820_2:
        ; Setup parameters for call to function Hal_HW_WaitUs
        MOV     R2,#0x28
        MOV     R3,#0x0
        LCALL   ??Hal_HW_WaitUs?relay
//   83      SET_DQ;  
        SETB    0x90.1
//   84   }
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x8
        JC      ??write_1820_0
//   85   SET_DQ;  
        SETB    0x90.1
        CFI EndBlock cfiBlock4
//   86 } 
        REQUIRE ?Subroutine1
        REQUIRE P1DIR
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//   87 
//   88 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   89 uchar read_1820(void)  
read_1820:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function read_1820
        CODE
//   90 {   
        FUNCALL read_1820, Hal_HW_WaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_1820, Hal_HW_WaitUs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//   91   uchar temp,k,n;    
//   92   temp=0;  
        MOV     ?V0 + 0,#0x0
//   93   for(n=0;n<8;n++)  
        MOV     R6,#0x0
//   94   {  
//   95     CL_DQ; 
??read_1820_0:
        CLR     0x90.1
//   96     Hal_HW_WaitUs(1);  //¶ÁÊ±Ï¶ÆðÊ¼ÓÚÎ¢´¦ÀíÆ÷½«×ÜÏßÖÃµÍÖÁÉÙ1Î¢Ãë   
        ; Setup parameters for call to function Hal_HW_WaitUs
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ?Subroutine3 & 0xFFFF
//   97     SET_DQ;            //À­µÍ×ÜÏßºó½Ó×ÅÊÍ·Å×ÜÏß£¬ÈÃ´Ó»ú18b20ÄÜ¹»½Ó¹Ü×ÜÏß£¬Êä³öÓÐÐ§Êý¾Ý
//   98     SET_IN;  
//   99     k=IN_DQ;    //¶ÁÊý¾Ý,´ÓµÍÎ»¿ªÊ¼  
//  100     if(k)  
??CrossCallReturnLabel_3:
        MOV     C,0x90.1
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
        MOV     A,R6
        MOV     R0,#?V0 + 2
        JNC     ??read_1820_1
//  101     temp|=(1<<n);  
        LCALL   ?S_SHL
        MOV     A,?V0 + 2
        ORL     ?V0 + 0,A
        SJMP    ??read_1820_2
//  102     else  
//  103     temp&=~(1<<n);  
??read_1820_1:
        LCALL   ?S_SHL
        MOV     A,?V0 + 2
        CPL     A
        ANL     ?V0 + 0,A
//  104     Hal_HW_WaitUs(70); //60~120us      
??read_1820_2:
        ; Setup parameters for call to function Hal_HW_WaitUs
        MOV     R2,#0x46
        MOV     R3,#0x0
        LCALL   ??Hal_HW_WaitUs?relay
//  105     SET_OUT;
        ORL     0xfe,#0x2
//  106   
//  107   }  
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x8
        JC      ??read_1820_0
//  108   return (temp);  
        MOV     R1,?V0 + 0
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock6
        REQUIRE _A_P1
        REQUIRE P1DIR
//  109 }  

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        LCALL   ??Hal_HW_WaitUs?relay
        SETB    0x90.1
        ANL     0xfe,#0xfd
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9
//  110 //ËÑË÷ID

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  111 void get_id(void)
get_id:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function get_id
        CODE
//  112 {     
        FUNCALL get_id, init_1820
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_id, write_1820
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL get_id, read_1820
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  113   init_1820();        //resert
        ; Setup parameters for call to function init_1820
        LCALL   ??init_1820?relay
//  114   write_1820(0x33); 
        ; Setup parameters for call to function write_1820
        MOV     R2,#0x33
        MOV     R3,#0x0
        LCALL   ??write_1820?relay
//  115   
//  116   for(unsigned char ii=0;ii<8;ii++)
        MOV     R6,#0x0
//  117   {
//  118     id[ii]=read_1820();
??get_id_0:
        ; Setup parameters for call to function read_1820
        LCALL   ??read_1820?relay
        MOV     ?V0 + 0,R6
        MOV     A,#id & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#(id >> 8) & 0xff
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R1
        MOVX    @DPTR,A
//  119   }
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x8
        JC      ??get_id_0
//  120 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock10
//  121 
//  122 
//  123  

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  124 void read_data(void)
read_data:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function read_data
        CODE
//  125 {
        FUNCALL read_data, init_1820
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_data, write_1820
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_data, write_1820
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_data, Hal_HW_WaitUs
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_data, init_1820
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_data, write_1820
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_data, write_1820
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_data, read_1820
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL read_data, read_1820
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  126   uchar a,b,c;
//  127 
//  128   init_1820();  //¸´Î»18b20  
        ; Setup parameters for call to function init_1820
        LCALL   ?Subroutine2 & 0xFFFF
//  129   write_1820(0xcc);   // ·¢³ö×ª»»ÃüÁî ËÑË÷Æ÷¼þ 
//  130   write_1820(0x44);     //Æô¶¯  
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function write_1820
        MOV     R2,#0x44
        MOV     R3,#0x0
        LCALL   ??write_1820?relay
//  131   Hal_HW_WaitUs(2000);
        ; Setup parameters for call to function Hal_HW_WaitUs
        MOV     R2,#-0x30
        MOV     R3,#0x7
        LCALL   ??Hal_HW_WaitUs?relay
//  132   init_1820();  
        ; Setup parameters for call to function init_1820
        LCALL   ?Subroutine2 & 0xFFFF
//  133   write_1820(0xcc);
//  134   write_1820(0xbe); 
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function write_1820
        MOV     R2,#-0x42
        MOV     R3,#0x0
        LCALL   ??write_1820?relay
//  135        
//  136   teml=read_1820();  //¶ÁÊý¾Ý  
        ; Setup parameters for call to function read_1820
        LCALL   ??read_1820?relay
        MOV     A,R1
        MOV     DPTR,#teml
        MOVX    @DPTR,A
//  137   temh=read_1820();  
        ; Setup parameters for call to function read_1820
        LCALL   ??read_1820?relay
        MOV     A,R1
        MOV     DPTR,#temh
        MOVX    @DPTR,A
//  138   if(temh&0x80)//ÅÐ¶ÏÕý¸º
        MOV     C,0xE0 /* A   */.7
        MOV     DPTR,#flag
        JNC     ??read_data_0
//  139   {
//  140     flag=1;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  141     c=0;
//  142     c=c|temh;
//  143     c=c&0x00ff;
//  144     c=c<<8;
//  145     a=c;
//  146 
//  147     a=c|teml;
//  148 
//  149     a=(a^0xffff);//Òì»ò
//  150     a=a+1;  //È¡·´¼Ó1
        MOV     DPTR,#teml
        MOVX    A,@DPTR
        CPL     A
        INC     A
        MOV     R0,A
//  151     teml=a&0x0f;
        MOV     A,#0xf
        ANL     A,R0
        MOVX    @DPTR,A
//  152     temh=a>>4;
        MOV     A,R0
        SWAP    A
        ANL     A,#0xf
        MOV     DPTR,#temh
        SJMP    ??read_data_1
//  153   }
//  154   else
//  155   {
//  156     flag=0;   //ÎªÕý
??read_data_0:
        CLR     A
        MOVX    @DPTR,A
//  157     a=temh<<4;
//  158     a+=(teml&0xf0)>>4; //µÃµ½¸ßÎ»µÄÖµ
//  159     b=teml&0x0f;
//  160     temh=a;
        MOV     DPTR,#teml
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        MOV     R0,A
        MOV     DPTR,#temh
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf0
        ADD     A,R0
        MOVX    @DPTR,A
//  161     teml=b&0x00ff;
        MOV     DPTR,#teml
        MOVX    A,@DPTR
        ANL     A,#0xf
//  162   }
??read_data_1:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock11
//  163 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond13) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond13) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond13) CFA_SP SP+-5
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        LCALL   ??init_1820?relay
        ; Setup parameters for call to function write_1820
        ; Setup parameters for call to function write_1820
        MOV     R2,#-0x34
        MOV     R3,#0x0
        LCALL   ??write_1820?relay
        RET
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14
//  164 
//  165 /******************************************************************************
//  166  * @fn          myApp_ReadTemperature
//  167  *
//  168  * @brief       Reports temperature sensor reading
//  169  *
//  170  * @param
//  171  *
//  172  * @return
//  173  ******************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  174 void myApp_ReadTemperature( void )
myApp_ReadTemperature:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function myApp_ReadTemperature
        CODE
//  175 {
        FUNCALL myApp_ReadTemperature, read_data
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  176 	wendu[0]='$';
        MOV     DPTR,#wendu
        MOV     A,#0x24
        MOVX    @DPTR,A
//  177 	uint num;
//  178 	read_data();           // ¶ÁÈ¡ÎÂ¶È
        ; Setup parameters for call to function read_data
        LCALL   ??read_data?relay
//  179 	num=teml*625;          //Ð¡Êý²¿·ÖµÄÈ¡ÖµÃ¿Î»´ú±í0.0625£¨¾«¶È£©
        MOV     DPTR,#teml
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     B,#0x71
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x2
        MUL     AB
        ADD     A,R2
        MOV     R1,A
//  180 	if(flag==1)            //ÅÐ¶ÏÕý¸ºÎÂ¶È
        MOV     DPTR,#flag
        MOVX    A,@DPTR
        XRL     A,#0x1
        MOV     DPTR,#wendu + 1
        JNZ     ??myApp_ReadTemperature_0
//  181 	{
//  182 		wendu[1]='-';              //+0x2d Îª±ä"-"ASCIIÂë
        MOV     A,#0x2d
        SJMP    ??myApp_ReadTemperature_1
//  183 	}
//  184 	else 
//  185 		wendu[1]='+';  
??myApp_ReadTemperature_0:
        MOV     A,#0x2b
??myApp_ReadTemperature_1:
        MOVX    @DPTR,A
//  186 	
//  187 	if((temh/10%10==0)&&(temh/100==0))
        MOV     B,#0xa
        MOV     DPTR,#temh
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_4:
        JNZ     ??myApp_ReadTemperature_2
        MOV     B,#0x64
        MOVX    A,@DPTR
        DIV     AB
        JNZ     ??myApp_ReadTemperature_2
//  188 		wendu[2]='0';
        MOV     DPTR,#wendu + 2
        MOV     A,#0x30
        SJMP    ??myApp_ReadTemperature_3
//  189 	else 
//  190 		wendu[2]=temh/10%10+0x30;
??myApp_ReadTemperature_2:
        MOV     B,#0xa
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_5:
        ADD     A,#0x30
        MOV     DPTR,#wendu + 2
??myApp_ReadTemperature_3:
        MOVX    @DPTR,A
//  191 
//  192 	wendu[3]=temh%10+0x30;
        MOV     DPTR,#temh
        MOVX    A,@DPTR
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        ADD     A,#0x30
        MOV     DPTR,#wendu + 3
        MOVX    @DPTR,A
//  193 	wendu[4]='.';
        INC     DPTR
        MOV     A,#0x2e
        MOVX    @DPTR,A
//  194 	wendu[5]=num/1000+0x30;//ºöÂÔÐ¡Êýµãºó1Î»µÄÊý
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        INC     DPTR
        MOVX    @DPTR,A
//  195 	wendu[6]='#';//½áÊøÎ»
        INC     DPTR
        MOV     A,#0x23
        MOVX    @DPTR,A
//  196 	wendu[7]='\0';
        INC     DPTR
        CLR     A
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock15
//  197 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond17) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond17) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond17) CFA_SP SP+-5
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOVX    A,@DPTR
        DIV     AB
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  198 uchar *Temperature_readAndsend(void)
Temperature_readAndsend:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function Temperature_readAndsend
        CODE
//  199 {
        FUNCALL Temperature_readAndsend, myApp_ReadTemperature
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  200     myApp_ReadTemperature();
        ; Setup parameters for call to function myApp_ReadTemperature
        LCALL   ??myApp_ReadTemperature?relay
//  201      return wendu;
        MOV     R2,#wendu & 0xff
        MOV     R3,#(wendu >> 8) & 0xff
        LJMP    ??Subroutine5_0 & 0xFFFF
        CFI EndBlock cfiBlock19
//  202 }

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Hal_HW_WaitUs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Hal_HW_WaitUs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??init_1820?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    init_1820

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??write_1820?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    write_1820

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??read_1820?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    read_1820

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??get_id?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    get_id

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??read_data?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    read_data

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??myApp_ReadTemperature?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    myApp_ReadTemperature

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Temperature_readAndsend?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Temperature_readAndsend

        END
// 
// 569 bytes in segment BANKED_CODE
//  48 bytes in segment BANK_RELAYS
//   2 bytes in segment SFR_AN
//  42 bytes in segment XDATA_Z
// 
// 617 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 2 bytes shared)
//  42 bytes of XDATA memory
//
//Errors: none
//Warnings: none
