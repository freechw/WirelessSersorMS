///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        06/May/2022  20:51:36 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\GenericApp\Source\light.c       /
//    Command line       =  -f H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Pro /
//                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\.. /
//                          \Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ          /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Pro /
//                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\.. /
//                          \Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO        /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 H:\物联网课程备课专用\ZSta /
//                          ck-CC2530-2.5.1a\Projects\zstack\Samples\GenericA /
//                          pp\Source\light.c -D ZTOOL_P1 -D MT_TASK -D       /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D                     /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\GenericApp\CC2530DB\Coordinator /
//                          EB\List\ -lA H:\物联网课程备课专用\ZStack-CC2530- /
//                          2.5.1a\Projects\zstack\Samples\GenericApp\CC2530D /
//                          B\CoordinatorEB\List\ --diag_suppress             /
//                          Pe001,Pa010 -o H:\物联网课程备课专用\ZStack-CC253 /
//                          0-2.5.1a\Projects\zstack\Samples\GenericApp\CC253 /
//                          0DB\CoordinatorEB\Obj\ -e --no_code_motion        /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Pro /
//                          jects\zstack\Samples\GenericApp\CC2530DB\ -I      /
//                          H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\GenericApp\CC2530DB\..\Source\  /
//                          -I H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Pro /
//                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\.. /
//                          \ZMain\TI2530DB\ -I H:\物联网课程备课专用\ZStack- /
//                          CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\ /
//                          CC2530DB\..\..\..\..\..\Components\hal\include\   /
//                          -I H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Pro /
//                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\.. /
//                          \..\..\Components\hal\target\CC2530EB\ -I         /
//                          H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. /
//                          \..\Components\mac\include\ -I                    /
//                          H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. /
//                          \..\Components\mac\high_level\ -I                 /
//                          H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. /
//                          \..\Components\mac\low_level\srf04\ -I            /
//                          H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. /
//                          \..\Components\mac\low_level\srf04\single_chip\   /
//                          -I H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Pro /
//                          jects\zstack\Samples\GenericApp\CC2530DB\..\..\.. /
//                          \..\..\Components\mt\ -I                          /
//                          H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. /
//                          \..\Components\osal\include\ -I                   /
//                          H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. /
//                          \..\Components\services\saddr\ -I                 /
//                          H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. /
//                          \..\Components\services\sdata\ -I                 /
//                          H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. /
//                          \..\Components\stack\af\ -I                       /
//                          H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. /
//                          \..\Components\stack\nwk\ -I                      /
//                          H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. /
//                          \..\Components\stack\sapi\ -I                     /
//                          H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. /
//                          \..\Components\stack\sec\ -I                      /
//                          H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. /
//                          \..\Components\stack\sys\ -I                      /
//                          H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. /
//                          \..\Components\stack\zdo\ -I                      /
//                          H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. /
//                          \..\Components\zmac\ -I                           /
//                          H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. /
//                          \..\Components\zmac\f8w\ -Ohz                     /
//                          --require_prototypes                              /
//    List file          =  H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\GenericApp\CC2530DB\Coordinator /
//                          EB\List\light.s51                                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME light

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??myApp_ReadLightLevel?relay
        FUNCTION ??myApp_ReadLightLevel?relay,0203H
        PUBLIC ??send_LightLevel?relay
        FUNCTION ??send_LightLevel?relay,0203H
        PUBWEAK ADCCFG
        PUBWEAK ADCCON1
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        PUBLIC lightdata
        PUBLIC myApp_ReadLightLevel
        FUNCTION myApp_ReadLightLevel,0203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC send_LightLevel
        FUNCTION send_LightLevel,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
myApp_ReadLightLevel SYMBOL "myApp_ReadLightLevel"
??myApp_ReadLightLevel?relay SYMBOL "?relay", myApp_ReadLightLevel
send_LightLevel     SYMBOL "send_LightLevel"
??send_LightLevel?relay SYMBOL "?relay", send_LightLevel

// H:\物联网课程备课专用\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\GenericApp\Source\light.c
//    1 #include"hal_types.h"
//    2 #include"light.h"

        ASEGN SFR_AN:DATA:NOROOT,0b4H
// unsigned char volatile __sfr ADCCON1
ADCCON1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr ADCCFG
ADCCFG:
        DATA8
        DS 1

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    3 uchar lightdata[5];
lightdata:
        DS 5
        REQUIRE __INIT_XDATA_Z

        RSEG BANKED_CODE:CODE:NOROOT(0)
//    4 uint16 myApp_ReadLightLevel( void )
myApp_ReadLightLevel:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function myApp_ReadLightLevel
        CODE
//    5 {
        ; Saved register size: 0
        ; Auto size: 0
//    6   uint16 reading;
//    7   /* Enable channel */
//    8   ADCCFG |= 0x40;
        ORL     0xf2,#0x40
//    9   /* writing to this register starts the extra conversion */
//   10   ADCCON3 = 0x86;
        MOV     0xb6,#-0x7a
//   11   /* Wait for the conversion to be done */
//   12   while (!(ADCCON1 & 0x80));
??myApp_ReadLightLevel_0:
        MOV     A,0xb4
        MOV     C,0xE0 /* A   */.7
        JNC     ??myApp_ReadLightLevel_0
//   13   
//   14   /* Disable channel after done conversion */
//   15   ADCCFG &= (0x40 ^ 0xFF);
        ANL     0xf2,#0xbf
//   16   
//   17   /* Read the result */
//   18   reading = ADCL;
        MOV     A,0xba
//   19   reading |= (int16) (ADCH << 8); 
//   20   reading >>= 8;
//   21   return reading;
        MOV     A,0xbb
        MOV     R2,A
        CLR     A
        MOV     R3,A
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
        REQUIRE ADCCFG
        REQUIRE ADCCON3
        REQUIRE ADCCON1
        REQUIRE ADCL
        REQUIRE ADCH
//   22 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   23 uchar *send_LightLevel(void)
send_LightLevel:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function send_LightLevel
        CODE
//   24 {
        FUNCALL send_LightLevel, myApp_ReadLightLevel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   25      uint16 LightLevel = myApp_ReadLightLevel();
        ; Setup parameters for call to function myApp_ReadLightLevel
        LCALL   ??myApp_ReadLightLevel?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
//   26      lightdata[0] ='$';
        MOV     DPTR,#lightdata
        MOV     A,#0x24
        LCALL   ?Subroutine0 & 0xFFFF
//   27      if(LightLevel/10>10)
??CrossCallReturnLabel_0:
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        SUBB    A,#0xb
        MOV     A,R1
        SUBB    A,#0x0
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        JC      ??send_LightLevel_0
//   28      {
//   29        lightdata[1] = LightLevel / 100 + '0';
        MOV     R2,#0x64
        SJMP    ??send_LightLevel_1
//   30      }
//   31      else
//   32      {
//   33       lightdata[1] = LightLevel / 10 + '0';
??send_LightLevel_0:
        MOV     R2,#0xa
??send_LightLevel_1:
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        INC     DPTR
//   34      }
        LCALL   ?Subroutine0 & 0xFFFF
//   35       lightdata[2] = LightLevel % 10 + '0';
??CrossCallReturnLabel_1:
        LCALL   ?US_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        INC     DPTR
        MOVX    @DPTR,A
//   36      lightdata[3] ='#';
        INC     DPTR
        MOV     A,#0x23
        MOVX    @DPTR,A
//   37      lightdata[4] ='\0';
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//   38      return lightdata;
        MOV     R2,#lightdata & 0xff
        MOV     R3,#(lightdata >> 8) & 0xff
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//   39 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker4 Using cfiCommon1
        CFI (cfiPicker4) NoFunction
        CFI (cfiPicker4) Picker
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        RET
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiPicker4

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??myApp_ReadLightLevel?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    myApp_ReadLightLevel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??send_LightLevel?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    send_LightLevel

        END
// 
// 116 bytes in segment BANKED_CODE
//  12 bytes in segment BANK_RELAYS
//   5 bytes in segment SFR_AN
//   5 bytes in segment XDATA_Z
// 
// 128 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 5 bytes shared)
//   5 bytes of XDATA memory
//
//Errors: none
//Warnings: none
